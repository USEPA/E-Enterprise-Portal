{"version":3,"sources":["ElementQueries.js"],"names":["ElementQueries","this","getEmSize","element","document","documentElement","fontSize","getComputedStyle","parseFloat","convertToPx","value","units","replace","clientWidth","clientHeight","vw","vh","chooser","Math","SetupInformation","options","key","option","actualValue","attrValues","attrValue","attrName","width","height","addOption","idx","mode","property","join","attributes","call","offsetWidth","offsetHeight","hasOwnProperty","indexOf","k","setAttribute","substr","removeAttribute","setupElement","elementQueriesSetupInformation","elementQueriesSensor","ResizeSensor","withTracking","elements","push","queueQuery","selector","query","querySelectorAll","bind","$$","jQuery","i","j","length","extractQuery","css","match","regex","exec","readRules","rules","toLowerCase","type","selectorText","cssText","cssRules","init","styleSheets","e","name","update","detach","pop","instance","console","log","domLoaded","callback","addEventListener","test","navigator","userAgent","DOMLoadTimer","setInterval","readyState","clearInterval","window","onload","attachEvent"],"mappings":"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","file":"ElementQueries.js","sourcesContent":["/**\r\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\r\n * directory of this distribution and at\r\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\r\n */\r\n;\r\n(function() {\r\n    /**\r\n     *\r\n     * @type {Function}\r\n     * @constructor\r\n     */\r\n    var ElementQueries = this.ElementQueries = function() {\r\n\r\n        this.withTracking = false;\r\n        var elements = [];\r\n\r\n        /**\r\n         *\r\n         * @param element\r\n         * @returns {Number}\r\n         */\r\n        function getEmSize(element) {\r\n            if (!element) {\r\n                element = document.documentElement;\r\n            }\r\n            var fontSize = getComputedStyle(element, 'fontSize');\r\n            return parseFloat(fontSize) || 16;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @copyright https://github.com/Mr0grog/element-query/blob/master/LICENSE\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {*} value\r\n         * @returns {*}\r\n         */\r\n        function convertToPx(element, value) {\r\n            var units = value.replace(/[0-9]*/, '');\r\n            value = parseFloat(value);\r\n            switch (units) {\r\n                case \"px\":\r\n                    return value;\r\n                case \"em\":\r\n                    return value * getEmSize(element);\r\n                case \"rem\":\r\n                    return value * getEmSize();\r\n                // Viewport units!\r\n                // According to http://quirksmode.org/mobile/tableViewport.html\r\n                // documentElement.clientWidth/Height gets us the most reliable info\r\n                case \"vw\":\r\n                    return value * document.documentElement.clientWidth / 100;\r\n                case \"vh\":\r\n                    return value * document.documentElement.clientHeight / 100;\r\n                case \"vmin\":\r\n                case \"vmax\":\r\n                    var vw = document.documentElement.clientWidth / 100;\r\n                    var vh = document.documentElement.clientHeight / 100;\r\n                    var chooser = Math[units === \"vmin\" ? \"min\" : \"max\"];\r\n                    return value * chooser(vw, vh);\r\n                default:\r\n                    return value;\r\n                // for now, not supporting physical units (since they are just a set number of px)\r\n                // or ex/ch (getting accurate measurements is hard)\r\n            }\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @constructor\r\n         */\r\n        function SetupInformation(element) {\r\n            this.element = element;\r\n            this.options = {};\r\n            var key, option, width = 0, height = 0, value, actualValue, attrValues, attrValue, attrName;\r\n\r\n            /**\r\n             * @param {Object} option {mode: 'min|max', property: 'width|height', value: '123px'}\r\n             */\r\n            this.addOption = function(option) {\r\n                var idx = [option.mode, option.property, option.value].join(',');\r\n                this.options[idx] = option;\r\n            };\r\n\r\n            var attributes = ['min-width', 'min-height', 'max-width', 'max-height'];\r\n\r\n            /**\r\n             * Extracts the computed width/height and sets to min/max- attribute.\r\n             */\r\n            this.call = function() {\r\n                // extract current dimensions\r\n                width = this.element.offsetWidth;\r\n                height = this.element.offsetHeight;\r\n\r\n                attrValues = {};\r\n\r\n                for (key in this.options) {\r\n                    if (!this.options.hasOwnProperty(key)){\r\n                        continue;\r\n                    }\r\n                    option = this.options[key];\r\n\r\n                    value = convertToPx(this.element, option.value);\r\n\r\n                    actualValue = option.property == 'width' ? width : height;\r\n                    attrName = option.mode + '-' + option.property;\r\n                    attrValue = '';\r\n\r\n                    if (option.mode == 'min' && actualValue >= value) {\r\n                        attrValue += option.value;\r\n                    }\r\n\r\n                    if (option.mode == 'max' && actualValue <= value) {\r\n                        attrValue += option.value;\r\n                    }\r\n\r\n                    if (!attrValues[attrName]) attrValues[attrName] = '';\r\n                    if (attrValue && -1 === (' '+attrValues[attrName]+' ').indexOf(' ' + attrValue + ' ')) {\r\n                        attrValues[attrName] += ' ' + attrValue;\r\n                    }\r\n                }\r\n\r\n                for (var k in attributes) {\r\n                    if (attrValues[attributes[k]]) {\r\n                        this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1));\r\n                    } else {\r\n                        this.element.removeAttribute(attributes[k]);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        /**\r\n         * @param {HTMLElement} element\r\n         * @param {Object}      options\r\n         */\r\n        function setupElement(element, options) {\r\n            if (element.elementQueriesSetupInformation) {\r\n                element.elementQueriesSetupInformation.addOption(options);\r\n            } else {\r\n                element.elementQueriesSetupInformation = new SetupInformation(element);\r\n                element.elementQueriesSetupInformation.addOption(options);\r\n                element.elementQueriesSensor = new ResizeSensor(element, function() {\r\n                    element.elementQueriesSetupInformation.call();\r\n                });\r\n            }\r\n            element.elementQueriesSetupInformation.call();\r\n\r\n            if (this.withTracking) {\r\n                elements.push(element);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @param {String} selector\r\n         * @param {String} mode min|max\r\n         * @param {String} property width|height\r\n         * @param {String} value\r\n         */\r\n        function queueQuery(selector, mode, property, value) {\r\n            var query;\r\n            if (document.querySelectorAll) query = document.querySelectorAll.bind(document);\r\n            if (!query && 'undefined' !== typeof $$) query = $$;\r\n            if (!query && 'undefined' !== typeof jQuery) query = jQuery;\r\n\r\n            if (!query) {\r\n                throw 'No document.querySelectorAll, jQuery or Mootools\\'s $$ found.';\r\n            }\r\n\r\n            var elements = query(selector);\r\n            for (var i = 0, j = elements.length; i < j; i++) {\r\n                setupElement(elements[i], {\r\n                    mode: mode,\r\n                    property: property,\r\n                    value: value\r\n                });\r\n            }\r\n        }\r\n\r\n        var regex = /,?([^,\\n]*)\\[[\\s\\t]*(min|max)-(width|height)[\\s\\t]*[~$\\^]?=[\\s\\t]*\"([^\"]*)\"[\\s\\t]*]([^\\n\\s\\{]*)/mgi;\r\n\r\n        /**\r\n         * @param {String} css\r\n         */\r\n        function extractQuery(css) {\r\n            var match;\r\n            css = css.replace(/'/g, '\"');\r\n            while (null !== (match = regex.exec(css))) {\r\n                if (5 < match.length) {\r\n                    queueQuery(match[1] || match[5], match[2], match[3], match[4]);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @param {CssRule[]|String} rules\r\n         */\r\n        function readRules(rules) {\r\n            var selector = '';\r\n            if (!rules) {\r\n                return;\r\n            }\r\n            if ('string' === typeof rules) {\r\n                rules = rules.toLowerCase();\r\n                if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) {\r\n                    extractQuery(rules);\r\n                }\r\n            } else {\r\n                for (var i = 0, j = rules.length; i < j; i++) {\r\n                    if (1 === rules[i].type) {\r\n                        selector = rules[i].selectorText || rules[i].cssText;\r\n                        if (-1 !== selector.indexOf('min-height') || -1 !== selector.indexOf('max-height')) {\r\n                            extractQuery(selector);\r\n                        }else if(-1 !== selector.indexOf('min-width') || -1 !== selector.indexOf('max-width')) {\r\n                            extractQuery(selector);\r\n                        }\r\n                    } else if (4 === rules[i].type) {\r\n                        readRules(rules[i].cssRules || rules[i].rules);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Searches all css rules and setups the event listener to all elements with element query rules..\r\n         *\r\n         * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\r\n         *                               (no garbage collection possible if you don not call .detach() first)\r\n         */\r\n        this.init = function(withTracking) {\r\n            this.withTracking = withTracking;\r\n            for (var i = 0, j = document.styleSheets.length; i < j; i++) {\r\n                try {\r\n                    readRules(document.styleSheets[i].cssText || document.styleSheets[i].cssRules || document.styleSheets[i].rules);\r\n                } catch(e) {\r\n                    if (e.name !== 'SecurityError') {\r\n                        throw e;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         *\r\n         * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\r\n         *                               (no garbage collection possible if you don not call .detach() first)\r\n         */\r\n        this.update = function(withTracking) {\r\n            this.withTracking = withTracking;\r\n            this.init();\r\n        };\r\n\r\n        this.detach = function() {\r\n            if (!this.withTracking) {\r\n                throw 'withTracking is not enabled. We can not detach elements since we don not store it.' +\r\n                'Use ElementQueries.withTracking = true; before domready.';\r\n            }\r\n\r\n            var element;\r\n            while (element = elements.pop()) {\r\n                ElementQueries.detach(element);\r\n            }\r\n\r\n            elements = [];\r\n        };\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\r\n     *                               (no garbage collection possible if you don not call .detach() first)\r\n     */\r\n    ElementQueries.update = function(withTracking) {\r\n        ElementQueries.instance.update(withTracking);\r\n    };\r\n\r\n    /**\r\n     * Removes all sensor and elementquery information from the element.\r\n     *\r\n     * @param {HTMLElement} element\r\n     */\r\n    ElementQueries.detach = function(element) {\r\n        if (element.elementQueriesSetupInformation) {\r\n            element.elementQueriesSensor.detach();\r\n            delete element.elementQueriesSetupInformation;\r\n            delete element.elementQueriesSensor;\r\n            console.log('detached');\r\n        } else {\r\n            console.log('detached already', element);\r\n        }\r\n    };\r\n\r\n    ElementQueries.withTracking = false;\r\n\r\n    ElementQueries.init = function() {\r\n        if (!ElementQueries.instance) {\r\n            ElementQueries.instance = new ElementQueries();\r\n        }\r\n\r\n        ElementQueries.instance.init(ElementQueries.withTracking);\r\n    };\r\n\r\n    var domLoaded = function (callback) {\r\n        /* Internet Explorer */\r\n        /*@cc_on\r\n        @if (@_win32 || @_win64)\r\n            document.write('<script id=\"ieScriptLoad\" defer src=\"//:\"><\\/script>');\r\n            document.getElementById('ieScriptLoad').onreadystatechange = function() {\r\n                if (this.readyState == 'complete') {\r\n                    callback();\r\n                }\r\n            };\r\n        @end @*/\r\n        /* Mozilla, Chrome, Opera */\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', callback, false);\r\n        }\r\n        /* Safari, iCab, Konqueror */\r\n        if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) {\r\n            var DOMLoadTimer = setInterval(function () {\r\n                if (/loaded|complete/i.test(document.readyState)) {\r\n                    callback();\r\n                    clearInterval(DOMLoadTimer);\r\n                }\r\n            }, 10);\r\n        }\r\n        /* Other web browsers */\r\n        window.onload = callback;\r\n    };\r\n\r\n    if (window.addEventListener) {\r\n        window.addEventListener('load', ElementQueries.init, false);\r\n    } else {\r\n        window.attachEvent('onload', ElementQueries.init);\r\n    }\r\n    domLoaded(ElementQueries.init);\r\n\r\n})();\r\n"]}