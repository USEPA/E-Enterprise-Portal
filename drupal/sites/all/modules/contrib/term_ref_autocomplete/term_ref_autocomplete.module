<?php

/**
 * @file
 * 
 * This module provides an autocomplete widget that presents the matched terms 
 * in a hierarchical display.  Many of the widget-related hooks are copied 
 * from the core taxonomy autocomplete widget implementation and customized 
 * where needed for ours.
 * 
 * An added benefit of this module is that it returns actual TIDs instead of 
 * just the term names, assuring that the correct term has been selected in 
 * the event that a hierarchy has replicated terms.
 */

/**
 * Implements hook_menu
 */
function term_ref_autocomplete_menu() {
  $items = array();

  // AJAX endpoint for autocompletion  
  $items['term_ref_autocomplete/autocomplete'] = array(
    'title' => 'Autocomplete taxonomy',
    'page callback' => 'term_ref_autocomplete_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'term_ref_autocomplete.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_library
 * 
 * Note we include the core autocomplete.js since our code builds on top of it
 */
function term_ref_autocomplete_library() {
  $libraries = array();
  $base_path = drupal_get_path('module', 'term_ref_autocomplete'); 
  
  $libraries['term_ref_autocomplete'] = array(
    'title' => 'Hierarchical Term Reference Autocomplete',
    'version' => '1.0.0',
    'js' => array(
      'misc/autocomplete.js' => array('group' => JS_DEFAULT),
      $base_path . '/theme/term_ref_autocomplete.js' => array('scope' => 'footer'),
    ),
    'css' => array(
      $base_path . '/theme/term_ref_autocomplete.css' => array(),
    ),
  );
  
  return $libraries;
}

/**
 * Implements hook_theme
 */
function term_ref_autocomplete_theme($existing, $type, $theme, $path) {
  $items = array(
    'term_ref_autocomplete_field' => array(
      'render element' => 'element',
    ),
  );
  
  return $items;
}

/**
 * Implements hook_element_info
 */
function term_ref_autocomplete_element_info() {
  $types['term_ref_autocomplete_field'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#maxlength' => 128,
    '#autocomplete_path' => FALSE,
    '#process' => array('ajax_process_form'),
    '#theme' => 'term_ref_autocomplete_field',
    '#theme_wrappers' => array('form_element'),
  );

  return $types;  
}

/**
 * Implements theme callback for term_ref_autocomplete 
 */
function theme_term_ref_autocomplete_field(&$variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'text';
  element_set_attributes($element, array('id', 'name', 'value', 'size', 'maxlength'));
  _form_set_class($element, array('form-text'));

  $extra = '';
  if ($element['#autocomplete_path'] && drupal_valid_path($element['#autocomplete_path'])) {
    drupal_add_library('term_ref_autocomplete', 'term_ref_autocomplete');
  
    $element['#attributes']['class'][] = 'form-autocomplete';
    $element['#attributes']['class'][] = 'fluid';

    $attributes = array();
    $attributes['type'] = 'hidden';
    $attributes['id'] = $element['#attributes']['id'] . '-autocomplete';
    $attributes['value'] = url($element['#autocomplete_path'], array('absolute' => TRUE));
    $attributes['disabled'] = 'disabled';
    $attributes['class'][] = 'htrac-autocomplete';
    $extra .= '<input' . drupal_attributes($attributes) . ' />';
  }

  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';

  return $output . $extra;
}

/**
 * Implements hook_field_widget_info().
 */
function term_ref_autocomplete_field_widget_info() {
  return array(
    'term_ref_autocomplete_widget' => array(
      'label' => t('Hierarchical autocomplete term reference'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'size' => 60,
        'select_parents' => 0
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}
/**
 * Implements hook_field_widget_settings_form().
 */
function term_ref_autocomplete_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  $form = array();
  $form['select_parents'] = array(
    '#type' => 'checkbox',
    '#title' => t('Select ancestors automatically'),
    '#description' => t("When turned on, this option causes the widget to automatically select the ancestors of all selected items. The ancestors will be added invisibly to the selected value when the entity is saved.  <em>This option is only valid if an unlimited number of values can be selected.</em>"),
    '#default_value' => $settings['select_parents'],
    '#element_validate' => array('_term_ref_autocomplete_select_parents_validate'),
    '#return_value' => 1,
  );
  return $form;
}

/**
 * Makes sure that cardinality is unlimited if auto-select parents is enabled.
 */
function _term_ref_autocomplete_select_parents_validate($element, &$form_state) {
  if ($form_state['values']['instance']['widget']['settings']['select_parents'] == 1 && $form_state['values']['field']['cardinality'] != -1) {
    // This is pretty wonky syntax for the field name in form_set_error, but it's
    // correct.
    form_set_error('field][cardinality', t('You must select an Unlimited number of values if Select Ancestors Automatically is enabled.'));
  }
}

/**
 * Implements hook_field_widget_form() for widget
 */
function term_ref_autocomplete_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $settings = $instance['widget']['settings'];
  $tags = array();
  foreach ($items as $item) {
    $tmp_tag = '';
    if (isset($item['taxonomy_term'])) {
      $tmp_tag = $item['taxonomy_term'];
    }
    else {
      $term = taxonomy_term_load($item['tid']);
      if (!empty($term->name)) {
        $tmp_tag = $term->name;
      }
    }
    
    if (!empty($tmp_tag)) {
      if (strpos($tmp_tag, ',') !== FALSE || strpos($tmp_tag, '"') !== FALSE) {
        $tmp_tag = '"' . str_replace('"', '""', $tmp_tag) . '"';
      }      
      $tags[$item['tid']] = $tmp_tag . ' [tid:' . $item['tid'] . ']';
    }
  }
  
  $el_base = $element;

  // Provide a display field, which is the text input field that drives the autocomplete function
  $element['names'] = $el_base + array(
    '#type' => 'term_ref_autocomplete_field',
    '#default_value' => implode(', ', $tags),
    '#select_parents' => $settings['select_parents'],
    '#autocomplete_path' => 'term_ref_autocomplete/autocomplete/' . $field['field_name'],
    '#size' => $instance['widget']['settings']['size'],
    '#maxlength' => 1024,
    '#element_validate' => array('term_ref_autocomplete_taxonomy_autocomplete_validate'),
  );

  return $element;
}

/**
 * Form element validate handler for widget used as taxonomy term autocomplete element.
 */
function term_ref_autocomplete_taxonomy_autocomplete_validate($element, &$form_state) {
  $values = array();
  $value_ref = NULL;

  // See if this is a field collection
  if ('field_collection_item' == $element['#entity_type'] && !empty($element['#field_parents'])) {  
    $value_ref = &$form_state['values'][$element['#bundle']][$element['#language']][$element['#field_parents'][2]][$element['#field_name']][$element['#language']];
  }
    
  // Otherwise we're dealing with a normal field
  else {
    $value_ref = &$form_state['values'][$element['#field_name']][$element['#language']];
  }
  
  $tids = _term_ref_autocomplete_parse_input($value_ref['names']);
  if (!empty($tids)) {
    $terms = taxonomy_term_load_multiple($tids);
    
    // These need to be stored in a zero-indexed array as nested arrays instead of objects
    foreach ($terms as $key => $term) {
      $values[] = (array)$term;
      // if 'Include Ancestors' option is selected
      if($element['#select_parents']){
        $parents = taxonomy_get_parents_all($term->tid);
        // taxonomy_get_parents_all() returns all the ancestors chains
        // (included always the term itself) in flipped order.
        // For inserting the chain and preserving the hierarchical order,
        // get rid of the term itself here, it will be added at the end
        array_pop($values);
        // Add all the ancestor chain in hierarchical order
        foreach (array_reverse($parents) as $parent) {
          // If any ancestor is already selected, just ignore it;
          // otherwise insert at the end.
          if (!array_key_exists($parent->tid, $terms)) {
            $values[] = (array)$parent;
          }
        }
        // Put back the latest descendant term at the end of its ancestors
        $values[] = (array)$term;
      }
    }
  }
  // Overwrite the field value here.  This cleans up the 'names' and 'tids' element columns used to get here
  $value_ref = $values;
}

/**
 * Parses the input coming from the form element, either via AJAX calls or element validation and returns array of term IDs
 */
function _term_ref_autocomplete_parse_input($value) {
  $tags = array();
  preg_match_all('/\[\s*tid\s*:\s*(\d+)\s*\]/', $value, $matches);
  if (!empty($matches[1])) {
    $tags = $matches[1];
  }
  
  return $tags;
}
