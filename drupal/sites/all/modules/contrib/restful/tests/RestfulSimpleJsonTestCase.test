<?php

/**
 * @file
 * Contains RestfulSimpleJsonTestCase
 */

use Drupal\restful\Formatter\FormatterManager;
use Drupal\restful\Http\Request;

class RestfulSimpleJsonTestCase extends RestfulCurlBaseTestCase {

  public static function getInfo() {
    return array(
      'name' => 'View Simple JSON',
      'description' => 'Test the viewing of an entity in HAL+JSON format.',
      'group' => 'RESTful',
    );
  }

  public function setUp() {
    parent::setUp('restful_example', 'restful_test', 'entityreference');

    restful_test_add_fields();
  }

  /**
   * Test the Simple JSON formatter.
   */
  public function testSimpleJson() {
    $resource_manager = restful()->getResourceManager();
    $node = restful_test_create_node_with_tags();
    $handler = $resource_manager->getPlugin('articles:1.5');
    $resource_manager->clearPluginCache($handler->getPluginId());
    // Use the simple JSON formatter.
    $plugin_definition = $handler->getPluginDefinition();
    $plugin_definition['formatter'] = 'json';
    $handler->setPluginDefinition($plugin_definition);

    $handler->setRequest(Request::create('api/v1.5/articles/' . $node->nid));
    $handler->setPath($node->nid);
    $response = drupal_json_decode(restful()
      ->getFormatterManager()
      ->format($handler->process(), 'json'));
    $response = $response['data'];
    $formatter_manager = new FormatterManager($handler);
    $accept = empty($GLOBALS['_SERVER']['HTTP_ACCEPT']) ? NULL : $GLOBALS['_SERVER']['HTTP_ACCEPT'];
    $formatter = $formatter_manager->negotiateFormatter($accept, 'json');

    $result = $formatter->format($response);
    if ($decoded_json = drupal_json_decode($result)) {
      $this->pass('Valid JSON output generated.');
    }
    else {
      $this->fail('Invalid JSON output generated.');
    }

    $this->assertNotNull($decoded_json['data'], 'The "data" wrapper was created successfully.');

    // Assert the embedded tags.
    foreach ($decoded_json['data'][0]['tags'] as $index => $tag_info) {
      $this->assertNotNull($tag_info['self'], 'The "self" property was populated for the tags.');
      $this->assertNotNull($tag_info['id'], 'The "id" property was populated.');
      $this->assertEqual($tag_info['label'], $response[0]['tags'][$index]['label'], 'The "label" property was populated correctly.');
    }

    // Assert the HATEOAS.
    // Create another node for pagination.
    restful_test_create_node_with_tags();
    $handler->getDataProvider()->setRange(1);
    $handler->setRequest(Request::create(''));
    $handler->setPath('');
    $response = drupal_json_decode(restful()
      ->getFormatterManager()
      ->format($handler->process(), 'json'));
    $response = $response['data'];
    $result = $formatter->format($response);
    $decoded_json = drupal_json_decode($result);

    $this->assertNotNull($decoded_json['self'], '"Self" property added.');
    $this->assertEqual($decoded_json['count'], 2, 'Count was populated correctly.');
    $this->assertEqual(count($decoded_json['data']), 1, 'The correct number of items was listed.');
    $this->assertNotNull($decoded_json['next'], '"Next" property added.');
  }

}
