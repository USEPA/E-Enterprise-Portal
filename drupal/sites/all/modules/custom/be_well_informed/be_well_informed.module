<?php


/**
 * Implements hook_menu().
 */
function be_well_informed_menu() {
  $items = array();
  $items['be_well_informed/form_submission'] = array(
    'page callback' => 'be_well_informed_form_submission',
    'access callback' => TRUE,
  );
  $items['be_well_informed/get_state_information'] = array(
    'page callback' => 'be_well_informed_get_state_information',
    'access callback' => TRUE,
  );
  $items['be_well_informed/water_analysis_results_pdf'] = array(
    'page callback' => 'be_well_pdf_generate',
    'access callback' => TRUE,
  );
  $items['be_well_informed/generate_state_form'] = array(
    'page callback' => 'generate_state_form',
    'page arguments' => array('state_xml', 'other_variables'),
    'access callback' => TRUE,
  );
  $items['admin/config/system/be_well_informed'] = array(
    'title' => 'Be Well Infromed Settings',
    'description' => 'Settings page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('be_well_informed_admin'),
    'access arguments' => array('administer be_well_informed settings'),
    'file' => 'be_well_informed.admin.inc',
  );
  $items['be_well_informed/configuration_form'] = array( //this creates a URL that will call this form at "examples/form-example"
    'title' => 'Configuration Upload', //page title
    'description' => 'Enter your state/tribe\'s Be Well Informed XML.',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('be_well_informed_configurations_form'), //put the name of the form here
    'access callback' => '_is_admin'
  );
  return $items;
}

function be_well_informed_configurations_form($form, &$form_state) {

  $form['partner'] = array(
    '#type' => 'file',
    '#title' => t('Partner Configurations'),
    '#description' => t('Upload your configurations, allowed extensions: xml'),
  );
  $form['flowchart'] = array(
    '#type' => 'file',
    '#title' => t('Flowchart Configurations'),
    '#description' => t('Upload your configurations, allowed extensions: xml'),
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Checks if user is BWI admin allowed to see
 * upload page
 */
function _is_admin() {
  global $user;
  if (in_array('Be Well Informed External Admin', $user->roles)) {
    return true;
  }
  else {
    return false;
  }
}


function be_well_informed_configurations_form_validate($form, &$form_state) {
  // File_save_upload temporarily stores the file for evaluation
  $partner_file = file_save_upload('partner', ['file_validate_extensions' => ['xml']]);
  $flowchart_file = file_save_upload('flowchart', ['file_validate_extensions' => ['xml']]);
  if ($partner_file) {
    // Validate account settings
  }
  if ($flowchart_file) {
    // Validate Flowchart settings
  }
}

function be_well_informed_configurations_form_submit($form, &$form_state) {
  global $user;
  $user_data = user_load($user->uid);
  $user_location = '';
  if (isset($user_data->field_admin_state[LANGUAGE_NONE])) {
    $user_location = $user_data->field_admin_state[LANGUAGE_NONE][0]['safe_value'];
  }
  if (empty(trim($user_location))) {
    drupal_set_message('Your account has not been assigned a location for administering Be Well Informed 
    configurations.', 'error');
  }
  else {
    // Pass the file to the CDX hosted service.
    $cdx_upload_url = variable_get("bwi_file_upload_url", 'https://nodewebdev.epacdxnode.net/DWIService/dwievaluation');
    $params = ['statecode' => $user_location];
    // file_save_upload temporarily stores the file for evaluation
    $partner_file = file_save_upload('partner');
    $flowchart_file = file_save_upload('flowchart');

    if ($partner_file) {
      $partner_file_content = file_get_contents($partner_file->uri);
      $partner_file_encoded = base64_encode($partner_file_content);
      $params['PartnerContent'] = $partner_file_encoded;
    }

    if ($flowchart_file) {
      $flowchart_file_content = file_get_contents($flowchart_file->uri);
      $flowchart_file_encoded = base64_encode($flowchart_file_content);
      $params['FlowchartContent'] = $flowchart_file_encoded;
    }

    $response = drupal_http_request($cdx_upload_url,
      [
        'method' => 'POST',
        'data' => json_encode($params),
        'headers' => ['Content-Type' => 'application/json', 'Accept' => 'application/json']
      ]
    );

    if ($response->code != 200) {
      drupal_set_message('Unable to upload file.', 'error');
    }
    else {
      if ($partner_file) {
        drupal_set_message('Successfully uploaded partner configurations.', 'success');
      }
      if ($flowchart_file) {
        // Validate Flowchart settings
        drupal_set_message('Successfully uploaded flowchart configurations.', 'success');
      }
    }
  }
}


/**
 * Implements hook_block_info().
 */
function be_well_informed_block_info() {
  $blocks = array();
  $blocks['be_well_informed'] = array(
    'info' => t('Be Well Informed Block'),
    'cache' => DRUPAL_NO_CACHE
  );
  return $blocks;
}

/*
 * Generate pdf using wkhtmltopdf tool.
 * Example here: https://gist.github.com/davejamesmiller/1965886
 * */
function be_well_pdf_generate() {
  $html = theme('be_well_informed_pdf');

  if (variable_get('bwi_pdf_debug')) {
    exit($html);
  }

  $descriptorspec = array(
    0 => array('pipe', 'r'), // stdin
    1 => array('pipe', 'w'), // stdout
    2 => array('pipe', 'w'), // stderr
  );
  $current_srvr_name = variable_get('eportal_server_name');
  if (isset($current_srvr_name) && ($current_srvr_name == $_SERVER['SERVER_NAME'])) {
    $process = proc_open('wkhtmltopdf -q - -', $descriptorspec, $pipes);
  }
  else {
    $process = proc_open('sites/all/libraries/wkhtmltox/bin/wkhtmltopdf -q - -', $descriptorspec, $pipes);
  }

  // Send the HTML on stdin
  fwrite($pipes[0], $html);
  fclose($pipes[0]);
  // Read the outputs
  $pdf = stream_get_contents($pipes[1]);
  $errors = stream_get_contents($pipes[2]);
  // Close the process
  fclose($pipes[1]);
  $return_value = proc_close($process);
  // Output the results
  if ($errors) {
    watchdog('be_well_informed', "wkhtmltopdf PDF Generation Failed! " . $errors, WATCHDOG_ERROR);
    return "PDF Generation Failed!!";
  }
  else {
    header('Content-Type: application/pdf');
    header('Cache-Control: public, must-revalidate, max-age=0'); // HTTP/1.1
    header('Pragma: public');
    header('Expires: Sat, 26 Jul 1997 05:00:00 GMT'); // Date in the past
    header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');
    header('Content-Length: ' . strlen($pdf));
    echo $pdf;
  }
}

/**
 * Renders the form for use with the widget based on the supplied state information
 */
function generate_state_form() {
  if (!isset($_POST) || count($_POST) === 0) {
    drupal_json_output(array(
      'error' => TRUE,
      'message' => 'Failed to recieve any data.'
    ));
    return;
  }

  $rendered_html = theme('be_well_informed_modal_state_form');
  echo $rendered_html;
}

/*
 * Implementation of hook_user_logout
 * Remove used pdf generation variable for the logged in user and session when the user logs out.
 * */
function be_well_informed_user_logout($account) {
  global $user;
  variable_del($user->name . '_be_well_pdf_resp_' . $user->ssid);
  variable_del($user->name . '_be_well_state_info_' . $user->ssid);
}

/**
 * Implements hook_theme().
 * @see http://www.devdungeon.com/content/using-tpl-template-files-custom-drupal-7-modules
 */
function be_well_informed_theme() {
  return array(
    // Name to be called with theme(). theme('be_well_informed')
    'be_well_informed' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use my-cdx.tpl.php
      'template' => 'be-well-informed',
      'path' => drupal_get_path('module', 'be_well_informed') . '/templates'
    ),
    'be_well_informed_modal' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use be-well-informed-modal.tpl.php
      'template' => 'be-well-informed-modal',
      'path' => drupal_get_path('module', 'be_well_informed') . '/templates'
    ),
    'be_well_informed_modal_state_form' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use be-well-informed-modal.tpl.php
      'template' => 'be-well-informed-modal-state-form',
      'path' => drupal_get_path('module', 'be_well_informed') . '/templates'
    ),
    'be_well_informed_modal_state_selection' => array(
      'variables' => array(),
      'template' => 'be-well-informed-modal-state-selection',
      'path' => drupal_get_path('module', 'be_well_informed') . '/templates'
    ),
    'be_well_informed_widget_state_content' => array(
      'variables' => array(),
      'template' => 'be-well-informed-widget-state-content',
      'path' => drupal_get_path('module', 'be_well_informed') . '/templates'
    ),
    'be_well_informed_pdf' => array(
      'variables' => array(),
      'template' => 'be-well-informed-pdf',
      'path' => drupal_get_path('module', 'be_well_informed') . '/templates'
    ),
    'be_well_informed_modal_results' => array(
      'variables' => array(),
      'template' => 'be-well-informed-model-results',
      'path' => drupal_get_path('module', 'be_well_informed') . '/templates'
    ),
    'be_well_informed_xml_upload' => array(
      'template' => 'be-well-informed-xml-upload',
      'path' => drupal_get_path('module', 'be_well_informed') . '/templates'
    )
  );
}

/**
 * Implements hook_block_view().
 */
function be_well_informed_block_view($delta = '') {
  $bwi_admin = _is_admin();
  $block = array();
  if ($delta == 'be_well_informed') {
    //good idea to check user perms here
    if (user_access('access content')) {
      drupal_add_js(libraries_get_path('css-element-queries') . '/ElementQueries.min.js', [
        'scope' => 'footer',
        'preprocess' => TRUE,
        'group' => JS_LIBRARY,
        'type' => 'file',
        'cache' => TRUE,
        'requires_jquery' => TRUE
      ]);
      drupal_add_js(libraries_get_path('css-element-queries') . '/ResizeSensor.min.js', [
        'scope' => 'footer',
        'preprocess' => TRUE,
        'group' => JS_LIBRARY,
        'type' => 'file',
        'cache' => TRUE,
        'requires_jquery' => TRUE
      ]);
      drupal_add_js(drupal_get_path('module', 'datatables') . '/dataTables/media/js/jquery.dataTables.js', [
        'scope' => 'footer',
        'preprocess' => TRUE,
        'group' => JS_LIBRARY,
        'type' => 'file',
        'cache' => TRUE,
        'requires_jquery' => TRUE
      ]);
      drupal_add_js(drupal_get_path('module', 'be_well_informed') . '/js/parsley.js', [
        'scope' => 'footer',
        'preprocess' => TRUE,
        'group' => JS_LIBRARY,
        'type' => 'file',
        'cache' => TRUE,
        'requires_jquery' => TRUE
      ]);
      drupal_add_js(drupal_get_path('module', 'be_well_informed') . '/js/be_well_informed.js', [
        'scope' => 'footer',
        'preprocess' => TRUE,
        'group' => JS_DEFAULT,
        'type' => 'file',
        'cache' => TRUE,
        'requires_jquery' => TRUE
      ]);
      drupal_add_js(drupal_get_path('module', 'be_well_informed') . '/js/widget.js', [
        'scope' => 'footer',
        'preprocess' => TRUE,
        'group' => JS_DEFAULT,
        'type' => 'file',
        'cache' => TRUE,
        'requires_jquery' => TRUE
      ]);
      drupal_add_css(drupal_get_path('module', 'be_well_informed') . '/css/be_well_informed.css', [
        'preprocess' => TRUE,
        'group' => CSS_THEME
      ]);
      drupal_add_css(drupal_get_path('module', 'be_well_informed') . '/css/be_well_informed.css', [
        'preprocess' => TRUE,
        'group' => CSS_THEME
      ]);
      // Set Form Modal Template
      $modal_form_html = theme('be_well_informed_modal');
      $modal_state_selection = theme('be_well_informed_modal_state_selection');
      $widget_state_content = theme('be_well_informed_widget_state_content');
      drupal_add_js(array("be_well_informed" => ["debug_mode" => variable_get('bwi_js_debug_mode'), 'templates' => ['contaminant_form' => $modal_form_html, 'state_selection' => $modal_state_selection, 'widget_state_content' => $widget_state_content]]), 'setting');

      $block['subject'] = t('Be Well Informed');
      $block['content'] = theme('be_well_informed', ['bwi_admin' => $bwi_admin]);
    }
  }
  return $block;
}

/**
 * Take users POST input and handoff to sample data or BE WELL INFORMED service
 */
function be_well_informed_form_submission() {
  if (!isset($_POST) || count($_POST) === 0) {
    drupal_json_output(array(
      'error' => TRUE,
      'message' => 'Failed to recieve any data.'
    ));
    return;
  }

  $datatable_formatted_response = array();
  module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
  if (feature_toggle_get_status('be_well_informed_sample_data')) {
    $be_well_informed_response = sample_be_well_informed_response();
    $datatable_formatted_response['data'] = be_well_informed_datatable_response($be_well_informed_response);
    $datatable_formatted_response['error'] = FALSE;
  }
  else {
    $endpoint = "https://nodewebdev.epacdxnode.net/DWIService/dwievaluation";
    $headers = array('Content-Type' => 'application/json');
    $response = drupal_http_request($endpoint, [
      "headers" => $headers,
      "method" => "POST",
      'timeout' => "10",
      'data' => json_encode($_POST)
    ]);
    $datatable_formatted_response['DWI_request'] = json_encode($_POST);
    if ($response->code !== "200") {
      $datatable_formatted_response['error'] = TRUE;
    }
    else {
      $response->data = '{"ResultEvaluations": {"As": {"Symbol": "As", "ContaminantFullName": "Arsenic", "UserContaminatValue": "0.3 mg/L", "MaximumContaminantLevel": "0.010 mg/L", "GuidelineIcon": "Images/water/false4.png", "GuidelineColor": "font-red", "GuidelineText": "The value entered exceeds the drinking water standard", "InterpretationMessages": "\u0026lt;b\u0026gt;\r\n                Does my well water meet the \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://water.epa.gov/drink/contaminants/basicinformation/arsenic.cfm\u0026quot;\u0026gt; drinking water standard for arsenic\u0026lt;/a\u0026gt;?\r\n              \u0026lt;/b\u0026gt;  No, your water does not meet federal and state drinking water standards as it contains more than 0.010 mg/L of arsenic.", "HealthMessages": "\u0026lt;b\u0026gt;Can consuming water containing arsenic affect my health?\u0026lt;/b\u0026gt;  Consuming water containing more than 0.010 mg/L of arsenic is associated with an increased risk of cancer of the skin, bladder, lungs, kidneys, nasal passages, liver, or prostate as well as diseases of the nerves, lungs, heart, and immune and endocrine (hormonal) systems.  Your individual health risk depends on the amount of arsenic in your water, how much of the water you drink each day, and the number of years you drink the water.  To reduce your exposure to arsenic in your well water, treat the water that you use for drinking and cooking to a level less than 0.010 mg/L.  You can continue to use your water for washing food and dishes, brushing your teeth, bathing, showering, and for other uses.", "TreatmentMessages": "\u0026lt;b\u0026gt;How can I reduce the level of arsenic in my water?\u0026lt;/b\u0026gt;  Install one of the following water treatment systems to reduce the level of arsenic in your water.  Your test results show that your water contains less than 0.1 mg/L of iron and manganese, so installing a treatment system for iron and manganese is not needed.\r\n              \u0026lt;br /\u0026gt;\u0026lt;ol\u0026gt;\u0026lt;li\u0026gt;\r\n                  An NSF/ANSI Standard 53 certified whole house anion exchange water treatment system, followed by an acid neutralizer to prevent corrosion of your home’s plumbing from the anion exchange system.  To ensure the best possible reduction of arsenic, request an “arsenic speciation test” from your laboratory.  If you have any arsenic III (arsenite), install an NSF/ANSI Standard 42 certified whole house oxidizing pretreatment filter system that uses manganese dioxide as the oxidizing agent to convert arsenic III to arsenic V (arsenate).\r\n                \u0026lt;/li\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;b\u0026gt;OR\u0026lt;/b\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;li\u0026gt;\r\n                  An NSF/ANSI Standard 53 certified point-of-use (POU) arsenic adsorption media filter system at your kitchen sink designed to treat only the water that you consume. A whole house adsorption system is not recommended, because of the increased frequency of maintenance due to your high arsenic level.\r\n                \u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;ul style=\u0026quot;list-style-type:none\u0026quot;\u0026gt;\u0026lt;li\u0026gt;\r\n                  More information about treatment for arsenic can be found in \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://www.mass.gov/eea/agencies/massdep/water/drinking/lead-and-other-contaminants-in-drinking-water.html#1 \u0026quot;\u0026gt;MassDEP\u0026#39;s Arsenic Information web page\u0026lt;/a\u0026gt;.\r\n                \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;br /\u0026gt;", "StateNode": ""}, "Cl": {"Symbol": "Cl", "ContaminantFullName": "Chloride", "UserContaminatValue": "", "MaximumContaminantLevel": "250 mg/L", "GuidelineIcon": "", "GuidelineColor": "", "GuidelineText": "", "InterpretationMessages": "", "HealthMessages": "", "TreatmentMessages": "", "StateNode": ""}, "Cu": {"Symbol": "Cu", "ContaminantFullName": "Copper", "UserContaminatValue": "", "MaximumContaminantLevel": "1.3 mg/L", "GuidelineIcon": "", "GuidelineColor": "", "GuidelineText": "", "InterpretationMessages": "", "HealthMessages": "", "TreatmentMessages": "", "StateNode": ""}, "CuSt": {"Symbol": "CuSt", "ContaminantFullName": "Copper Stagnant", "UserContaminatValue": "", "MaximumContaminantLevel": "1.3 mg/L", "GuidelineIcon": "", "GuidelineColor": "", "GuidelineText": "", "InterpretationMessages": "", "HealthMessages": "", "TreatmentMessages": "", "StateNode": ""}, "Fl": {"Symbol": "Fl", "ContaminantFullName": "Fluoride", "UserContaminatValue": "", "MaximumContaminantLevel": "4.0 mg/L", "GuidelineIcon": "", "GuidelineColor": "", "GuidelineText": "", "InterpretationMessages": "", "HealthMessages": "", "TreatmentMessages": "", "StateNode": ""}, "Har": {"Symbol": "Har", "ContaminantFullName": "Hardness", "UserContaminatValue": "", "MaximumContaminantLevel": "-", "GuidelineIcon": "", "GuidelineColor": "", "GuidelineText": "", "InterpretationMessages": "", "HealthMessages": "", "TreatmentMessages": "", "StateNode": ""}, "Fe": {"Symbol": "Fe", "ContaminantFullName": "Iron", "UserContaminatValue": "0.05 mg/L", "MaximumContaminantLevel": "0.3 mg/L", "GuidelineIcon": "Images/water/check4.png", "GuidelineColor": "font-green", "GuidelineText": "The value entered meets the drinking water guideline", "InterpretationMessages": "", "HealthMessages": "", "TreatmentMessages": "", "StateNode": ""}, "Pb": {"Symbol": "Pb", "ContaminantFullName": "Lead", "UserContaminatValue": "", "MaximumContaminantLevel": "0.015 mg/L", "GuidelineIcon": "", "GuidelineColor": "", "GuidelineText": "", "InterpretationMessages": "", "HealthMessages": "", "TreatmentMessages": "", "StateNode": ""},
    "Dog": {
      "Symbol": "Dog",
      "ContaminantFullName": "Stinky Dog",
      "UserContaminatValue": "2.0 mg/L",
      "MaximumContaminantLevel": "1.0 mg/L",
      "GuidelineIcon": "Images/water/false4.png",
      "GuidelineColor": "font-red",
      "GuidelineText": "The value entered exceeds the drinking water standard",
      "InterpretationMessages": "You should never have stinky dog in your water",
      "HealthMessages": "Can consuming water containing dog affect my health? I don\'t know, ask Koreans. It might be a choking hazard",
      "TreatmentMessages": "Use Dog treats to lure live dogs out of water, otherwise yuck. <img src=\'https://fourleggedguru.com/wp-content/uploads/2015/12/Portuguese-Water-Dog-facts.jpg\'/>",
      "StateNode": ""
    }
  }, "InteractivePrompts": [], "AdditionalContaminantRequests": [], "TreatmentSteps": {"2": {"Order": "2", "OrInstructions": [{"SystemType": "House", "Recommendation": "Whole House Anion Exchange Water Treatment System followed by an Acid Neutralizer"}]}, "5": {"Order": "5", "OrInstructions": [{"SystemType": "Water", "Recommendation": "Point-of-Use (POU) Arsenic Adsorption Media Filter System"}]}}}';
      /*
       * With the current strategy of having a unified results page for both the
       * pdf and the modal, the response has to diverge.
       *
       * If there are interactive prompts requiring more information to be sent
       * to the service we return a JSON response.
       *
       * If there is no additional questions from the service (the response is
       * complete), we returned composed HTML to the request to be shown to the
       * client.
       *
       */

      $state_info = be_well_informed_get_state_information($_POST['StateCode']);
      $formatted_data = be_well_informed_datatable_response($response->data);

      /*Use username and session ID to save be well response data for pdf generation. This data will be removed on user
      logout, implemented in hook_user_logout in be_well_informed.module */
      global $user;
      variable_set($user->name . '_be_well_pdf_resp_' . $user->ssid, json_decode(json_encode($formatted_data), true));
      variable_set($user->name . '_be_well_state_info_' . $user->ssid, json_decode(json_encode($state_info), true));

      if (count($formatted_data['InteractivePrompts']) == 0 && count($formatted_data['AdditionalContaminantRequests']) == 0) {
        $rendered_html = theme('be_well_informed_modal_results', ['state_info' => $state_info, 'state_code' => $_POST['state_code']]);
        drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
        print($rendered_html);
        exit;
      }
      $datatable_formatted_response['data'] = $formatted_data;
      $datatable_formatted_response['error'] = FALSE;
    }
  }

  drupal_json_output($datatable_formatted_response);
}

function be_well_informed_get_state_information($state_code = NULL) {
  if (!isset($_POST) || count($_POST) === 0 || !$state_code) {
    drupal_json_output(array(
      'error' => TRUE,
      'message' => 'Failed to recieve any data.'
    ));
    return;
  }

  //drupal_json_output($sample);
  if (!$state_code) {
    $path = drupal_get_path('module', 'be_well_informed') . '/sample_data/partner' . $_POST['state'] . '.xml';
    $state_info = file_get_contents($path);
    drupal_add_http_header('Content-Type', 'text/xml');
    echo $state_info;
  }
  else {
    $path = drupal_get_path('module', 'be_well_informed') . '/sample_data/partner' . $state_code . '.xml';
    $state_info = file_get_contents($path);
    $xml_array = xmlstr_to_array($state_info, 'domnode_clean', 'bwi_domnode_to_array');
    return $xml_array;
  }
}

function be_well_informed_get_state_flowchart($state_code) {
  $path = drupal_get_path('module', 'be_well_informed') . '/sample_data/flowcharts' . $state_code . '.xml';
  $state_info = file_get_contents($path);
  $doc = new DOMDocument();
  $doc->loadXML($state_info);
  $root = $doc->documentElement;
  return domnode_clean($root);
}

/**
 * Take BE WELL INFORMED response and format for Result Details and Result Summary datatables
 * @param $be_well_response_json
 * @return array
 */
function be_well_informed_datatable_response($be_well_response_json) {
  $be_well_response = json_decode($be_well_response_json);
  $datatable_result_summary_json = [];
  $datatable_result_details_json = [];

  foreach ($be_well_response->ResultEvaluations as $water_data) {

    $user_entry = (empty($water_data->UserContaminatValue)) ? "<span class='bwi-hide-row'>None</span>" : $water_data->UserContaminatValue;
    $guide_text = (empty($water_data->GuidelineText) && empty($water_data->UserContaminatValue)) ? "A value was not entered." : $water_data->GuidelineText;

    $datatable_row = [];
    $datatable_row[] = processGuidelineIcon($water_data->GuidelineIcon);
    $show_symbol_name = $water_data->Symbol;  // Hide BAC from Total Coliform
    if ($show_symbol_name == 'Bac') {
      $show_symbol_name = '';
    }
    else {
      $show_symbol_name = ' (' . $water_data->Symbol . ')';
    }
    $datatable_row[] = $water_data->ContaminantFullName . $show_symbol_name;
    $datatable_row[] = $user_entry;
    $datatable_row[] = $water_data->MaximumContaminantLevel;
    $datatable_row[] = $guide_text;
    $datatable_result_summary_json[] = $datatable_row;

    // Capture details for each summary row, even if empty
    $datatable_result_details_json[] = [
      'data_array' => [
        html_entity_decode($water_data->InterpretationMessages),
        html_entity_decode($water_data->HealthMessages),
        html_entity_decode($water_data->TreatmentMessages)
      ],
      'result' => $water_data->GuidelineColor,
    ];
  }

  $be_well_response = (Array)$be_well_response;
  $be_well_response['result_summary'] = $datatable_result_summary_json;
  $be_well_response['result_details'] = $datatable_result_details_json;
  $be_well_response['state_info'] = $datatable_result_details_json;

  return $be_well_response;
}

function sample_be_well_informed_response() {
  $response = [
    'ResultEvaluations' =>
      [
        [
          'ContaminantFullName' => 'Arsenic',
          'Symbol' => 'As',
          'GuidelineColor' => 'font-red',
          'UserContaminatValue' => '0.01 mg/L',
          'MaximumContaminantLevel' => '0.01 mg/L',
          'GuidelineText' => 'The value entered is close to exceeding the drinking water standard',
          'InterpretationMessages' => '<span>Does my well water meet the drinking water standard for fluoride?</span> No, your water does not meet federal and state drinking water standards as it contains more than 4.0 mg/L of fluoride.',
          'HealthMessages' => '<span>Can consuming water containing fluoride affect my health?</span> Consuming water containing more than 4.0 mg/L of fluoride can cause bone disease, which can include pain and tenderness of the bones and irregular bone deposits that can cause arthritis and crippling when occurring at joints (skeletal fluorosis).

Consuming water containing more than 2.0 mg/L of fluoride can cause small ‘white spots’ on children’s teeth (mottled enamel), or in extreme cases, brown staining or pitting of teeth that are still developing below the gums (dental fluorosis).

To reduce your exposure to fluoride in your well water, treat the water that you use for drinking and cooking to a level less than 2.0 mg/L. If treatment is not feasible, children under nine years old should be provided with an alternative source of drinking water that contains less than 2.0 mg/L of fluoride.

Consuming water containing an optimal level of fluoride helps protect against tooth decay. The U.S. Department of Health and Human Services’ recommended optimal range for fluoride in drinking water is 0.6 - 0.8 mg/L. You should talk with your dentist and doctor about the level of fluoride in your water and how you can reduce your and your family’s total fluoride exposure. Click here for more information from the U.S. Centers for Disease Control and Prevention about private well water and fluoride.',
          'TreatmentMessages' => '<span>How can I reduce the level of fluoride in my water?</span> Install one of the following point-of-use (POU) water treatment systems at your kitchen sink to reduce the level of fluoride in the water that you consume:

An NSF/ANSI Standard 61 certified activated alumina filter system.

OR

An NSF/ANSI Standard 58 certified reverse osmosis (RO) system.

More information about treatment for fluoride can be found in NHDES’ Fact Sheet.',

        ],
      ]
  ];
  return json_encode($response);
}

/**
 * Returns the correct image for a water level
 * @param $guideline_color
 * @return string
 */
function processGuidelineIcon($guideline_icon) {
  $image_path = drupal_get_path('module', 'be_well_informed') . '/images';

  switch ($guideline_icon) {
    case "Images/water/check4.png":
      $return_html = "<img src='" . $image_path . "/check.png' alt='Meets the drinking water limit' title='Meets the drinking water limit' />";
      break;
    case "Images/water/exclamation.png":
      $return_html = "<img src='" . $image_path . "/exclamation.png' alt='Close to the drinking water limit' title='Close to the drinking water limit' />";
      break;
    case "Images/water/orange.png":
      $return_html = "<a href='http://des.nh.gov/organization/commissioner/pip/factsheets/dwgb/documents/dwgb-3-12.pdf' title='See NHDES Fact Sheet WD-DWGB-3-12.  Opens in new window.' target='_blank'><img src='" . $image_path . "/orange.png' alt='Consult NHDES Fact Sheet WD-DWGB-3-12' /></a>";
      break;
    case "Images/water/false4.png":
      $return_html = "<img src='" . $image_path . "/false.png' alt='Above the drinking water limit' title='Above the drinking water limit' />";
      break;
    case "Images/water/blank.png":
      $return_html = "<img src='" . $image_path . "/blank.png' alt='Refer to message in About Your Well Water and check related values' title='Refer to message in About Your Well Water and check related values' />";;
      break;
    default:
      $return_html = "<img src='" . $image_path . "/circle.png' alt='No Input Entered' />";
  }
  return $return_html;
}

function template_preprocess_be_well_informed_modal_state_form(&$variables, $hook) {
  $variables['state_info'] = be_well_informed_get_state_information($_POST['state_code']);
  $variables['state_code'] = $_POST['state_code'];
  _be_well_informed_template_variables($variables, $hook);

}

/**
 * Implements template_preprocess_hook for be-well-informed.tpl.php.
 */
function template_preprocess_be_well_informed(&$variables, $hook) {
  $variables['states'] = ['Massachusetts', 'New Hampshire'];
  $variables['state_code'] = $_POST['state_code'];
}

/**
 * Implements template_preprocess_hook for be-well-informed-modal.tpl.php.
 */
function template_preprocess_be_well_informed_modal(&$variables, $hook) {

  $variables['unit_types'] = [
    'mg/L',
    'μg/L',
    'ppm',
    'ppb',
    'gpg',
    'units',
    'CFU/100 mL',
    'MPN/100 mL',
    'mpn_100_ml'
  ];

  $variables['contaminants'] = [];

  $variables['Routine Water Analysis'] = [
    [
      'name' => 'Arsenic',
      'machine_name' => 'As',
      'symbol' => 'As',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'μg/L', 'ppm', 'ppb']
    ],
    [
      'name' => 'Chloride',
      'machine_name' => 'Cl',
      'symbol' => 'Cl',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'μg/L', 'ppm', 'ppb']
    ],
    [
      'name' => 'Copper',
      'machine_name' => 'Cu',
      'symbol' => 'Cu',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Copper, Stagnant',
      'machine_name' => 'CuSt',
      'symbol' => 'Cu',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Fluoride',
      'machine_name' => 'Fl',
      'symbol' => 'F',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Hardness as CaCO3',
      'machine_name' => 'Har',
      'symbol' => '',
      'symbol_text' => '',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm', 'gpg']
    ],
    [
      'name' => 'Iron',
      'machine_name' => 'Fe',
      'symbol' => 'Fe',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Lead',
      'machine_name' => 'Pb',
      'symbol' => 'Pb',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Lead, Stagnant',
      'machine_name' => 'PbSt',
      'symbol' => 'Pb',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Manganese',
      'machine_name' => 'Mn',
      'symbol' => 'Mn',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Nitrate-N',
      'machine_name' => 'NO3',
      'symbol' => '',
      'symbol_text' => '',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Nitrite-N',
      'machine_name' => 'NO2',
      'symbol' => '',
      'symbol_text' => '',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'pH',
      'machine_name' => 'pH',
      'symbol' => '',
      'default_unit_type' => 'unit',
      'validation' => [],
      'unit_types' => ['units']
    ],
    [
      'name' => 'Sodium',
      'machine_name' => 'Na',
      'symbol' => 'Na',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
  ];

  $variables['contaminants']['Bacteria / Microbiology'] = [
    [
      'name' => 'Total Coliform',
      'machine_name' => 'Bac',
      'symbol' => 'Bac',
      'default_unit_type' => 'CFU/100 mL',
      'validation' => [],
      'unit_types' => ['CFU/100 mL', 'MPN/100 mL'],
      'radio_name' => 'Bac',
    ],
    [
      'name' => 'E. Coli',
      'machine_name' => 'Ecoli',
      'symbol' => 'Ecoli',
      'default_unit_type' => 'CFU/100 mL',
      'validation' => [],
      'unit_types' => ['CFU/100 mL', 'MPN/100 mL'],
      'radio_name' => 'Ecoli',
    ],
  ];

  $variables['contaminants']['Radionuclides'] = [
    [
      'name' => 'Radon',
      'machine_name' => 'Rn',
      'symbol' => 'Rn',
      'default_unit_type' => 'pCi/L',
      'validation' => [],
      'unit_types' => ['pCi/L']
    ],
    [
      'name' => 'Uranium',
      'machine_name' => 'Ur',
      'symbol' => 'U',
      'default_unit_type' => 'μg/L',
      'validation' => [],
      'unit_types' => ['pCi/L', 'μg/L']
    ],
    [
      'name' => 'Gross Alpha',
      'machine_name' => 'AGA',
      'symbol' => '',
      'default_unit_type' => 'pCi/L',
      'validation' => [],
      'unit_types' => ['pCi/L']
    ],
  ];

  $variables['contaminants']['treatments'] = [
    [
      'icon' => '',
      'boxes' => [
        [
          'icon' => 'home',
          'action' => 'Whole House Oxidizing Filter System'
        ],
        [
          'icon' => 'home',
          'action' => 'Whole House Cation Exchange Water Softener'
        ],
        [
          'icon' => 'home',
          'action' => 'Whole House Anion Exchange Water Treatment System followed by an Acid Neutralizer'],
        [
          'icon' => 'facet',
          'action' => 'Point-of-Use (POU) Arsenic Adsorption Media Filter System'
        ]
      ]
    ],
    [
      'icon' => '',
      'boxes' => [
        [
          'icon' => 'home',
          'action' => 'Whole House Anion Exchange Water Treatment System followed by an Acid Neutralizer'],
        [
          'icon' => 'facet',
          'action' => 'Point-of-Use (POU) Arsenic Adsorption Media Filter System'
        ],
      ]
    ],
    [
      'text' => 'Depending on the radon levels in the air, treatment of water may be advisable between 2,000 pCi/L and 10,000 pCi/L. Above 10,000 pCi/L, treatment is recommended regardless of radon level in air.',
      'icon' => 'home',
      'boxes' => [
        [
          'action' => 'Whole House Aeration Device'
        ],
        [
          'action' => 'Whole House Granular Activated Carbon (GAC) Filter'
        ],
      ]
    ],
    [
      'icon' => 'home',
      'boxes' => [
        [
          'icon' => '',
          'action' => 'Whole House Acid Neutralizer System'
        ],
      ]
    ],
    [
      'icon' => 'facet',
      'boxes' => [
        [
          'icon' => '',
          'action' => 'Point-of-Use (POU) Arsenic Adsorption Media Filter System'
        ],
        [
          'icon' => '',
          'action' => 'Point-of-Use (POU) Reverse Osmosis (RO) System'
        ],
        [
          'icon' => '',
          'action' => 'Point-of-Use (POU) Activated Alumina Filter System'
        ],
      ]
    ],
  ];

  // some logic to help make it simpler to read
  foreach ($variables['water_components'] as $key => $var) {
    $variables['water_components'][$key]['symbol_text'] = ($var['symbol_text']) ? $var['symbol_text'] : $var['symbol'];
  }

  $exposed_variables = [
    'treatments' => $variables['treatments'],
    'contaminants' => $variables['contaminants'],
    'unit_types' => $variables['unit_types'],
  ];

  drupal_add_js(array("be_well_informed" => ["variables" => $exposed_variables]), 'setting');

}

// [yourModuleName|yourThemeName]_preprocess_[themeFunctionName]
function be_well_informed_preprocess(&$variables, $hook) {
  if (stripos($hook, 'be_well_informed_') !== FALSE) {
    result_preprocess_be_well_informed($variables, $hook);
  }
}

function process_state_xml(&$variables) {
  $variables = $variables;
}

/**
 * Implements hook_backup_migrate_filters().
 */
function _be_well_informed_template_variables(&$variables, $hook) {
  $state_flowchart = be_well_informed_get_state_flowchart($variables['state_code']);

  $variables['state_flowchart'] = ($variables['state_flowchart']) ? $variables['state_flowchart'] : [];
  // Get section information
  foreach($state_flowchart->getElementsByTagName('Sections') as $item) {
    $variables['state_flowchart']['Sections'][$item->childNodes[0]->nodeName] = [];
    foreach($item->childNodes as $section) {
      $variables['state_flowchart']['Sections'][$section->nodeName] = [];
      foreach($section->childNodes as $property) {
        $variables['state_flowchart']['Sections'][$section->nodeName][$property->nodeName] = [$property->nodeValue];
      }
    }
  }


  foreach($state_flowchart->getElementsByTagName('Contaminants')[0]->childNodes as $contaminant) {
    $variables['state_flowchart']['Contaminants'][$contaminant->getAttribute('Section')][$contaminant->getAttribute('Text')] = [
      'name' => $contaminant->getAttribute('Text'),
      'machine_name' => $contaminant->getAttribute('Value'),
      'symbol' => $contaminant->getAttribute('Value'),
      'default_unit_type' => end(explode(' ', $contaminant->getAttribute('MCL'))),
      'unit_types' => [end(explode(' ', $contaminant->getAttribute('MCL')))]
    ];
  }

  return $variables;
}

function result_preprocess_be_well_informed(&$variables, $hook) {



  $variables['unit_types'] = [
    'mg/L',
    'μg/L',
    'ppm',
    'ppb',
    'gpg',
    'units',
    'CFU/100 mL',
    'MPN/100 mL',
    'mpn_100_ml'
  ];

  $variables['water_components'] = [
    [
      'name' => 'Arsenic',
      'machine_name' => 'As',
      'symbol' => 'As',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'μg/L', 'ppm', 'ppb']
    ],
    [
      'name' => 'Chloride',
      'machine_name' => 'Cl',
      'symbol' => 'Cl',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'μg/L', 'ppm', 'ppb']
    ],
    [
      'name' => 'Copper',
      'machine_name' => 'Cu',
      'symbol' => 'Cu',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Copper, Stagnant',
      'machine_name' => 'CuSt',
      'symbol' => 'Cu',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Fluoride',
      'machine_name' => 'Fl',
      'symbol' => 'F',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Hardness as CaCO3',
      'machine_name' => 'Har',
      'symbol' => '',
      'symbol_text' => '',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm', 'gpg']
    ],
    [
      'name' => 'Iron',
      'machine_name' => 'Fe',
      'symbol' => 'Fe',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Lead',
      'machine_name' => 'Pb',
      'symbol' => 'Pb',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Lead, Stagnant',
      'machine_name' => 'PbSt',
      'symbol' => 'Pb',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Manganese',
      'machine_name' => 'Mn',
      'symbol' => 'Mn',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Nitrate-N',
      'machine_name' => 'NO3',
      'symbol' => '',
      'symbol_text' => '',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'Nitrite-N',
      'machine_name' => 'NO2',
      'symbol' => '',
      'symbol_text' => '',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
    [
      'name' => 'pH',
      'machine_name' => 'pH',
      'symbol' => '',
      'default_unit_type' => 'unit',
      'validation' => [],
      'unit_types' => ['units']
    ],
    [
      'name' => 'Sodium',
      'machine_name' => 'Na',
      'symbol' => 'Na',
      'default_unit_type' => 'mg/L',
      'validation' => [],
      'unit_types' => ['mg/L', 'ppm']
    ],
  ];

  $variables['microbiology'] = [
    [
      'name' => 'Total Coliform',
      'machine_name' => 'Bac',
      'symbol' => 'Bac',
      'default_unit_type' => 'CFU/100 mL',
      'validation' => [],
      'unit_types' => ['CFU/100 mL', 'MPN/100 mL'],
      'radio_name' => 'Bac',
    ],
    [
      'name' => 'E. Coli',
      'machine_name' => 'Ecoli',
      'symbol' => 'Ecoli',
      'default_unit_type' => 'CFU/100 mL',
      'validation' => [],
      'unit_types' => ['CFU/100 mL', 'MPN/100 mL'],
      'radio_name' => 'Ecoli',
    ],
  ];

  $variables['radionuclides'] = [
    [
      'name' => 'Radon',
      'machine_name' => 'Rn',
      'symbol' => 'Rn',
      'default_unit_type' => 'pCi/L',
      'validation' => [],
      'unit_types' => ['pCi/L']
    ],
    [
      'name' => 'Uranium',
      'machine_name' => 'Ur',
      'symbol' => 'U',
      'default_unit_type' => 'μg/L',
      'validation' => [],
      'unit_types' => ['pCi/L', 'μg/L']
    ],
    [
      'name' => 'Gross Alpha',
      'machine_name' => 'AGA',
      'symbol' => '',
      'default_unit_type' => 'pCi/L',
      'validation' => [],
      'unit_types' => ['pCi/L']
    ],
  ];

  $variables['treatments'] = [
    [
      'icon' => '',
      'boxes' => [
        [
          'icon' => 'home',
          'action' => 'Whole House Anion Exchange Water Treatment System followed by an Acid Neutralizer'],
        [
          'icon' => 'facet',
          'action' => 'Point-of-Use (POU) Arsenic Adsorption Media Filter System'
        ],
      ]
    ],
    [
      'icon' => 'home',
      'boxes' => [
        [
          'icon' => '',
          'action' => 'Whole House Oxidizing Filter System'
        ],
        [
          'icon' => '',
          'action' => 'Whole House Cation Exchange Water Softener'
        ],
      ]
    ],
    [
      'icon' => '',
      'boxes' => [
        [
          'icon' => 'home',
          'action' => 'Whole House Anion Exchange Water Treatment System followed by an Acid Neutralizer'
        ],
        [
          'icon' => 'facet',
          'action' => 'Point-of-Use (POU) Arsenic Adsorption Media Filter System'
        ],
      ]
    ],
    [
      'text' => 'Depending on the radon levels in the air, treatment of water may be advisable between 2,000 pCi/L and 10,000 pCi/L. Above 10,000 pCi/L, treatment is recommended regardless of radon level in air.',
      'icon' => 'home',
      'boxes' => [
        [
          'action' => 'Whole House Aeration Device'
        ],
        [
          'action' => 'Whole House Granular Activated Carbon (GAC) Filter'
        ],
      ]
    ],
    [
      'icon' => 'home',
      'boxes' => [
        [
          'icon' => '',
          'action' => 'Whole House Acid Neutralizer System'
        ],
      ]
    ],
    [
      'icon' => 'facet',
      'boxes' => [
        [
          'icon' => '',
          'action' => 'Point-of-Use (POU) Arsenic Adsorption Media Filter System'
        ],
        [
          'icon' => '',
          'action' => 'Point-of-Use (POU) Reverse Osmosis (RO) System'
        ],
        [
          'icon' => '',
          'action' => 'Point-of-Use (POU) Activated Alumina Filter System'
        ],
      ]
    ],
  ];
  // some logic to help make it simpler to read
  foreach ($variables['water_components'] as $key => $var) {
    $variables['water_components'][$key]['symbol_text'] = ($var['symbol_text']) ? $var['symbol_text'] : $var['symbol'];
  }

  if (in_array($hook, ['be_well_informed_modal_results', 'be_well_informed_pdf'])) {
    global $user;
    $variables['response_json_data_pdf'] = variable_get($user->name . '_be_well_pdf_resp_' . $user->ssid);
    $variables['state_info'] = variable_get($user->name . '_be_well_state_info_' . $user->ssid);
  }

  /*Setup a pre-process variable for list of contaminants shown in pdf page under "Water Treatment Systems That Remove $contaminants_title"  */
  if (!empty($variables['response_json_data_pdf']['TreatmentSteps'])) {
    $contaminants = array();
    $excluded = array('NO2', 'Bac', 'Ecoli');
    foreach ($variables['response_json_data_pdf']['ResultEvaluations'] as $key => $val) {
      if (!in_array($key, $excluded) && ($val['GuidelineColor'] == 'font-red' || $val['TreatmentMessages']))
        array_push($contaminants, $val['ContaminantFullName']);
    }
    if (count($contaminants) > 1) {
      $last = array_pop($contaminants);
      $contaminants_title = join(', ', $contaminants);
      $contaminants_title .= ' and ' . $last;
    }
    else {
      $contaminants_title = array_pop($contaminants);
    }

    // Special Rules
    $treatment = $variables['response_json_data_pdf']['TreatmentSteps'];
    // Remove "Arsenic Adsorption" if there is POU RO present
    if ($treatment[5]) {
      // and tier 5 has "Point-of-Use (POU) Arsenic Adsorption Media Filter System"
      // and tier 5 has "Point-of-Use (POU) Reverse Osmosis (RO) System"
      foreach ($treatment[5]['OrInstructions'] as $i => $instruction) {
        if ($instruction['Recommendation'] == "Point-of-Use (POU) Arsenic Adsorption Media Filter System") {
          $tier_5a = $i;
        }
        if ($instruction['Recommendation'] == "Point-of-Use (POU) Reverse Osmosis (RO) System") {
          $tier_5b = $i;
        }
      }

      if ($tier_5a !== null && $tier_5b !== null) {
        // remove it from tier 5
        unset($treatment[5]['OrInstructions'][$tier_5a]);
      }
    }
    // Shift Arsenic treatment to teir 2 if needed
    // # determine if there is no values in tier 3 & 4
    if (!($treatment[3] || $treatment[4]) && $treatment[2] && $treatment[5]) {

      // # if tier 2 is only "Whole House Anion Exchange Water Treatment System followed by an Acid Neutralizer"
      if (!empty($treatment[2]['OrInstructions']) && !empty($treatment[2]['OrInstructions'][0]) && $treatment[2]['OrInstructions'][0]['Recommendation'] == "Whole House Anion Exchange Water Treatment System followed by an Acid Neutralizer") {

        // and tier 5 has "Point-of-Use (POU) Arsenic Adsorption Media Filter System"
        foreach ($treatment[5]['OrInstructions'] as $i => $instruction) {
          if ($instruction['Recommendation'] == "Point-of-Use (POU) Arsenic Adsorption Media Filter System") {
            $index = $i;
            break;
          }
        }

        if ($index !== null) {
          // copy it to tier 2
          $treatment[2]['OrInstructions'][] = $treatment[5]['OrInstructions'][$index];
          // remove it from tier 5
          unset($treatment[5]['OrInstructions'][$index]);
          // if it is empty after remoing the step, update the treatment steps
          if (empty($treatment[5]['OrInstructions'])) {
            unset($treatment[5]);
          }
        }
      }
    }
    $variables['response_json_data_pdf']['TreatmentSteps'] = $treatment;
  }

  $variables['system-type'] = [];
  $variables['contaminants_title'] = $contaminants_title;

  $exposed_variables = [
    'treatments' => $variables['treatments'],
    'radionuclides' => $variables['radionuclides'],
    'microbiology' => $variables['microbiology'],
    'water_components' => $variables['water_components'],
    'unit_types' => $variables['unit_types'],
    'response_json_data_pdf' => $variables['response_json_data_pdf'],
    'contaminants_title' => $variables['contaminants_title'],
  ];

}

/**
 * Implements template_preprocess_hook for be-well-informed-pdf.tpl.php.
 */
function template_preprocess_be_well_informed_pdf(&$variables, $hook) {

  $variables['bwi_pdf_debug'] = variable_get('bwi_pdf_debug');
  $variables['doc_root'] = ($variables['bwi_pdf_debug']) ? '' : $_SERVER["DOCUMENT_ROOT"];

  result_preprocess_be_well_informed($variables, $hook);

  //drupal_add_js(array("be_well_informed" => ["variables" => $exposed_variables]), 'setting');

}

function bwi_domnode_to_array($node) {
  $output = array();
  switch ($node->nodeType) {
    case XML_CDATA_SECTION_NODE:
    case XML_TEXT_NODE:
      $output = trim($node->textContent);
      break;
    case XML_ELEMENT_NODE:
      $is_array = false;
      if ($node->childNodes->length > 1 && $node->childNodes->item(0)->tagName == $node->childNodes->item(1)->tagName) {
        $is_array = true;
      }
      for ($i = 0, $m = $node->childNodes->length; $i < $m; $i++) {
        $child = $node->childNodes->item($i);
        $v = bwi_domnode_to_array($child);
        if ($is_array) {
          $output[] = $v;
        }
        else if (isset($child->tagName)) {
          $t = $child->tagName;
          if (!isset($output[$t])) {
            $output[$t] = array();
          }
          if (is_array($v)) {
            $output[$t] = array_merge($output[$t], $v);
          }
          else {
            $output[$t][] = $v;
          }
        }
        else if ($v || $v === '0') {
          $output = (string)$v;
        }
      }
      if ($node->attributes->length && !is_array($output)) { //Has attributes but isn't an array
        $output = array('@content' => $output); //Change output into an array.
      }
      if (is_array($output)) {
        if ($node->attributes->length) {
          $a = array();
          foreach ($node->attributes as $attrName => $attrNode) {
            $a[$attrName] = (string)$attrNode->value;
          }
          $output['@attributes'] = $a;
        }
        foreach ($output as $t => $v) {
          if (is_array($v) && count($v) == 1 && $t != '@attributes') {
            $output[$t] = $v[0];
          }
        }
      }
      break;
  }
  return $output;
}

function generate_contaminants_section($title, $section) {

  $html = [
    "<div class=\"usa-width-one-whole\">",
    "<h3>$title</h3>",
    "<div class=\"usa-width-one-half\">"
    ];

  $count = count($section);
  for ($i=0; $i < $count; $i++) {
    $machine_name = $section[$i]['machine_name'];
    $name = $section[$i]['name'];
    $symbol_text = ($section[$i]['symbol_text'])? ' <span class="symbol">(' . $section[$i]['symbol_text'] . ')</span>' : "";
    $units = [];

    foreach ($section[$i]['unit_types'] as $ut) {
      $selected = ($section[$i]['default_unit_type'] == $ut)? "selected" : "";
      $units[] = "<option value=\"$ut\" $selected >$ut</option>";
    }

    if($i >= $count/2) {
      $html[] = "</div><div class=\"usa-width-one-half\">";
    }

    $html += [
      "<div class=\"row section\">",
      "<input type=\"hidden\" name=\"RoutineContaminants[$machine_name][Symbol]\" value=\"$machine_name\">",
      "<input type=\"hidden\" name=\"RoutineContaminants[$machine_name][Name]\" value=\"$name\">",
      "<label class=\"column one-third\" for=\"txt[$machine_name][Value]\">$name $symbol_text</label>",
      "<input class=\"column one-third\" name=\"RoutineContaminants[$machine_name][Value]\" type=\"number\" step=\"0.001\" id=\"txt$machine_name\" >",
      "<select class=\"column one-third\" name=\"RoutineContaminants[$machine_name][Unit]\" id=\"ddl$machine_name\">",
      implode('', $units),
      "</select>"
    ];
  }

/*
  <div class="row section">
    <input type="hidden"
           name="RoutineContaminants[<?php echo $wc['machine_name'] ?>][Symbol]"
           value="<?php echo $wc['machine_name'] ?>">
    <input type="hidden"
           name="RoutineContaminants[<?php echo $wc['machine_name'] ?>][Name]"
           value="<?php echo $wc['name'] ?>">
    <label class="column one-third" for="txt[$machine_name][Value]">$name $symbol_text</label>
    <input class="column one-third" name="RoutineContaminants[$machine_name][Value]" type="number" step="0.001" id="txt$machine_name" >
    <select class="column one-third"
            name="RoutineContaminants[$machine_name][Unit]"
            id="ddl$machine_name">
      <?php foreach ($wc['unit_types'] as $ut): ><!--
        <option
          value="< echo $ut >" < if ($wc['default_unit_type'] == $ut): {
          echo 'selected';
        } endif; >> < echo $ut ></option>
      < endforeach; >
    </select>
  </div>
  */

  $html[] += [
    "</div>", // closing usa-width-one-half
    "</div>", // closing usa-width-one-whole
  ];

  return implode('', $html);
}