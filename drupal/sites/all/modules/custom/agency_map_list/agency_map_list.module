<?php
/**
 * Implements hook_menu().
 **/
function agency_map_list_menu() {
    $items = array();
    $items['generateAgencyMapsTable'] = array(
        'page callback' => 'generateAgencyMapsTable',
        'access callback' => TRUE,
    );
    $items['ajax_map_form_validate'] = array(
        'page callback' => 'ajax_map_form_validate',
        'access callback' => TRUE,
    );
    return $items;
}

/**
 * Implements hook_theme_registry_alter().
 */
function agency_map_list_theme_registry_alter(&$theme_registry) {
    // Defined path to the current module.
    $module_path = drupal_get_path('module', 'agency_map_list');
    // Find all .tpl.php files in this module's folder recursively.
    $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
    // Iterate through all found template file objects.
    foreach ($template_file_objects as $key => $template_file_object) {
        // If the template has not already been overridden by a theme.
        if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
            // Alter the theme path and template elements.
            $theme_registry[$key]['theme path'] = $module_path;
            $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
            $theme_registry[$key]['type'] = 'module';
        }
    }

    // Provide a hook for this module's custom Preview function
    $theme_registry['node_preview']['file'] = 'agency_map_list.module';
    $theme_registry['node_preview']['theme path'] = $module_path;
    $theme_registry['node_preview']['function'] = 'agency_map_list_node_preview';
    $theme_registry['node_preview']['includes'] = array($module_path . '/agency_map_list.module');
}

/**
 * Overrides theme preview function.
 */
function agency_map_list_node_preview($variables) {
    $node = $variables['node'];

    $output = '<div class="preview">';
    $elements = node_view($node, 'full');
    $full = drupal_render($elements);

    $node_form = new stdClass;

    $url = $elements['field_ee_agency_map_url']['#items'][0]['value'];
    $orgid = $elements['field_orgid']['#items'][0]['value'];
    if (is_array($orgid)) {
        $orgid = $elements['field_orgid']['#items'][0]['value']['#value'];
    }
    $output .= $full;

    // If orgid exists, then call the JS function with supplied parameters.
    if (!empty($orgid)) {
        drupal_add_js(array(
            'agency_map_list' => array(
                'url' => $url,
                'orgid' => $orgid
                ),
            ), 'setting');;
    }
  return $output;
}

/**
 * Implements hook_form_alter().
 */
function agency_map_list_form_alter(&$form, &$form_state, $form_id) {
    global $user;
    if ($form_id == 'agency_map_node_form') {
        drupal_add_js(drupal_get_path('module', 'agency_map_list') . '/js/preview_maps.js');
        drupal_add_css(drupal_get_path('module', 'agency_map_list') . "/css/map_preview.css", "file");

        $form['instructions']['#markup'] = "<p><strong>Please note:</strong> Maps must meet the following criteria in order to be published to the \"Interactive Maps\" widget:</p><ul class=\"bulleted\">
            <li>Publicly-visible ArcGIS Online Web Mapping Application (not just a web map or a feature service)</li>
            <li>Meaningful item description</li>
            <li>Relevant item tags for use in filtering</li>
            <li>Use a unique and intuitive thumbnail image (i.e. not the default thumbnail)</li>
        </ul>";

        // Hide title field
        $form['title']['#default_value'] = "Â ";
        hide($form['title']);

        // Store username as owner
        $form["field_owner"][LANGUAGE_NONE][0]['value']['#default_value'] = $user->name;

        // Hide backend variables
        hide($form['field_orgid']);
        hide($form['field_owner']);
        hide($form['field_state']);

        $form_state['rebuild'] = TRUE;
        //$form_state['redirect'] = '/agency-map-list';
        $form['#validate'][] = 'agency_map_form_validate';
        hide($form['actions']['preview']);

        $form['field_ee_agency_map_url'][LANGUAGE_NONE][0]['value']['#field_suffix'] = "<a id='url_preview' href='#');'>Preview</a>";

        // Check if user is not admin
        if ($user->uid > 1) {
            $user_data = user_load($user->uid);
            //$state = $user_data->field_admin_state[LANGUAGE_NONE][0]['safe_value'];
            hide($form['additional_settings']);
        }

        $form['actions']['submit']['#submit'][] = 'new_agency_map_form_redirect';
        $form['actions']['submit']['#suffix'] = "<div class='agency-map-list-cancel-link'>" . l(t('Cancel'), '/agency-map-list', array('attributes' => array('class' => 'link'))) . "</div>";
    }
}

/**
 * Ajax function to check URL entry and return org ID to preview.
 */
function ajax_map_form_validate() {
    $error = true;
    $message = '';
    $orgid = '';
    $url = '';
    $console_message = '';

    if (isset($_POST['url'])) {
        $url = $_POST['url'];

        if (!valid_url($url, TRUE)) {
            $message = "Please provide a valid URL, such as https://agencyname.maps.arcgis.com/.";
        } elseif (preg_match('/(https?\:\/\/)(.*)(\.maps.arcgis.com)/', $url, $matches)) {
        // Get only the domain name and ignore anything after it (e.g. /rest/sharing)
        $url = "https://" . $matches[2] . $matches[3];
        // Get the AGOL metadata JSON
        $json_file = file_get_contents($url . '/sharing/rest/portals/self?culture=en&f=pjson');
        $result = json_decode($json_file);
        // Make sure it's a valid AGOL site
        if (!empty($result->id)) {
            $orgid = $result->id;
            $error = false;
        } else {
            // If URL doesn't match AGOL type, throw error
            $message = "Please provide a valid ArcGIS Online URL, such as https://agencyname.maps.arcgis.com/.";     
        }
        if ($result->access !== "public") {
            // If not a public site, throw error
            $message = "This ArcGIS Online site is not configured for public access.";
        }
    } else {
        // If URL doesn't match AGOL type, throw error
        $message = "Please provide a valid URL, such as https://agencyname.maps.arcgis.com/.";
    }
    }
    else {
        $console_message = "Please provide url parameter";
    }

    $return = array(
        'error' => $error,
        'console_message' => $console_message,
        'message' => $message, 
        'orgid' => $orgid,
        'url' => $url,
        );
    echo json_encode($return);
}

/**
 * Form validation
 */
function agency_map_form_validate($form, &$form_state){
    global $user;
    $url = $form_state['values']['field_ee_agency_map_url'][LANGUAGE_NONE][0]['value'];
    if (!valid_url($url, TRUE)) {
        $message = "Please provide a valid URL.";
        form_set_error('url', $message);
    } elseif (preg_match('/(https?\:\/\/)(.*)(\.maps.arcgis.com)/', $url, $matches)) {
    // Regex match of AGOL url
        $edit_form = FALSE; 
        // Check to see if this is the node edit page
        if (!empty($form_state['values']['delete'])) {
            $edit_form = TRUE;
        }
        // Get only the domain name and ignore anything after it (e.g. /rest/sharing)
        $url = "https://" . $matches[2] . $matches[3];

        // Check to see if the formatted URL is already in the database
        if (db_query("SELECT COUNT(*) FROM {field_data_field_ee_agency_map_url} WHERE field_ee_agency_map_url_value = :url;", array(':url' => $url))->fetchField() && !$edit_form) {
            // If it is, give an error
            $message = "This map collection has already been added. Please enter another.";
            form_set_error('url', $message);
        } else {
            form_set_value($form['field_ee_agency_map_url'], array('und' => array(0 => array('value' => $url))), $form_state);
            // Get the AGOL metadata JSON
            $json_file = file_get_contents($url . '/sharing/rest/portals/self?culture=en&f=pjson');
            $result = json_decode($json_file);
            // Make sure it's a valid AGOL site
            if (!empty($result->id)) {
                $user_data = user_load($user->uid);
                $state = $user_data->field_admin_state[LANGUAGE_NONE][0]['safe_value'];
                if ($edit_form) {
                    // Extract the organizational ID and store it as "orgid"
                    $form_state['values']['field_orgid'][LANGUAGE_NONE][0]['value'] = $result->id;
                    // Extract state admin info and store
                    $form_state['values']['field_state'][LANGUAGE_NONE][0]['value'] = $state;
                } else {
                    $form_state['values']['field_orgid'][LANGUAGE_NONE][0]['value']['#value'] = $result->id;
                    // Extract state admin info and store
                    $form_state['values']['field_state'][LANGUAGE_NONE][0]['value']['#value'] = $state;
                }
            } else {
                // If URL doesn't match AGOL type, throw error
                $message = "Please provide a valid public ArcGIS Online URL.";
                form_set_error('url', $message);
            }
            if ($result->access !== "public") {
                // If not a public site, throw error
                $message = "This ArcGIS Online site is not configured for public access.";
                form_set_error('url', $message);
            }
        }

    } else {
        // If URL doesn't match AGOL type, throw error
        $message = "Please provide a valid URL.";
        form_set_error('url', $message);
    }

}

/**
 * Hook_node_presave
 */
function agency_map_list_node_presave($node) {
    global $user;
		// Ensure custom content type is assigned to correct author
    if($node->type === 'agency_map') {
        $node->uid = $user->uid;
    }
}

function new_agency_map_form_redirect($form, &$form_state) {
    drupal_goto('/agency-map-list');
}

function loadAgencyMaps() {
     $agency_maps = array();
     $query = new EntityFieldQuery;
     $query->entityCondition('entity_type', 'node')
         ->entityCondition('bundle', 'agency_map')
         ->propertyCondition('status', 1);
     $results = $query->execute();
     if (isset($results['node'])) {
         $nids = array_keys($results['node']);
         $agency_maps = entity_load('node', $nids);
     }
    return $agency_maps;
}

function generateAgencyMapsTable() {
		/// Add users admin state if applicable
    if (in_array('state_admin', $user->roles)) {
        if (isset($user_data->field_admin_state[LANGUAGE_NONE])) {
            $admin_state = $user_data->field_admin_state[LANGUAGE_NONE][0]['safe_value'];
            $states[] = $admin_state;
        }
    }

    $agency_maps = loadAgencyMaps();
    echo "<table id='agencymaps-table'>" .
        "<thead><tr><th>State</th><th>Map Site</th><th>Agency</th></tr></thead>" .
        "<tbody>";
    foreach ($agency_maps as $nid => $nid_data) {
        $agencymap = $nid_data->title;
        $description = $nid_data->field_ee_agency_map_description[LANGUAGE_NONE][0]['safe_value'];
        $url = $nid_data->field_ee_agency_map_url[LANGUAGE_NONE][0]['safe_value'];
        $email = $nid_data->field_ee_agency_map_email[LANGUAGE_NONE][0]['safe_value'];
        $agency = $nid_data->field_ee_agency_map_agency[LANGUAGE_NONE][0]['value'];
        $state = $nid_data->field_ee_agency_map_us_state[LANGUAGE_NONE][0]['value'];
        echo "<tr><td>$state</td>" .
            "<td><div class='agencymap-url-hyperlink'><a href='" . $url . "' target='_blank'>$agencymap</a></div>" .
            "<br /><div class='agencymap-url-text' title='" . $url . "'>$description</div>" .
            "<br /><div class='agencymap-email' href='mailto:". $email. "'>$email</div></td>" .
            "<td>$agency</td></tr>";

    }
    echo "</tbody> </table>";
}