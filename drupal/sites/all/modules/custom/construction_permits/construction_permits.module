<?php

/**
 * Implements hook_menu().
 */
function construction_permits_menu() {
  $items = array();

  $items['admin/config/system/construction-permits'] = array(
    'title' => 'Construction Permits Configurations',
    'description' => 'Manage Construction Permits Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('construction_permits_admin'),
    'access arguments' => array('administer'),
    'file' => 'construction_permits.admin.inc',
  );
  $items['construction_permits/form_submission'] = array(
    'page callback' => 'construction_permits_form_submission',
    'access callback' => TRUE,
  );
  $items['construction_permits/cgp_results_pdf'] = array(
    'page callback' => 'cgp_pdf_generate',
    'access callback' => TRUE,
  );
  $items['cgp/%'] = array(
    'page callback' => 'cgp_external_details_lookup',
    'access callback' => TRUE,
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,

  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function construction_permits_block_info() {
  $blocks = array();
  $blocks['construction_permits'] = array(
    'info' => t('Construction General Permits Block'),
  );
  return $blocks;
}

/**
 * Implements hook_theme().
 * @see http://www.devdungeon.com/content/using-tpl-template-files-custom-drupal-7-modules
 */
function construction_permits_theme() {
  return array(
    // Name to be called with theme(). theme('construction_permits')
    'construction_permits' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use construction-permits.tpl.php
      'template' => 'construction-permits',
      'path' => drupal_get_path('module', 'construction_permits') . '/templates'
    ),
    'construction_permits_modal' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use construction-permits-modal.tpl.php
      'template' => 'construction-permits-modal',
      'path' => drupal_get_path('module', 'construction_permits') . '/templates'
    ),
    'construction_permits_modal_header' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use construction-permits-modal-header.tpl.php
      'template' => 'construction-permits-modal-header',
      'path' => drupal_get_path('module', 'construction_permits') . '/templates'
    ),
    'construction_permits_permit_notice_of_intent' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use construction-permits-permit-notice-of-intent.tpl.php
      'template' => 'construction-permits-permit-notice-of-intent',
      'path' => drupal_get_path('module', 'construction_permits') . '/templates'
    ),
    'construction_permits_status_definitions' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use construction-permits-status-definitions.tpl.php
      'template' => 'construction-permits-status-definitions',
      'path' => drupal_get_path('module', 'construction_permits') . '/templates'
    ),
    'cgp_single_page' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use cgp-single-page.tpl.php
      'template' => 'cgp-single-page',
      'path' => drupal_get_path('module', 'construction_permits') . '/templates'
    )
  );
}

/**
 * Implements hook_block_view().
 */
function construction_permits_block_view($delta = '') {
  $block = array();
  if ($delta == 'construction_permits') {
    //good idea to check user perms here
    if (user_access('access content')) {
      drupal_add_js(drupal_get_path('module', 'datatables') . '/dataTables/media/js/jquery.dataTables.js', [
        'scope' => 'footer',
        'preprocess' => TRUE,
        'group' => JS_LIBRARY,
        'type' => 'file',
        'cache' => TRUE,
        'requires_jquery' => TRUE
      ]);
      drupal_add_js(drupal_get_path('module', 'construction_permits') . '/js/parsley.js', [
        'scope' => 'footer',
        'group' => JS_LIBRARY,
        'type' => 'file',
      ]);
      drupal_add_js(drupal_get_path('module', 'construction_permits') . '/js/moment.js', [
        'scope' => 'footer',
        'group' => JS_LIBRARY,
        'type' => 'file',
      ]);
      drupal_add_js(drupal_get_path('module', 'construction_permits') . '/js/construction_permits.js', [
        'scope' => 'footer',
        'group' => JS_DEFAULT,
        'type' => 'file',
      ]);
      drupal_add_css(drupal_get_path('module', 'construction_permits') . '/css/construction_permits.css', [
        'preprocess' => TRUE,
        'group' => CSS_THEME
      ]);

      // Set Modal Template
      $cgp_modal_html = theme('construction_permits_modal');
      $cgp_modal_header = theme('construction_permits_modal_header');
      $cgp_status_html = theme('construction_permits_status_definitions');
      $cgp_permit_template_notice_of_intent = theme('construction_permits_permit_notice_of_intent');
      $settings = [
        "construction_permits" => [
          "cgp_api_endpoint" => variable_get('cgp_api_endpoint'),
          "cgp_modal" => $cgp_modal_html,
          "cgp_modal_header" => $cgp_modal_header,
          "permit_templates" => ["notice_of_intent" => $cgp_permit_template_notice_of_intent],
          "status_definition" => $cgp_status_html,
        ]
      ];
      drupal_add_js($settings, 'setting');

      $block['subject'] = t('Find a Construction General Permit');
      $block['content'] = theme('construction_permits');
      return $block;
    }
  }
  return $block;
}

/**
 * Take users POST input and handoff to sample data or BE WELL INFORMED service
 */
function construction_permits_form_submission() {

  $datatable_formatted_response = [];

  if (variable_get('cgp_form_endpoint_sample_data', FALSE)) {
    $construction_permits_response = sample_construction_permits_form_response();
    $datatable_formatted_response['data'] = $construction_permits_response;
    $datatable_formatted_response['datatable'] = construction_permits_datatable_response($construction_permits_response);
    $datatable_formatted_response['error'] = FALSE;
  }
  else {
    foreach ($_POST as $key => $value) {
      if(!empty($value) && in_array($key, ['submittedDateTo', 'submittedDateFrom','updatedDateFrom','updatedDateTo']) !== false) {
        $_POST[$key] = date("c", strtotime($value));
      }
    }
    $endpoint = variable_get('cgp_api_endpoint') . '/form?' . http_build_query($_POST);
    $response = drupal_http_request($endpoint, [
      "method" => "GET",
      'timeout' => "10"
    ]);
    if ($response->code !== "200") {
      $datatable_formatted_response['error'] = TRUE;
      $datatable_formatted_response['error_message'][] = json_decode($response->data);
    }
    else {
      $datatable_formatted_response['data'] = json_decode($response->data, true);
      $datatable_formatted_response['datatable'] = construction_permits_datatable_response($datatable_formatted_response['data']);
      $datatable_formatted_response['error'] = FALSE;
    }
  }

  drupal_json_output($datatable_formatted_response);
}

/**
 * Take BE WELL INFORMED response and format for Result Details and Result Summary datatables
 * @param $be_well_response_json
 * @return array
 */
function construction_permits_datatable_response($cgp_reponse_json) {
  $datatable_result_summary_json = [];
  foreach ($cgp_reponse_json as $cgp_result) {
    $doc_time = strtotime($cgp_result['reviewExpiration']);
    $dt_row = [];
    //$cgp_result = $cgp_result['data'];
    $dt_row[] = $cgp_result['id'];
    $dt_row[] = $cgp_result['npdesId'];
    $dt_row[] = $cgp_result['type'];
    $dt_row[] = $cgp_result['operatorInformation']["operatorName"];
    $dt_row[] = $cgp_result['projectSiteInformation']['siteName'];
    $dt_row[] = $cgp_result['projectSiteInformation']['siteStateCode'];
    $dt_row[] = $cgp_result['projectSiteInformation']['siteCity'];
    $dt_row[] = $cgp_result['status'];
    //$dt_row[] = $cgp_result['submittedDate'];  // Cert date
    //$dt_row[] = $cgp_result['certifiedDate'];  // Date of coverage

    $dt_row[] = $cgp_result['certifiedDate'];  // Cert date
    $dt_row[] = ($doc_time <= time()) ? $cgp_result['reviewExpiration'] : '&dash;';  // Date of coverage
    $datatable_result_summary_json[] = $dt_row;
  }
  return $datatable_result_summary_json;
}

function sample_construction_permits_form_response() {
  $path = drupal_get_path('module', 'construction_permits') . '/sample_data/devngn.epacdxnode.net.json';
  $sample = file_get_contents($path);
  return json_decode($sample, TRUE);
}

/**
 * Implements template_preprocess_hook for be-well-informed-modal.tpl.php.
 */
function template_preprocess_construction_permits(&$variables, $hook) {
  $cgp_body = variable_get('cgp_body', array('value' => variable_get('cgp_body', '<p class="widget-note">Source: <a href="https://www.epa.gov/" target="_blank" rel="external">US Environmental Protection Agency</a></p> <p>Find Notices of Intent (NOIs), Notices of Termination (NOTs), or Low Erosivity Waivers (LEWs) submitted under the U.S. EPA 2017 Construction General Permit (CGP).&nbsp; At this time, search results will only include activity with the national NPDES eReporting Tool (NeT-CGP) for U.S. EPA lead and participating states and tribes.</p> <h3>Enter one or more search criteria</h3>'), 'format' => NULL));
  $variables['body'] = $cgp_body['value'];
}

/**
 * Implements template_preprocess_hook for be-well-informed-pdf.tpl.php.
 */
function template_preprocess_construction_permits_pdf(&$variables, $hook) {
  global $user;
  $variables['response_json_data_pdf'] = variable_get($user->name . '_cgp_pdf_resp_' . $user->ssid);
}

/**
 * @param $tracking_id
 * @return string
 * @throws Exception
 */
function cgp_external_details_lookup($tracking_id) {
  $cgp_modal_html = theme('construction_permits_modal');
  $cgp_status_html = theme('construction_permits_status_definitions');
  $cgp_permit_template_notice_of_intent = theme('construction_permits_permit_notice_of_intent');
  $params = ["trackingNumber"=> $tracking_id];
  $form_url = variable_get('cgp_api_endpoint');

  $endpoint = $form_url . '/form?' . http_build_query($params);
  $response = drupal_http_request($endpoint, [
    "method" => "GET",
    'timeout' => "10"
  ]);
  if ($response->code !== "200") {
    $datatable_formatted_response['error'] = TRUE;
    $datatable_formatted_response['error_message'][] = json_decode($response->data);
  }
  else {
    $datatable_formatted_response['data'] = json_decode($response->data);
    $datatable_formatted_response['datatable'] = construction_permits_datatable_response($response->data);
    $datatable_formatted_response['error'] = FALSE;
  }


  $settings = [
    "construction_permits" => [
      "tracking_id" => $tracking_id,
      "response_data" => $datatable_formatted_response,
      "cgp_modal" => $cgp_modal_html,
      "permit_templates" => ["notice_of_intent" => $cgp_permit_template_notice_of_intent],
      "status_definition" => $cgp_status_html,
      "cgp_api_endpoint" => variable_get('cgp_api_endpoint'),
    ]
  ];
  drupal_add_js($settings, 'setting');

  drupal_add_js(drupal_get_path('module', 'construction_permits') . '/js/construction_permits.js', [
    'scope' => 'footer',
    'preprocess' => TRUE,
    'group' => JS_DEFAULT,
    'type' => 'file',
    'cache' => TRUE,
    'requires_jquery' => TRUE
  ]);
  drupal_add_css(drupal_get_path('module', 'construction_permits') . '/css/construction_permits.css', [
    'preprocess' => TRUE,
    'group' => CSS_THEME
  ]);

  return theme('cgp_single_page');
}
