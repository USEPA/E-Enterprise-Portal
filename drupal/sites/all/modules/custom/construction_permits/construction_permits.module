<?php


/**
 * Implements hook_menu().
 */
function construction_permits_menu() {
  $items = array();
  $items['construction_permits/form_submission'] = array(
    'page callback' => 'construction_permits_form_submission',
    'access callback' => TRUE,
  );
  $items['construction_permits/cgp_results_pdf'] = array(
    'page callback' => 'cgp_pdf_generate',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function construction_permits_block_info() {
  $blocks = array();
  $blocks['construction_permits'] = array(
    'info' => t('Construction General Permits Block'),
  );
  return $blocks;
}

/*
 * Generate pdf using wkhtmltopdf tool.
 * Example here: https://gist.github.com/davejamesmiller/1965886
 * */
function cgp_pdf_generate(){
  $html =  theme('construction_permits_pdf');
  $descriptorspec = array(
      0 => array('pipe', 'r'), // stdin
      1 => array('pipe', 'w'), // stdout
      2 => array('pipe', 'w'), // stderr
  );
  $current_srvr_name = variable_get('eportal_server_name');
  if(isset($current_srvr_name) && ($current_srvr_name == $_SERVER['SERVER_NAME'])){
    $process = proc_open('wkhtmltopdf -q - -', $descriptorspec, $pipes);
  }
  else{
    $process = proc_open('sites/all/libraries/wkhtmltox/bin/wkhtmltopdf -q - -', $descriptorspec, $pipes);
  }

  // Send the HTML on stdin
  fwrite($pipes[0], $html);
  fclose($pipes[0]);
  // Read the outputs
  $pdf = stream_get_contents($pipes[1]);
  $errors = stream_get_contents($pipes[2]);
  // Close the process
  fclose($pipes[1]);
  $return_value = proc_close($process);
  // Output the results
  if ($errors) {
    watchdog('construction_permits', "wkhtmltopdf PDF Generation Failed! ".$errors, WATCHDOG_ERROR);
    return "PDF Generation Failed!!";
  } else {
    header('Content-Type: application/pdf');
    header('Cache-Control: public, must-revalidate, max-age=0'); // HTTP/1.1
    header('Pragma: public');
    header('Expires: Sat, 26 Jul 1997 05:00:00 GMT'); // Date in the past
    header('Last-Modified: ' . gmdate('D, d M Y H:i:s').' GMT');
    header('Content-Length: ' . strlen($pdf));
    echo $pdf;
  }
}

/*
 * Implementation of hook_user_logout
 * Remove used pdf generation variable for the logged in user and session when the user logs out.
 * */
function construction_permits_user_logout($account){
  global $user;
  variable_del($user->name.'_cgp_pdf_resp_'.$user->ssid);
}


/**
 * Implements hook_theme().
 * @see http://www.devdungeon.com/content/using-tpl-template-files-custom-drupal-7-modules
 */
function construction_permits_theme() {
  return array(
    // Name to be called with theme(). theme('construction_permits')
    'construction_permits' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use my-cdx.tpl.php
      'template' => 'construction-permits',
      'path' => drupal_get_path('module', 'construction_permits') . '/templates'
    ),
    'construction_permits_modal' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use be-well-informed-modal.tpl.php
      'template' => 'construction-permits-modal',
      'path' => drupal_get_path('module', 'construction_permits') . '/templates'
    ),
    'construction_permits_pdf' => array(
        'variables' => array(),
        'template' => 'construction-permits-pdf',
        'path' => drupal_get_path('module', 'construction_permits') . '/templates'
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function construction_permits_block_view($delta = '') {
  $block = array();
  if ($delta == 'construction_permits') {
    //good idea to check user perms here
    if (user_access('access content')) {      
      drupal_add_js(drupal_get_path('module', 'datatables') . '/dataTables/media/js/jquery.dataTables.js', [
        'scope' => 'footer',
        'preprocess' => TRUE,
        'group' => JS_LIBRARY,
        'type' => 'file',
        'cache' => TRUE,
        'requires_jquery' => TRUE
      ]);
      drupal_add_js(drupal_get_path('module', 'construction_permits') . '/js/parsley.js', [
        'scope' => 'footer',
        'preprocess' => TRUE,
        'group' => JS_LIBRARY,
        'type' => 'file',
        'cache' => TRUE,
        'requires_jquery' => TRUE
      ]);
      drupal_add_js(drupal_get_path('module', 'construction_permits') . '/js/construction_permits.js', [
        'scope' => 'footer',
        'preprocess' => TRUE,
        'group' => JS_DEFAULT,
        'type' => 'file',
        'cache' => TRUE,
        'requires_jquery' => TRUE
      ]);
      drupal_add_css(drupal_get_path('module', 'construction_permits') . '/css/construction_permits.css', [
        'preprocess' => TRUE,
        'group' => CSS_THEME
      ]);
      
      // Set Modal Template
      $cgp_modal_html = theme('construction_permits_modal');
      drupal_add_js(array("construction_permits" => ["cgp_modal" => $cgp_modal_html]), 'setting');

      $block['subject'] = t('Find a Construction General Permit');
      $block['content'] = theme('construction_permits');
      return $block;
    }
  }
  return $block;
}

/**
 * Take users POST input and handoff to sample data or BE WELL INFORMED service
 */
function construction_permits_form_submission() {
  if (!isset($_POST) || count($_POST) === 0) {
    drupal_json_output(array(
      'error' => TRUE,
      'message' => 'Failed to receive any data.'
    ));
    return;
  }

  $datatable_formatted_response = array();
  module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
  if (feature_toggle_get_status('construction_permits_sample_data')) {
    $construction_permits_response = sample_construction_permits_response();
    $datatable_formatted_response['data'] = construction_permits_datatable_response($construction_permits_response);
    $datatable_formatted_response['error'] = FALSE;
  }
  else {
  	// Sample page at https://devngn.epacdxnode.net/oeca-cgp-web/action/secured/home/#!/home
    $endpoint = "";
    $headers = array('Content-Type' => 'application/json');
    $response = drupal_http_request($endpoint, [
      "headers" => $headers,
      "method" => "POST",
      'timeout' => "10",
      'data' => json_encode($_POST)
    ]);
    if ($response->code !== "200") {
      $datatable_formatted_response['error'] = TRUE;
    }
    else {
      $formatted_data = construction_permits_datatable_response($response->data);
      $datatable_formatted_response['data'] = $formatted_data;
      $datatable_formatted_response['error'] = FALSE;
    }
  }

  drupal_json_output($datatable_formatted_response);
}

/**
 * Take BE WELL INFORMED response and format for Result Details and Result Summary datatables
 * @param $be_well_response_json
 * @return array
 */
function construction_permits_datatable_response($cgp_reponse_json) {
  $cgp_reponse = json_decode($cgp_reponse_json);
  $datatable_result_summary_json = [];
  $datatable_result_details_json = [];

  //@TODO - Add logic to generate sections and datatable rows

  /*
   * Use username and session ID to save CGP data for pdf generation. This data will be removed on user
   * logout, implemented in hook_user_logout in construction_permits.module
  */
  
  global $user;
  variable_set($user->name.'_cgp_pdf_resp_'.$user->ssid, $be_well_response);

  return $be_well_response;
}

function load_content_from_basic_page($page_name) {
	$path = $page_name;
    $org_path = drupal_lookup_path("source", $path);
    if ($org_path) {
    	$node = menu_get_object("node", 1, $org_path);
		$nid = $node->nid;
		$node = node_load($nid);
		$nodeView = node_view($node, 'full');
  	}
  	else {
	  	$nodeView = "Page not found";
  	}
  	return $nodeView;
  	// Then set $page_content equal to a variable where load_content_from_basic_page is set and add to drupal_add_js(array("construction_permits" => ["modal" => $chemical_modal, "profile"=>$user_chem_rules_user_settings, "learnmore"=>$chemical_rules_learnmore]), 'setting');
}

function sample_construction_permits_response() {
  $response = [];
  return json_encode($response);
}

/**
 * Implements template_preprocess_hook for be-well-informed-modal.tpl.php.
 */
function template_preprocess_construction_permits_modal(&$variables, $hook) {

  //drupal_add_js(array("construction_permits" => ["variables" => $exposed_variables]), 'setting');

}

/**
 * Implements template_preprocess_hook for be-well-informed-pdf.tpl.php.
 */
function template_preprocess_construction_permits_pdf(&$variables, $hook) {

  global $user;
  $variables['response_json_data_pdf'] = variable_get($user->name.'_cgp_pdf_resp_'.$user->ssid);

  // drupal_add_js(array("construction_permits" => ["variables" => $exposed_variables]), 'setting');

}

