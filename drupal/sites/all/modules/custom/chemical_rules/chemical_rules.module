<?php

/**
 * Implements hook_menu().
 */
function chemical_rules_menu() {
  $items = array();
  $items['admin/config/system/chemical-rules'] = array(
      'title' => 'Chemical Rules configurations',
      'description' => 'Manage CDX Program Facility Service Endpoint',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('chemical_rules_settings'),
      'access arguments' => array('administer chemical rules'),
      'file' => 'chemical_rules.admin.inc',
  );
  $items['chemical_rules/form_submission'] = array(
    'page callback' => 'chemical_rules_form_submission',
    'access callback' => TRUE,
  );
  $items['chemical_rules/update_chem_profile'] = array(
    'page callback' => 'update_chem_profile',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function chemical_rules_block_info() {
  $blocks = array();
  $blocks['chemical_rules'] = array(
    'info' => t('Block Chemical Laws and Regulations'),
  );
  return $blocks;
}

/**
 * Implements hook_theme().
 * @see http://www.devdungeon.com/content/using-tpl-template-files-custom-drupal-7-modules
 */
function chemical_rules_theme() {
  return array(
    // Name to be called with theme(). theme('chemical_rules')
    'chemical_rules' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use chemical-rules.tpl.php
      'template' => 'chemical-rules',
      'path' => drupal_get_path('module', 'chemical_rules') . '/templates'
    ),
    'chemical_rules_modal' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use chemical-rules-modal.tpl.php
      'template' => 'chemical-rules-modal',
      'path' => drupal_get_path('module', 'chemical_rules') . '/templates'
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function chemical_rules_block_view($delta = '') {
  $block = array();
  if ($delta == 'chemical_rules') {
    //good idea to check user perms here
    if (user_access('access content')) {
      drupal_add_js(libraries_get_path('css-element-queries') . '/ElementQueries.min.js', [
        'scope' => 'footer',
        'preprocess' => TRUE,
        'group' => JS_LIBRARY,
        'type' => 'file',
        'cache' => TRUE,
        'requires_jquery' => TRUE
      ]);
      drupal_add_js(libraries_get_path('css-element-queries') . '/ResizeSensor.min.js', [
        'scope' => 'footer',
        'preprocess' => TRUE,
        'group' => JS_LIBRARY,
        'type' => 'file',
        'cache' => TRUE,
        'requires_jquery' => TRUE
      ]);
      drupal_add_js(drupal_get_path('module', 'chemical_rules') . '/js/chemical_rules.js', [
        'scope' => 'footer',
        'preprocess' => TRUE,
        'group' => JS_DEFAULT,
        'type' => 'file',
        'cache' => TRUE,
        'requires_jquery' => TRUE
      ]);
      //If installed in own installation, include jQuery Tabs JS
      //drupal_add_js("sites/all/libraries/jqueryui/ui/minified/jquery.ui.tabs.min.js", ['scope'=>'footer', 'preprocess'=>true, 'group'=>JS_THEME, 'type'=>'file', 'cache'=>true, 'requires_jquery'=>true]);
      
      drupal_add_css("sites/all/libraries/jqueryui/themes/base/minified/jquery.ui.tabs.min.css", [
        'scope'=>'footer', 
        'preprocess'=>true, 
        'group'=>CSS_DEFAULT
      ]);
      drupal_add_js(drupal_get_path('module', 'chemical_rules') . '/js/toc.min.js', [
        'scope' => 'footer',
        'preprocess' => TRUE,
        'group' => JS_DEFAULT,
        'type' => 'file',
        'cache' => TRUE,
        'requires_jquery' => TRUE
      ]);      
      drupal_add_css(drupal_get_path('module', 'chemical_rules') . '/css/chemical_rules.css', [
        'preprocess' => TRUE,
        'group' => CSS_THEME
      ]);
      // Set Form Modal Template
      global $user;
      $user_data = user_load($user->uid);
      if(isset($user_data->field_chem_rules_user_settings['und'][0])){
        $user_chem_rules_user_settings = json_decode($user_data->field_chem_rules_user_settings['und'][0]['value']);
      }
      $chemical_modal = theme('chemical_rules_modal');
      drupal_add_js(array("chemical_rules" => ["modal" => $chemical_modal, "profile"=>$user_chem_rules_user_settings]), 'setting');

      $block['subject'] = t('Chemical Laws &amp; Regulations');
      $block['content'] = theme('chemical_rules');
      return $block;
    }
  }
  return $block;
}

/**
 * Take users POST input and handoff to sample data or SRS / LRS / LOD service
 */
function chemical_rules_form_submission() {
  if (!isset($_POST) || count($_POST) === 0) {
    drupal_json_output(array(
      'error' => TRUE,
      'message' => 'Failed to receive any data.'
    ));
    return;
  }

  $response = [
    'error' => false,
    'error-messages' => [],
    'data'=> null,
  ];
  module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
  if (feature_toggle_get_status('chemical_rules_sample_data')) {
    $response['data'] = sample_chemical_rules_response();
  }
  else {
    chemical_rules_process_srs_response($response);
    chemical_rules_process_elastic_response($response);
    //chemical_rules_process_lrs_response($response);
    //chemical_rules_process_pubchem_response($response);
  }

  drupal_json_output($response);
}

function sample_chemical_rules_response() {
  $path = drupal_get_path('module', 'chemical_rules') . '/data.json';
  $sample = file_get_contents($path);
  return json_decode($sample);
}

function sample_chemical_rules_lrs_response() {
  $path = drupal_get_path('module', 'chemical_rules') . '/substanceList.json';
  $sample = file_get_contents($path);
  return json_decode($sample);
}

function sample_chemical_rules_pubchem_response() {
  $path = drupal_get_path('module', 'chemical_rules') . '/pubchem.json';
  $sample = file_get_contents($path);
  return json_decode($sample, true);
}

function chemical_rules_process_srs_response(&$return) {
  // Decide what kind of search we are doing: cas# || chem name

  if(is_valid_cas_number($_POST['cr-search_input'])){
    $endpoint = "https://ends2.epacdxnode.net/RestProxy/query?Node=NGNTest2.0&Dataflow=SRS&Request=GetSubstanceByCAS&Params=CASRegistryNumber|";
  }
  else {
    $endpoint = "https://ends2.epa.gov/RestProxy/Query?Node=NGNProd2.0&Dataflow=SRS&Request=GetSubstanceByName&Params=SubstanceName|";
  }
  $endpoint = $endpoint . urlencode($_POST['cr-search_input']);
  //$endpoint = $endpoint . str_ireplace(' ', '+',$_POST['cr-search_input']);

  //$headers = array('Content-Type' => 'application/json');
  $response = drupal_http_request($endpoint, [
    //"headers" => $headers,
    "method" => "GET",
    'timeout' => "10"
  ]);
  if ($response->code !== "200") {
    $return['error'] = TRUE;
    $return['error-messages'][] = ['code'=>$response->code, 'error'=>'SRS endpoint response: '.$response->error];
  }
  else {
    // Get the substance information and add it to the return data
    $response_array = strip_prefix_from_array(xmlstr_to_array($response->data), 'SRS:');
    // Additional logic to support CAS numbers
    $base = $response_array['Results']['SubstanceInformation']['ChemicalSubstance'];
    // The service for CAS look up returns multiple 'ChemicalSubstance',
    if(!isset($base['ChemicalSubstanceIdentification'])) {
      // The one without the 'IncorrectlyUsedCASRegistryNumberList' is the actual information needed
      for($i = count($base) - 1; $i >= 0; $i--) {
        if(count($base[$i]['ChemicalSubstanceIdentification']['IncorrectlyUsedCASRegistryNumberList']) == 0) {
          $base = $base[$i];
          break;
        }
      }
    }

    $chemSubstance = $base['ChemicalSubstanceIdentification'];
    if (empty($return['data']['Substance'])) {
      $return['data']['Substance'] = [];
    }
    foreach ($chemSubstance as $name => $value) {
      $value = ($value) ? $value : null;
      $return['data']['Substance'][$name] = $value;
    }
    // @todo Things that are missing.  Need to add from another service
    $toAppend = '{"MolecularWeight": "58.08 g/mol", "Solubility": "Miscible with water", "VaporPressure": "231 mm Hg at 25 deg C", "LogP": "log Kow = -0.24", "Stability": "Stable under recommended storage conditions.", "pKA": "20"}';
    $toAppend = json_decode($toAppend);
    foreach ($toAppend as $name => $value) {
      $return['data']['Substance'][$name] = $value;
    }

    // build both the "Synonym" list and the "SubstanceList"
    $SubstanceSynonyms = $base['ChemicalSubstanceSynonymList']['ChemicalSubstanceSynonym'];

    // Initialize them if they are not ready
    if (empty($return['data']['Substance']['Synonym'])) {
      $return['data']['Substance']['Synonym'] = [];
    }
    if (empty($return['data']['SubstanceList'])) {
      $return['data']['SubstanceList'] = [];
    }

    // Sort out the information we need for the various lists
    foreach ($SubstanceSynonyms as $index => $ss) {
      $value = ($value) ? $value : null;
      if(!in_array(strtolower($ss['ChemicalSubstanceSynonymName']), $return['data']['Substance']['Synonym']))
        $return['data']['Substance']['Synonym'][] = strtolower($ss['ChemicalSubstanceSynonymName']);

      if(!array_key_exists($ss['ChemicalSynonymSourceName'], $return['data']['SubstanceList']))
        $return['data']['SubstanceList'][$ss['ChemicalSynonymSourceName']] = $ss['ChemicalSynonymSourceName'];
    }
    sort($return['data']['Substance']['Synonym']);
    ksort($return['data']['SubstanceList']);
  }
}

function chemical_rules_process_lrs_response(&$return) {
  // make a call to the LRS service
  $lrs_endpoint = 'http://rockslide:9010/lrswebservices/v1/SubstanceList';

  //$headers = array('Content-Type' => 'application/json');
  $lrs_response = drupal_http_request($lrs_endpoint, [
    //"headers" => $headers,
    "method" => "GET",
    'timeout' => "10"
  ]);
  if ($lrs_response->code !== "200") {
    $return['error'] = TRUE;
    $return['error-messages'][] = 'LRS endpoint response: '.$lrs_response->error;
    $substance_list_response = sample_chemical_rules_lrs_response();
  }
  else {
    $substance_list_response = json_decode($lrs_response->data);
  }

  $substance_list = [];
  foreach ($substance_list_response as $list){
    if(in_array($list->substanceListName, $return['data']['SubstanceList'])){
      $cfrs = [];
      foreach ($list->cfrs as $cfr_id => $cfr) {
        $return['data']['LawsRegs'][$cfr_id] = $cfr;
        $cfrs[] = $cfr_id;
      }
      $list->cfrs = $cfrs;
      $substance_list[$list->substanceListName] = $list;
    }
  }
  $return['data']['SubstanceList'] = $substance_list;
}

function chemical_rules_process_elastic_response(&$return) {
  // make a call to the elastic search service
  $elastic_endpoint = 'http://ec2-52-54-71-189.compute-1.amazonaws.com:443/lrs_data_index/_search';

  $headers = array('Content-Type' => 'application/json');
  $elastic_response = drupal_http_request($elastic_endpoint, [
    "headers" => $headers,
    "method" => "POST",
    'timeout' => "10",
    //'data' =>  http_build_query(json_decode('{"query":{"match_all":{}},"from":10,"size":10}'))
    'data' =>  '{"query":{"match_all":{}},"size":1000}'
  ]);
  if ($elastic_response->code !== "200") {
    $return['error'] = TRUE;
    $return['error-messages'][] = 'Elastic endpoint response: '.$elastic_response->error;
    chemical_rules_process_lrs_response($return);
    return;
  }
  else {
    $substance_list_response = json_decode($elastic_response->data);
  }

  $substance_list = [];
  foreach ($substance_list_response->hits->hits as $hit){
    $list = $hit->_source;
    if(in_array($list->substanceListName, $return['data']['SubstanceList'])){
      $cfrs = [];
      foreach ($list->cfrs as $cfr_id => $cfr) {
        $return['data']['LawsRegs'][$cfr_id] = $cfr;
        $cfrs[] = $cfr_id;
      }
      $list->cfrs = $cfrs;
      $substance_list[$list->substanceListName] = $list;
    }
  }
  $return['data']['SubstanceList'] = $substance_list;
}

function chemical_rules_process_pubchem_response(&$return) {
  if(isset($return['data']['Substance']) && isset($return['data']['Substance']['EPAChemicalRegistryName'])) {
    // make a call to the LRS service
    $endpoint = 'https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/name/'. strtolower($return['data']['Substance']['EPAChemicalRegistryName']) .'/json';

    //$headers = array('Content-Type' => 'application/json');
    $response = drupal_http_request($endpoint, [
      //"headers" => $headers,
      "method" => "GET",
      'timeout' => "10"
    ]);
    if ($response->code !== "200") {
      $return['error'] = TRUE;
      $return['error-messages'][] = 'PubChem endpoint response: '.$response->error;
      $pubchem_response = sample_chemical_rules_pubchem_response();
    }
    else {
      $pubchem_response = json_decode($response->data, true);
    }

    foreach ($pubchem_response['PC_Compounds'][0]['props'] as $prop){
      $label = ($prop['urn']['name'])? $prop['urn']['label'].'_'.$prop['urn']['name'] : $prop['urn']['label'];
      foreach ($prop['value'] as $key => $value){
        $return['data']['Substance'][$label] = $prop['value'][$key];
        break;
      }
    }
  }
}

/**
 * Implements template_preprocess_hook for chemical-rules-modal.tpl.php.
 */
function template_preprocess_chemical_rules_modal(&$variables, $hook) {

}

function update_chem_profile() {

  $response = [
    'error' => false,
    'error-messages' => [],
    'data'=> null,
  ];

  if(isset($_POST['profile'])) {

    global $user;
    $existing = user_load($user->uid);
    $response['data'] = [ 'profile' => $_POST['profile']];

    $edit = (array) $existing;
    if(!is_string($_POST['profile'])) {
      $_POST['profile'] = json_encode($_POST['profile']);
    }
    $edit['field_chem_rules_user_settings']['und'][0]['value'] = $_POST['profile'];

    // save existing user

    if(!user_save($existing, $edit)) {
      $response['error'] = true;
      $response['error-messages'][] = 'There was a problem while trying to save';
    }
  }
  else {
    $response['error'] = true;
    $response['error-messages'][] = 'Missing profile value in the post data';
  }
  echo json_encode($response);
}
function is_valid_cas_number($stringToCheck) {
  $cas = '/(\d{2,7}).{0,2}(\d{2}).{0,2}(\d)+/';
  $casGroup = [];
  if(preg_match_all($cas, $stringToCheck, $casGroup)){
    $casBase = str_split($casGroup[1][0] . $casGroup[2][0]);
    $length = count($casBase);
    $sumCheck = 0;
    for($i = $length - 1; $i >= 0; $i--){
      $sumCheck += $casBase[$i] * ($length - $i);
    }
    return ($casGroup[3][0] == ($sumCheck % 10));
  }
  return false;
}
function strip_prefix_from_array($array, $prefix){
  $stripped = [];

  foreach ($array as $key => $item)
  {
    $stripped[str_ireplace($prefix, '', $key)] = (gettype($item) == 'array')? strip_prefix_from_array($item, $prefix) : $item;
  }
  return $stripped;
}
function xmlstr_to_array($xmlstr) {
  $doc = new DOMDocument();
  $doc->loadXML($xmlstr);
  $root = $doc->documentElement;
  $output = domnode_to_array($root);
  $output['@root'] = $root->tagName;
  return $output;
}
function domnode_to_array($node) {
  $output = array();
  switch ($node->nodeType) {
    case XML_CDATA_SECTION_NODE:
    case XML_TEXT_NODE:
      $output = trim($node->textContent);
      break;
    case XML_ELEMENT_NODE:
      for ($i=0, $m=$node->childNodes->length; $i<$m; $i++) {
        $child = $node->childNodes->item($i);
        $v = domnode_to_array($child);
        if(isset($child->tagName)) {
          $t = $child->tagName;
          if(!isset($output[$t])) {
            $output[$t] = array();
          }
          $output[$t][] = $v;
        }
        elseif($v || $v === '0') {
          $output = (string) $v;
        }
      }
      if($node->attributes->length && !is_array($output)) { //Has attributes but isn't an array
        $output = array('@content'=>$output); //Change output into an array.
      }
      if(is_array($output)) {
        if($node->attributes->length) {
          $a = array();
          foreach($node->attributes as $attrName => $attrNode) {
            $a[$attrName] = (string) $attrNode->value;
          }
          $output['@attributes'] = $a;
        }
        foreach ($output as $t => $v) {
          if(is_array($v) && count($v)==1 && $t!='@attributes') {
            $output[$t] = $v[0];
          }
        }
      }
      break;
  }
  return $output;
}