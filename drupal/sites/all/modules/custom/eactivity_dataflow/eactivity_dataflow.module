<?php
//Included for showcase s3fs feature toggle
module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');

function parse_cdx_handoff_data($cdx_deep_link_handoff) {
  // + 1 to start immediately after data=, and + count("data=") because strpos returns start of string position
  return substr($cdx_deep_link_handoff, strpos($cdx_deep_link_handoff, "data=") + strlen("data="));
}


/**
 * load progress tracker from EACTIVITY
 */
function load_eactivity_data($module_caller, $use_cache) {
  if ($use_cache === "false") {
    $use_cache = FALSE;
  }

  global $user;
  $eactivity_data = &drupal_static(__FUNCTION__);


  // First load cache for user. If no cache data or expired, proceed
  $cache_key = 'eactivity_data_flow|' . $user->uid;

  $cache = cache_get($cache_key);
  // Check if cache was set and if the cache is stale, since cache_get() does not.
  // @see https://civicactions.com/blog/drupal-gotchya-cache_get-returns-expired-items/

  module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
  $is_sample_data = feature_toggle_get_status('sample_eactivity_data');
  if (($cache && time() < $cache->expire) && $use_cache && !$is_sample_data) {
    // try cache first
    // @see https://www.lullabot.com/articles/a-beginners-guide-to-caching-data-in-drupal-7
    $eactivity_data = $cache->data;
  } else {

    if(!$is_sample_data) {
      // Connect to EACTIVITY
      $wsdl = variable_get('eactivity_auth_reg_wsdl');
      $client = connectToSOAPServerWithWSDL($wsdl, "Eenterprise Bridge Auth");

      if ($client->error) {
        return array("error" => true, "msg" => $client->msg);
      }

      $client = $client->client;
      $params1 = array(
        "userId" => variable_get('eactivity_auth_reg_username'),
        "credential" => variable_get('eactivity_auth_reg_password'),
        "domain" => variable_get('eactivity_auth_reg_domain'),
        "authenticationMethod" => variable_get('eactivity_auth_reg_auth_method'),
      );
      $response1 = callSOAPWithParams($client, "Authenticate", $params1, "Eenterprise Bridge Auth");

      if ($response1->error) {
        return array("error" => true, "msg" => $response1->msg);
      }

      $response1 = $response1->response;
      // Adding local wsdl configurations
      $local = variable_get('eactivity_dataflow_local');
      $wsdl = variable_get('eactivity_dataflow_wsdl');
      if ($local) {
        $client2 = connectToSOAPServerWithWSDL(dirname(__FILE__) . '/' . $wsdl, "Eenterprise Bridge Auth");
      } else {
        $client2 = connectToSOAPServerWithWSDL($wsdl, "Eenterprise Bridge Auth");
      }

      if ($client2->error) {
        return array("error" => true, "msg" => $client2->msg);
      }

      $client2 = $client2->client;

      //Extract out "_Via_CDX" string from $user->name to pull to-do and progress tracker from the Activity Data flow
      $cdx_username = $user->name;
      $cdx_pos = strrpos($cdx_username, "_Via_");
      if ($cdx_pos !== FALSE) {
        $cdx_username = substr($cdx_username, 0, $cdx_pos);
      }

      //For the following parameter, use $cdx_username, which does not have _Via_CDX at the end, instead of $user_name
      $params2 = array(
        "securityToken" => $response1->securityToken,
        "dataflow" => "E-ACTIVITY",
        "request" => "GetByUser",
        "rowId" => 0,
        "maxRows" => -1,
        "parameters" => array("_" => strtoupper($cdx_username), "parameterEncoding" => "None", "parameterName" => "user"),
      );
      $resp = callSOAPWithParams($client2, "Query", $params2, "Eenterprise Bridge Auth");

      if ($resp->error) {
        return array("error" => true, "msg" => $resp->msg);
      }

      $resp = $resp->response;
      $resp = $resp->results->any;
    }
    else {
      $path = drupal_get_path('module', 'eactivity_dataflow') . '/sample_data/eactivity_dataflow.xml';
      $resp = file_get_contents($path);
    }
    $resp = simplexml_load_string($resp);
    $eactivity_data = ['progress_tracker' => ['cached'=>Date('c')], 'to_do' => ['cached'=>Date('c')]];

    $counter = 0;
    // Parse progress tracker & to-do data
    foreach ($resp->children('http://www.exchangenetwork.net/schema/eact/1') as $activity) {
      $sample_date = Date('c', time() + ($counter * 86400 * 3));

      $res = array("EActivityId" => (string)$activity->EActivityId,
        "PartnerSystemId" => (string)$activity->PartnerSystemId,
        "PartnerExternalId" => (string)$activity->PartnerExternalId,
        "PartnerSystemReportType" => (string)$activity->PartnerSystemReportType,
        "ActivityType" => (string)$activity->ActivityType,
        "ActivityDesc" => (string)$activity->ActivityDesc,
        "ActivityCreateDate" => (string)$activity->ActivityCreateDate,
        "ActivitySourceURL" => (string)$activity->ActivitySourceURL,
        "ActivityExpirationDate" => ($is_sample_data) ? $sample_date : (string)$activity->ActivityExpirationDate,
        "Status" => (string)$activity->Status,
        "StatusNote" => (string)$activity->StatusNote,
        "StatusUpdateDate" => (string)$activity->StatusUpdateDate,
        "UserId" => (string)$activity->UserId,
        "RoleId" => (string)$activity->RoleId,
        "RoleIdSubject" => (string)$activity->RoleIdSubject,
        "Attributes" => (string)$activity->Attributes,);

      foreach ($activity->Attributes->Attribute as $child) {
        if ((string)($child->attributes()) == 'facilityName') {
          $res['FacilityName'] = $child->__toString();
        } else if ((string)($child->attributes()) == 'partCode') {
          $res['partCode'] = $child->__toString();
        } else if ((string)($child->attributes()) == 'partName') {
          $res['partName'] = $child->__toString();
        } else if ((string)($child->attributes()) == 'subPartCode') {
          $res['subPartCode'] = $child->__toString();
        } else if ((string)($child->attributes()) == 'subPartName') {
          $res['subPartName'] = $child->__toString();
        } else if ((string)($child->attributes()) == 'facilityRegistryIdentifier') {
          $res['facilityRegistryIdentifier'] = $child->__toString();
        }
      }
      $i = 0;
      if (feature_toggle_get_status('uses_s3_doc_storage')) {
        $s3_client = _s3fs_get_amazons3_client(_s3fs_get_config());
        $s3_client->registerStreamWrapper();
      }
      foreach ($activity->Documents->Document as $child) {
        $res['Documents'][$i]['id'] = $child->Id->__toString();
        if (feature_toggle_get_status('uses_s3_doc_storage')) {
          $res['Documents'][$i]['name'] = 'https://'.variable_get('s3fs_bucket').'.s3-'.variable_get('s3fs_region').'.amazonaws.com/'.$child->Name->__toString();
        }
        else{
          $res['Documents'][$i]['name'] = 'sites/default/files/' . $child->Name->__toString();
        }
        $res['Documents'][$i]['typeId'] = $child->TypeId->__toString();
        $res['Documents'][$i]['size'] = $child->Size->__toString();
        $res['Documents'][$i]['createDate'] = $child->CreateDate->__toString();
        $res['Documents'][$i]['transactionId'] = $child->TransactionId->__toString();
        $i++;
        if(!$is_sample_data) {

          $param_attch_type = array("_" => $child->Id->__toString(),
            "contentType" => array($child->TypeId->__toString()));
          $param_doc_id = $child->Id->__toString();

          $param_doc = array(
            "documentName" => $child->Name->__toString(),
            "documentFormat" => array($child->TypeId->__toString()),
            "documentContent" => $param_attch_type,
            "documentId" => $param_doc_id,
          );

          $param_dl1 = array(
            "securityToken" => $response1->securityToken,
            "dataflow" => "E-ACTIVITY",
            "transactionId" => $child->TransactionId->__toString(),
            "documents" => $param_doc,
          );

          $resp_dl = callSOAPWithParams($client2, "Download", $param_dl1, "Eenterprise Bridge Auth");

          if (!$resp_dl->error) {
            $resp_dl = $resp_dl->response;
            $INPUT = $resp_dl->documents->documentContent->_;
            //@see http://docs.aws.amazon.com/aws-sdk-php/v2/guide/feature-s3-stream-wrapper.html#listing-the-contents-of-a-bucket
            if (feature_toggle_get_status('uses_s3_doc_storage')) {
              $file = "s3://".variable_get("s3fs_bucket")."/".$child->Name->__toString();
            }
            else{
              $file = 'sites/default/files/' . $child->Name->__toString();
            }
            file_put_contents($file, $INPUT);
          }
        }
      }


      //86,400 is number of seconds in 24 hours, extend expiration date by 24 hours.
      $expiration_date = strtotime($res['ActivityExpirationDate']) + 86400;
      $curr_date = strtotime(date("Y-m-d H:i:s"));
      //do not create a node if its expiration date is already passed
      if (($expiration_date - $curr_date) > 0) {
        $eactivity_id = $res['EActivityId'];
        $eactivity_item = [];
        $eactivity_item['title'] = $res['ActivityDesc'];
        $eactivity_item['date'] = date("m/d/Y", $expiration_date);
        $activity_type = $res['ActivityType'];

        $res_domain = $res['PartnerSystemId'];
        if (strpos($res['PartnerSystemId'], 'lead') !== false) {
          $res_domain = "Lead";
        } else if (strpos($res['PartnerSystemId'], 'cedri') !== false) {
          $res_domain = "CEDRI";
        }

        $eactivity_item["domain"] = $res_domain;

        if ($res_domain == 'Lead') {
          $eactivity_item["date"] = date("m/d/Y", strtotime($res['StatusUpdateDate']));
          $title_parts = explode('/', $eactivity_item['title']);
          $eactivity_item['report_type'] = trim($title_parts[0]) . ' ' . trim($title_parts[1]);
          $eactivity_item["status_note"] = $res['StatusNote'];
          $eactivity_item['date_type'] = 'Status Changed Date';

        } else if ($res_domain == 'CEDRI') {
          $eactivity_item["date"] = date("m/d/Y", strtotime($res['ActivityExpirationDate']));
          $eactivity_item['date_type'] = 'Publish Date';
          $eactivity_item['report_type'] = $res['PartnerSystemReportType'];
          $eactivity_item["cedri_details"] = array(
            'facility_name' => $res['FacilityName'],
            'part_code' => $res['partCode'],
            'part_name' => $res['partName'],
            'sub_part_code' => $res['subPartCode'],
            'sub_part_name' => $res['subPartName'],
            'facility_registry' => $res['facilityRegistryIdentifier'],
            'partner_system_report_type' => $res['PartnerSystemReportType'],
          );
        }

        $res_status = ($res['Status'] == 'IN_PROGRESS') ? 'In Progress' : ucwords(strtolower($res['Status']));
        $eactivity_item["status"] = $res_status;


        if ($activity_type === 'TRACKER') {
          $res_action = '';
          // Handle Documents
          if ($res_domain == 'Lead') {
            foreach ($res['Documents'] as $ky => $vl) {
              if (strpos($vl['name'], 'Receipt') !== false) {
                if (feature_toggle_get_status('uses_s3_doc_storage')) {
                  $res_action .= "<a class='favorites-ignore ga-tracking'  data-ga-event-label='progress tracker view receipt' href='" . $vl['name'] . "' target='_blank'>View Receipt</a>";
                }else{
                  $res_action .= "<a class='favorites-ignore ga-tracking'  data-ga-event-label='progress tracker view receipt' href='/" . $vl['name'] . "' target='_blank'>View Receipt</a>";
                }
              }
              if (strpos($vl['name'], 'Certificate') !== false) {
                if (feature_toggle_get_status('uses_s3_doc_storage')) {
                  $res_action .= "<a class='favorites-ignore ga-tracking' data-ga-event-label='progress tracker view certificate' href='" . $vl['name'] . "' target='_blank'>View Certificate</a>";
                }else{
                  $res_action .= "<a class='favorites-ignore ga-tracking' data-ga-event-label='progress tracker view certificate' href='/" . $vl['name'] . "' target='_blank'>View Certificate</a>";
                }
              }
              if (strpos($vl['name'], 'Logo') !== false) {
                if (feature_toggle_get_status('uses_s3_doc_storage')) {
                  $res_action .= "<a class='favorites-ignore ga-tracking' data-ga-event-label='progress tracker view logo' href='" . $vl['name'] . "' target='_blank'>View Logo</a>";
                }else{
                  $res_action .= "<a class='favorites-ignore ga-tracking' data-ga-event-label='progress tracker view logo' href='/" . $vl['name'] . "' target='_blank'>View Logo</a>";
                }
              }
            }
          } else if ($res['Status'] == 'Under Review' || $res_domain == 'CEDRI') {
            $res_action .= "<a class='favorites-ignore ga-tracking'  data-ga-event-label='progress tracker view submission' href='/cdx_sso_handoff?handoff_data=" . parse_cdx_handoff_data($res['ActivitySourceURL']) . "' target='_blank'>View Submission</a>";
          }
          if (empty($res_action)) {
            $res_action = "N/A";
          }
          $eactivity_item["actions"] = $res_action;
          $eactivity_data['progress_tracker'][$eactivity_id] = $eactivity_item;

        } else if ($activity_type === 'TASK') {
          $eactivity_item['handoff_url'] = "/cdx_sso_handoff?handoff_data=" . parse_cdx_handoff_data($res['ActivitySourceURL']);
          $eactivity_data['to_do'][$eactivity_id] = $eactivity_item;
        }
      }
    }

    // Expire in 20 minutes
    $expire_ts = time() + (20 * 60);
    cache_set($cache_key, $eactivity_data, 'cache', $expire_ts);
  }

  return $eactivity_data[$module_caller];
}