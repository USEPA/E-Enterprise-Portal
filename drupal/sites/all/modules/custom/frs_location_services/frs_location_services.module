<?php
/**
 * Implements hook_menu().
 **/

function frs_location_services_menu()
{
    $items = array();
    $items['save_first_time_user_preferences'] = array(
        'page callback' => 'save_first_time_user_preferences',
        'access callback' => TRUE,
    );
    $items['return_location_data'] = array(
        'page callback' => 'return_location_data',
        'access callback' => TRUE,
    );
    $items['return_location_data_lat_long'] = array(
        'page callback' => 'return_location_data_lat_long',
        'access callback' => TRUE,
    );
    $items['high_level_taxonomy_checkboxes'] = array(
        'page callback' => 'high_level_taxonomy_checkboxes',
        'access callback' => TRUE,
    );
    $items['frs_zip_code_to_city_state'] = array(
        'page callback' => 'frs_zip_code_to_city_state',
        'access callback' => TRUE,
    );
    $items['frs_naas_authentication'] = array(
        'page callback' => 'frs_naas_authentication',
        'access callback' => TRUE,
    );
    return $items;
}


/**
 * Implements hook_theme_registry_alter().
 */
function frs_location_services_theme_registry_alter(&$theme_registry)
{
// Defined path to the current module.
    $module_path = drupal_get_path('module', 'frs_location_services');
// Find all .tpl.php files in this module's folder recursively.
    $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
// Iterate through all found template file objects.
    foreach ($template_file_objects as $key => $template_file_object) {
// If the template has not already been overridden by a theme.
        if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
// Alter the theme path and template elements.
            $theme_registry[$key]['theme path'] = $module_path;
            $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
            $theme_registry[$key]['type'] = 'module';
        }
    }
}


/**
 * Create a taxonomy term and return the tid.
 */
function custom_create_taxonomy_term($name, $vid)
{
    $term = new stdClass();
    $term->name = $name;
    $term->vid = $vid;
    taxonomy_term_save($term);
    return $term->tid;
}

/**
 * Params: array of zip codes, array of taxonomy ids for interests, skip boolean
 * Changes user's first_time_user to false
 * If skip boolean, zip code is saved if user allowed geolocation
 *  If not- no zip code saved.
 */

function save_first_time_user_preferences()
{
    global $user;
    $user_data = user_load($user->uid);

    $skip = xssafe($_POST['skip']);
    $zip = xssafe($_POST['zip']);

    $geolocation_used = xssafe($_POST['geolocation_used']);
    $geolocation_zip = xssafe($_POST['geolocation_zip']);

    $user_zip_codes = $user_data->field_zip_code;
    $user_initial_login = $user_data->field_initial_log_in;
    $first_time_user = $user_data->field_first_time_user;
    $user_role = $user_data->field_role;
    $user_org = $user_data->field_organization;
    $user_comm_type = $user_data->field_community_type;
    $user_comm_size = $user_data->field_community_size;
    $user_interests = $user_data->field_lgc_topics_of_interest;

    // Clear any previous zip code values (used for testing)
    unset($user_zip_codes[LANGUAGE_NONE]);


// Store users geolocation
    if ($skip && $geolocation_used) {
        $zip = $geolocation_zip;
    }

//Capture inital user settings for default zip
    $multifield_initial_zip_obj = array(
        'field_default_zip_code_value' => 1,
        'field_default_zip_code_format' => null,
        'field_geolocation_value' => $zip,
        'field_geolocation_value_format' => null,
        'field_geolocation' => array(
            LANGUAGE_NONE => array(
                0 => array(
                    'value' => $geolocation_used
                ),
            ),
        ),
        'field_default_zip_code' => array(
            LANGUAGE_NONE => array(
                0 => array(
                    'value' => $zip
                ),
            ),
        ),
    );

    $user_initial_login[LANGUAGE_NONE][0] = $multifield_initial_zip_obj;

    if (!$skip) {
        $multifield_zip_obj = array(
            'field_field_primary_value' => 1,
            'field_field_primary_format' => null,
            'field_field_zip_code_value' => $zip,
            'field_field_zip_code_format' => null,
            'field_field_primary' => array(
                LANGUAGE_NONE => array(
                    0 => array(
                        'value' => 1
                    ),
                ),
            ),
            'field_field_zip_code' => array(
                LANGUAGE_NONE => array(
                    0 => array(
                        'value' => $zip
                    ),
                ),
            ),
        );
        $user_zip_codes[LANGUAGE_NONE][0] = $multifield_zip_obj;


        // add role data
        $role = xssafe($_POST['role']);
        // Check if role is a new input from user and add to vocabulary
        if (!is_numeric($role)) {
            $role = custom_create_taxonomy_term($role, taxonomy_vocabulary_machine_name_load('roles')->vid);
        }
        $org = xssafe($_POST['org']);
        $comm_type = xssafe($_POST['comm_type']);
        $comm_size = xssafe($_POST['comm_size']);

        if ($role != '' && is_numeric($role)) {
            $user_role[LANGUAGE_NONE][0]['tid'] = $role;
        }
        if (is_numeric($org)) {
            $user_org[LANGUAGE_NONE][0]['tid'] = $org;
        }
        if ($comm_type) {
            $user_comm_type[LANGUAGE_NONE][0] = array('value' => $comm_type);
        }
        if ($comm_size && is_numeric($comm_size)) {
            $user_comm_size[LANGUAGE_NONE][0]['tid'] = $comm_size;
            $edit['field_community_size'] = $user_comm_size;
        }

        /// Save LGC Topic Settings
        // reset saved user interests
        $user_interests[LANGUAGE_NONE] = array();
        $interests = $_POST['interests'];
        foreach($interests as $tid) {
            if (is_numeric($tid)) {
                $user_interests[LANGUAGE_NONE][] = array('tid' => $tid);
            }
        }


    }

// Set first_time_user boolean to false
    $first_time_user[LANGUAGE_NONE][0] = array('value' => '0');

    $edit = array(
        'field_zip_code' => $user_zip_codes,
        'field_first_time_user' => $first_time_user,
        'field_initial_log_in' => $user_initial_login,
        'field_organization' => $user_org,
        'field_role' => $user_role,
        'field_community_type' => $user_comm_type,
        'field_community_size' => $user_comm_size,
        'field_lgc_topics_of_interest' => $user_interests
    );

    $return_msg = array();

    try {
        user_save($user_data, $edit);
    } catch (Exception $e) {
        $return_msg['error_msg'] = $e;
        $return_msg['success'] = false;
        $return_msg['geo'] = $geolocation_used;
        print json_encode($e);
        exit();
    }
    $return_msg['success'] = true;
    $return_msg['input'] = $_POST;
    $return_msg['user_interests'] = $user_interests;
    print json_encode($return_msg);

}

function return_location_data_lat_long()
{
    $results = array();
    if (isset($_GET['longitude']) && isset($_GET['latitude'])) {
        $longitude = $_GET['longitude'];
        $latitude = $_GET['latitude'];
        $results = frs_lat_long_to_zip_code($latitude, $longitude);
    } else {
        $results['error'] = true;
    }
    print json_encode($results);
}


//xss mitigation functions
function xssafe($data, $encoding = 'UTF-8')
{
    return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);
}


//
function return_location_data()
{
    if (isset($_POST['location'])) {
        $location = $_POST['location'];
    } else if (isset($_GET['location'])) {
        $location = $_GET['location'];
    } else {
        exit();
    }
// Sanitize inputs


// First check $location with postal code validation
    $validation = postal_code_validation_validate($location, 'US');
    $location = xssafe($location);
    if ($validation['error']) {
// Make location upper case for FRS
        $location = strtoupper($location);
//check city, state return
        $location = trim($location);
        $location_array = explode(',', $location);
        $city = trim($location_array[0]);
        $state = trim($location_array[1]);
        $zips = frs_city_state_to_zip_code($city, $state);
        echo json_encode($zips);
    } else {
        $zip_lookup = zip_code_lookup($validation['postal_code']);
        $zip_lookup['name_city_state'] = true;
        echo json_encode($zip_lookup);
    }

}


function high_level_taxonomy_checkboxes()
{
    $max_topics_shown = 10;
    // load local government topics
    $vid = taxonomy_vocabulary_machine_name_load('lgc_topics')->vid;
    $vocab_tree = taxonomy_get_tree($vid);
    $count = 0;
    foreach ($vocab_tree as $obj_class) {
        if ($count <= $max_topics_shown) {
            print '<label class="ck-button"><input aria-label="' . $obj_class->name . '" class="term-name-checkboxes" type="checkbox"  name="' . $obj_class->name . '" value="' . $obj_class->tid . '"/><span>' . $obj_class->name . '</span></label>';
            $count = $count + 1;
        } else {
            break;
        }
    }
}


// http://epadev.induscorp.com/enviro/html/fii/api/frs_api_services.html#LOOKUP4.15
function frs_lat_long_to_zip_code($lat, $long)
{

    $token = frs_naas_authentication();
    $ip = $_SERVER['SERVER_ADDR']; //variable_get('frs_api_lookup_ip');
    $frs_domain = variable_get('frs_api_lookup_url');
    if ($frs_domain == 'test_proxy') {
        $test_domain = "http://dev.epacdx.net/FrsServicesTestHarness/ServiceProxy/Get?url=";
        $base_url = 'http://epadev.induscorp.com/fiicdx/FRS_API_LOOKUP_SERVICES.get_spatial_data_by_latlong84?p_ip_address=' . $ip . '&p_token=' . $token . '&p_latitude=' . $lat .
            '&p_longitude=' . $long;
        $encoded_base_url = urlencode($base_url);
        $request_url = $test_domain . $encoded_base_url;
    } else {
        $request_url = $frs_domain . '.get_spatial_data_by_latlong84?p_ip_address=' . $ip . '&p_token=' . $token . '&p_latitude=' . $lat .
            '&p_longitude=' . $long;
    }


    $options = array(
        'headers' => array(
            'Content-Type' => 'application/json',
        ),
        'method' => 'GET',
//        'data' => $data
    );
    try {
        $response = drupal_http_request($request_url, $options);
    } catch (Exception $e) {
        dpm($e);
    }
    if (isset($response)) {
        $data = json_decode($response->data);
        $results = $data->Results;
        $formatted_city = ucwords(strtolower($results->derivedCity));
        $return = array(
            'zip' => $results->derivedZip,
            'city' => $formatted_city,
            'state' => $results->derivedState,
        );
    } else {
        $return = array();
    }
    return $return;
}

// http://epadev.induscorp.com/enviro/html/fii/api/frs_api_services.html#LOOKUP4.14
function frs_city_state_to_zip_code($city, $state)
{
    $token = frs_naas_authentication();
    $ip = $_SERVER['SERVER_ADDR']; //variable_get('frs_api_lookup_ip');
    $encoded_city = urlencode($city);
    $frs_domain = variable_get('frs_api_lookup_url');
    if ($frs_domain == 'test_proxy') {
        $test_domain = "http://dev.epacdx.net/FrsServicesTestHarness/ServiceProxy/Get?url=";
        $base_url = 'http://epadev.induscorp.com/fiicdx/FRS_API_LOOKUP_SERVICES.get_zip_by_city_state?p_ip_address=' . $ip . '&p_token=' . $token . '&p_city_name='
            . $encoded_city . '&p_state_abbr=' . $state;
        $encoded_base_url = urlencode($base_url);
        $request_url = $test_domain . $encoded_base_url;
    } else {
        $request_url = $frs_domain . '.get_zip_by_city_state?p_ip_address=' . $ip . '&p_token=' . $token . '&p_city_name='
            . $encoded_city . '&p_state_abbr=' . $state;
    }

    $options = array(
        'headers' => array(
            'Content-Type' => 'application/json',
        ),
        'method' => 'GET',
    );
    $response = drupal_http_request($request_url, $options);
    $results = json_decode($response->data);
    $formatted_city = ucwords(strtolower($city));
    $return = array(
        'zip_array' => $results->postalCodes,
        'state' => $state,
        'city' => $formatted_city,
    );
    return $return;
}


//// http://epadev.induscorp.com/enviro/html/fii/api/frs_api_services.html#LOOKUP4.13
function frs_zip_code_to_city_state($zip)
{
    $token = frs_naas_authentication();
    $frs_domain = variable_get('frs_api_lookup_url');
    $ip = $_SERVER['SERVER_ADDR']; //variable_get('frs_api_lookup_ip');
    if ($frs_domain == 'test_proxy') {
        $test_domain = "http://dev.epacdx.net/FrsServicesTestHarness/ServiceProxy/Get?url=";
        $base_url = 'http://epadev.induscorp.com/fiicdx/FRS_API_LOOKUP_SERVICES.get_city_state_by_zip?p_ip_address=' . $ip . '&p_postal_code=' . $zip . '&p_token=' . $token;
        $encoded_base_url = urlencode($base_url);
        $request_url = $test_domain . $encoded_base_url;
    } else {
        $request_url = variable_get('frs_api_lookup_url') . '.get_city_state_by_zip?p_ip_address=' . $ip . '&p_postal_code=' . $zip . '&p_token=' . $token;
    }
    $options = array(
        'headers' => array(
            'Content-Type' => 'application/json',
        ),
        'method' => 'GET',
    );
    $response = drupal_http_request($request_url, $options);
    $data = json_decode($response->data);
    $results = $data->Results;
    $formatted_city = ucwords(strtolower($results->cityName));
    if ($formatted_city != '') {
        $error = false;
    } else {
        $error = true;
        dpm($response);
    }
    $return = array(
        'city' => $formatted_city,
        'state' => $results->stateCode,
        'error' => $error,
    );
    return $return;
}


function frs_naas_authentication()
{

    $create_new_token = true;
/// First check if there is already a token that was created
    if (isset($_SESSION['frs_naas_token']) && isset($_SESSION['frs_naas_token_creation_time'])) {
// Check to see if it was created within the pass 5 minutes
        $time_stamp = $_SESSION['frs_naas_token_creation_time'];
        $current_timestamp = time();
        $diff_hours = abs($current_timestamp - $time_stamp) / (60);
        if ($diff_hours <= 5) {
//return the previously created token
            $create_new_token = false;
            return $_SESSION['frs_naas_token'];
        }
    }

    if ($create_new_token) {
        $wsdl = variable_get('cdx_node_token_wsdl');
        $email = variable_get('cdx_node_token_email');
        $password = variable_get('cdx_node_token_password');


        try {
            $client = new SoapClient($wsdl, array('soap_version' => SOAP_1_2));
        } catch (SoapFault $f) {
            dpm($f);
            drupal_set_message('Cannot connect to Registration Service for FRS.', 'error');
            return;
        }

        if (isset($client)) {
            $params = array(
                "userId" => $email,
                "credential" => $password,
                "domain" => variable_get('cdx_node_token_domain'),
                "authenticationMethod" => variable_get('cdx_node_token_auth_method'),
                "clientIp" => $_SERVER['SERVER_ADDR'], //variable_get('frs_api_lookup_ip'),
                'resourceURI' => ''
            );
            $soap_type = 'CentralAuth';


            $token = null;
            try {
                $response1 = $client->__soapCall($soap_type, array($params));
                $token = $response1->return;
            } catch (SoapFault $f) {
                dpm($f);
                $token = '';
                drupal_set_message('Cannot Authenticate to get data flow for FRS.', 'error');
            }
        } else {
            $token = '';
        }
        if (isset($_GET['json'])) {
            $_SESSION['frs_naas_token'] = $token;
            $_SESSION['frs_naas_token_creation_time'] = time();
            print json_encode(array(
                'ip' => $_SERVER['SERVER_ADDR'], //variable_get('frs_api_lookup_ip'),
                'token' => $token,
            ));
            exit();
        } else {
// Capture token and time to reduce calls to FRS
            $_SESSION['frs_naas_token'] = $token;
            $_SESSION['frs_naas_token_creation_time'] = time();
            return $token;
        }
    }
}


function frs_zip_code_to_lat_long($zip)
{
    $token = frs_naas_authentication();
    $ip = $_SERVER['SERVER_ADDR']; //variable_get('frs_api_lookup_ip');
    $frs_domain = variable_get('frs_api_lookup_url');
    if ($frs_domain == 'test_proxy') {
        $test_domain = "http://dev.epacdx.net/FrsServicesTestHarness/ServiceProxy/Get?url=";
        $base_url = 'http://epadev.induscorp.com/fiicdx/FRS_API_LOOKUP_SERVICES.derive_lat_long_by_zip?p_ip_address=' . $ip . '&p_zip=' . $zip . '&p_token=' . $token;
        $encoded_base_url = urlencode($base_url);
        $request_url = $test_domain . $encoded_base_url;
    } else {
        $request_url = $frs_domain . '.derive_lat_long_by_zip?p_ip_address=' . $ip . '&p_zip=' . $zip . '&p_token=' . $token;
    }
    $options = array(
        'headers' => array(
            'Content-Type' => 'application/json',
        ),
        'method' => 'GET',
    );
    $response = drupal_http_request($request_url, $options);
    $data = json_decode($response->data);
    $results = $data->Results;
    $return = array(
        'long' => $results->Longitude83,
        'lat' => $results->Latitude83,
    );
    return $return;
}


function generate_organization_select($elem_id)
{
    $options = array(
        'business' => 'Business',
        'education' => 'Education',
        'federal government' => 'Federal Government',
        'general public' => 'General public',
        'local government' => 'Local government',
        'state government' => 'State government',
        'research' => 'research'
    );
    echo "<select name='$elem_id' id='$elem_id'>";
    foreach ($options as $value => $text) {
        echo "<option value='$value'>$text</option>";
    };
    echo "</select>";
}

function generate_taxonomy_select($elem_id)
{
    $options = array();
    $combobox = false;
    $title = '';
    switch ($elem_id) {
        case 'community-size':
            $terms = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('community_sizes')->vid);
            $title = 'Select size';
            usort($terms, function ($a, $b) {
                return $a->tid - $b->tid;
            });
            break;
        case 'select-role':
            $terms = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('roles')->vid);
            $title = 'Select role';

            $options = array(
                '' => '',
                'data steward' => 'Data steward',
                'community outreach' => 'Community outreach',
                'program manager' => 'Program manager',
                'utilities manager' => 'Utilities manager',
                'budget and operations' => 'Budget and operations'
            );
            $combobox = true;
            usort($terms, function ($a, $b) {
                return $b->name - $a->name;
            });

            break;
        case 'select-organization':
            $terms = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('organizations')->vid);
            $title = 'Select organization';
            usort($terms, function ($a, $b) {
                return $b->name - $a->name;
            });
            break;
    }


    if ($combobox) {
        echo "<select name='$elem_id' id='$elem_id' class='combobox'>";
    } else {
        echo "<select name='$elem_id' id='$elem_id'>";
    }
    echo "<option value=''>$title</option>";
    foreach ($terms as $class_obj) {
        echo "<option value='$class_obj->tid'>$class_obj->name</option>";
    };
    echo "</select>";
}
