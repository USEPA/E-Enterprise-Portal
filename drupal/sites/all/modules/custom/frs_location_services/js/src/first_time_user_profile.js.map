{"version":3,"sources":["first_time_user_profile.js"],"names":["$","document","ready","showDefaultData","$location_desc_user","show","$location_desc_na","$loading_user_loc","hide","getLocation","navigator","geolocation","getCurrentPosition","showPosition","alert","position","latitude","coords","longitude","clearTimeout","timeout","lookupAndProcessCityState","ajax","url","Drupal","settings","basePath","type","async","data","success","location_data","parseJSON","error","showUserLocalData","failure","text","nearest_city","city","nearest_state","state","nearest_zip","zip","preferred_name","$nearest_location","selected_zip_code","selected_state","selected_city","geolocation_used","setCommunitySizeType","all_zip_attr","selected_pop","all_city_attr","selected_urban","toLowerCase","prop","val","initialValueCheck","location_input","$new_loc_input","location","is_valid_zip","test","is_city_state","triggerCityZipLookup","remove","removeClass","lookupAndProcessLocation","error_message","initial_login","parsed_data","name_city_state","city_count","length","$loc_add_new","append","addClass","changed_city","parsed_zip","zip_attr","city_attr","$zip_select","$choose_city_holder","city_select","each","index","html","focus","zip_array","zip_count","zip_select","zip_code","$choose_zip_holder","clear_city_state_error","skipGettingStarted","skip","geolocation_zip","trigger","dialog","first_time_user_block","$org_select","$cancel_zip","countEnter","on","e","which","this","selected_location","keyCode","stopImmediatePropagation","change","find","$local_govern_opts","click","interests","org_val","org_text","role_val","comm_size_val","comm_type_val","selected_size","type_checkboxes","current_checkbox","push","org","role","comm_size","comm_type","msg","parsed_msg","console","log","error_msg","title","modal","autoOpen","width","height","dialogClass","closeOnEscape","preventDefault","parent","event","stopPropagation","filter","attr","window","resize","my","at","of","setTimeout","jQuery"],"mappings":"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","file":"first_time_user_profile.js","sourcesContent":["(function($) {\n\n  $(document).ready(function() {\n\n    // If first time user, show modal for profile saving options\n    var first_time_user_block = $('#first-time-user-block');\n    if (first_time_user_block.length > 0) {\n\n      var selected_zip_code = '27705';\n      var selected_city = 'Durham';\n      var selected_state = 'NC';\n      var selected_urban = 'Urban';\n      var selected_pop = 228330;\n      var preferred_name = 'Durham, NC';\n      var nearest_zip = '27705';\n      var nearest_city = 'Durham';\n      var nearest_state = 'NC';\n      var geolocation_used = 0;\n      var all_city_attr = [];\n      var all_zip_attr = [];\n      var changed_city = 'no';\n\n      var $org_select = $('#select-organization');\n      var $zip_select = $('#zip_container');\n      var $nearest_location = $('#nearest-location');\n      var $location_desc_user = $('#location-description-user');\n      var $location_desc_na = $('#location-description-na');\n      var $loading_user_loc = $('#loading-user-location');\n      var $new_loc_input = $('#new-location-input');\n      var $loc_add_new = $('#location-add-new');\n      var $choose_zip_holder = $('#choose-zip-holder');\n      var $cancel_zip = $('#cancel-zip-select');\n      var $choose_city_holder = $('#choose-city-holder');\n      // Initialize  location with default information\n      $nearest_location.text(selected_city + ', ' + selected_state + ' (' + selected_zip_code + ')');\n\n      // Used if user did not allow geolocation\n      function showDefaultData() {\n        // show default data previously set\n        $location_desc_user.show();\n        $location_desc_na.show();\n        $loading_user_loc.hide();\n      }\n\n      function getLocation() {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(showPosition);\n        } else {\n          alert(\"Geolocation is not supported by this browser.\");\n        }\n      }\n\n      function showPosition(position) {\n        var latitude = position.coords.latitude;\n        var longitude = position.coords.longitude;\n        // cancel showing default timeout\n        clearTimeout(timeout);\n        lookupAndProcessCityState(latitude, longitude);\n      }\n\n\n      function lookupAndProcessCityState(latitude, longitude) {\n        $.ajax({\n          url: Drupal.settings.basePath + 'return_location_data_lat_long',\n          type: 'GET',\n          async: false,\n          data: {latitude: latitude, longitude: longitude},\n          success: function(location_data) {\n            var location_data = $.parseJSON(location_data);\n\n            if (!location_data.error) {\n              showUserLocalData(location_data);\n            }\n            else {\n              showDefaultData();\n            }\n            return location_data;\n          },\n          failure: function() {\n            alert('Unable to connect to service');\n          }\n        });\n      }\n\n      function showUserLocalData(location_data) {\n        // Reset nearest/selected to user's location data\n        $location_desc_na.text('Until you choose a location, the default location will be the location detected by the browser.').show();\n        nearest_city = location_data.city;\n        nearest_state = location_data.state;\n        nearest_zip = location_data.zip;\n        preferred_name = nearest_city + ', ' + nearest_state;\n        $nearest_location.text(nearest_city + ', ' + nearest_state + ' (' + nearest_zip + ')');\n//            $location_desc_na.hide();\n        selected_zip_code = nearest_zip;\n        selected_state = nearest_state;\n        selected_city = nearest_city;\n        geolocation_used = 1;\n        $location_desc_user.show();\n        $loading_user_loc.hide();\n      }\n\n      function setCommunitySizeType(zip) {\n        // console.log(all_zip_attr);\n        // console.log(all_city_attr);\n        if (all_zip_attr) {\n          if (zip in all_zip_attr) {\n            if (all_zip_attr[zip]['urban']) {\n              if (preferred_name && all_city_attr) {\n                if (preferred_name in all_city_attr) {\n                  selected_pop = all_city_attr[preferred_name]['pop'];\n                } else {\n                  selected_pop = all_zip_attr[zip]['pop'];\n                }\n              } else {\n                selected_pop = all_zip_attr[zip]['pop'];\n              }\n              selected_urban = all_zip_attr[zip]['urban'];\n              if (selected_urban.toLowerCase() === \"urban\") {\n                $('input[name=community-type][value=\"urban\"]').prop('checked', true);\n              } else if (selected_urban.toLowerCase() === \"rural\") {\n                $('input[name=community-type][value=\"rural\"]').prop('checked', true);\n              } else {\n                $('input[name=community-type][value=\"_none\"]').prop('checked', true);\n              }\n              if (selected_pop < 5000) {\n                $('#community-size option:contains(0 - 5,000)').prop('selected', true);\n              } else if (selected_pop < 10000) {\n                $('#community-size option:contains(5,000 - 10,000)').prop('selected', true);\n              } else if (selected_pop < 25000) {\n                $('#community-size option:contains(10,000 - 25,000)').prop('selected', true);\n              } else if (selected_pop < 100000) {\n                $('#community-size option:contains(25,000 - 100,000)').prop('selected', true);\n              } else if (selected_pop < 1000000) {\n                $('#community-size option:contains(100,000 - 1,000,000)').prop('selected', true);\n              } else {\n                $('#community-size option:contains(1,000,000+)').prop('selected', true);\n              }\n            } else {\n              // Reset options if not found in census data\n              $('input[name=community-type]').prop('checked', false);\n              $('#community-size').val('');\n            }\n          } else {\n            // Reset options if not found in census data\n            $('input[name=community-type]').prop('checked', false);\n            $('#community-size').val('');\n          }\n        } else {\n          // Reset options if not found in census data\n          $('input[name=community-type]').prop('checked', false);\n          $('#community-size').val('');\n        }\n      }\n\n      var countEnter = 0;\n      $('.term-name-checkboxes').on('keyup', function(e) {\n        if ((e.which == 13) && (countEnter == 1)) { // Enter key\n          $(this).trigger('click');\n        }\n        else if (e.which == 13 && countEnter == 0) {\n          countEnter = countEnter + 1;\n        }\n      });\n\n      // Show zip selection options\n      $('#change-location').on('click', function() {\n        $zip_select.hide();\n        $new_loc_input.val('');\n        $loc_add_new.show();\n        $choose_zip_holder.hide();\n        $cancel_zip.show();\n        $choose_city_holder.hide();\n        $('#new-location-input').focus();\n        return false;\n      });\n\n      // User has found zip they want, show in selected/nearest data\n      $('#confirm-zip-select').on('click', function() {\n        changed_city = 'yes';\n        selected_zip_code = $('#city-state-lookup-zips').val();\n        var selected_location = all_zip_attr[selected_zip_code]['city'];\n        setCommunitySizeType(selected_zip_code);\n        $location_desc_user.show();\n        $nearest_location.text(selected_location + ' (' + selected_zip_code + ')');\n        $zip_select.show();\n        $loc_add_new.hide();\n        $('#nearest-location').prop('tabindex', 0);\n        $('#nearest-location').focus();\n      });\n\n      // User has found city they want, show in selected/nearest data\n      $('#confirm-city-select').on('click', function() {\n        changed_city = 'yes';\n        preferred_name = $('#zip-lookup-city-state').val();\n        var selected_location = $new_loc_input.val();\n        setCommunitySizeType(selected_location);\n        $location_desc_user.show();\n        $nearest_location.text(preferred_name + ' (' + selected_location + ')');\n        $zip_select.show();\n        $loc_add_new.hide();\n        $('#nearest-location').prop('tabindex', 0);\n        $('#nearest-location').focus();\n      });\n\n      //Hide Zip selection options\n      $cancel_zip.on('click', function() {\n        $zip_select.show();\n        $loc_add_new.hide();\n        $choose_zip_holder.hide();\n        $choose_city_holder.hide();\n        clear_city_state_error();\n        $cancel_zip.hide();\n        $('#change-location').focus();\n      });\n\n      $new_loc_input.on('keypress', function(e) {\n          var $elem = $(this);\n          if (e.keyCode === 13) {\n            e.stopImmediatePropagation();\n            if ($new_loc_input.val().length > 4) {            \n              initialValueCheck();\n            }\n          }\n      });\n\n      $('#add-location').on('click', function() {\n        initialValueCheck();\n      });\n      \n      function initialValueCheck() {\n        var location_input = $new_loc_input;\n        var location = location_input.val();\n        var is_valid_zip = /(^\\d{5}$)|(^\\d{5}-\\d{4}$)|(^\\d{5}-\\d{5}$)/.test(location);\n        // regex for city, state code\n        var is_city_state = /^[\\w\\s]+,\\s*\\w{2}$/.test(location);\n        if ((is_valid_zip === true) || (is_city_state === true)) {\n          triggerCityZipLookup(location, location_input);\n        }\n      }\n\n      function triggerCityZipLookup(location, location_input) {\n        $('#location-error-message').remove();\n        location_input.removeClass('input-error');\n        lookupAndProcessLocation(location, location_input);\n      }\n\n      // accepts city, state or zipcodes.\n      function lookupAndProcessLocation(location, location_input) {\n        var error_message = '';\n        $.ajax({\n          url: Drupal.settings.basePath + 'return_location_data',\n          type: 'POST',\n          data: {location: location, initial_login: true},\n          success: function(data) {\n            var parsed_data = $.parseJSON(data);\n            // zip code entered, returned city/state\n            if (parsed_data.name_city_state) {\n              var city_count = parsed_data.city.length;\n              if (city_count == 0) { //Unable to find data for that zip\n                if ($('#location-error-message').length === 0) {\n                  error_message = '<span id=\"location-error-message\">The ZIP code you entered could not be found.</span>';\n                  $loc_add_new.append(error_message);\n                  location_input.addClass('input-error');\n                }\n              }\n              else if (city_count == 1) { //Only one city/tribal area match\n                changed_city = 'yes';\n                selected_state = parsed_data.state;\n                var parsed_zip = parsed_data.zip;\n                // Get city & zip attribute data\n                all_zip_attr = parsed_data.zip_attr;\n                all_city_attr = parsed_data.city_attr;\n                // Update form with new location\n                $nearest_location.text(parsed_data.city[0] + ' (' + parsed_zip + ')');\n                selected_zip_code = parsed_zip;\n                preferred_name = parsed_data.city[0];\n                // Set community size & type fields based on census data\n                setCommunitySizeType(selected_zip_code);\n                $zip_select.show();\n                $loc_add_new.hide();\n                $choose_city_holder.hide();\n              }\n              else { //More than one city/tribal area match\n                selected_zip_code = parsed_data.zip;\n                selected_state = parsed_data.state;\n                // Get city & zip attribute data\n                all_zip_attr = parsed_data.zip_attr;\n                all_city_attr = parsed_data.city_attr;\n                // Create a city dropdown for the user to select from\n                // Community size/type will be populated based on selection\n                var city_select = '<select id=\"zip-lookup-city-state\">';\n                $.each(parsed_data.city, function(index, city) {\n                  city_select = city_select + '<option value=\"' + city + '\">' + city + '</option>';\n                });\n                city_select = city_select + '</select>';\n                $new_loc_input.val(selected_zip_code);\n                $('#choose-city').html(city_select);\n                $('#typed-in-city-state').text(location);\n                $choose_city_holder.show();\n                $('#zip-lookup-city-state').focus();\n              }\n            }\n            else { //Still uses old FRS-style for doing city/state -> zip lookups (i.e. no census data or auto-populating community size/type)\n              var zip_array = parsed_data.zip_array;\n              var zip_count = zip_array.length;\n              if (zip_count == 0) {\n                if ($('#location-error-message').length === 0) {\n                  error_message = '<span id=\"location-error-message\">No ZIP codes returned. Are you sure the city and state code were entered correctly? (e.g., Durham, NC)</span>';\n                  $loc_add_new.append(error_message);\n                }\n              }\n              else if (zip_count == 1) {\n                changed_city = 'yes';\n                selected_city = parsed_data.city;\n                selected_state = parsed_data.state;\n                all_zip_attr = parsed_data.zip_attr;\n                all_city_attr = parsed_data.city_attr;\n                if (selected_state) {\n                  preferred_name = selected_city + \", \" + selected_state;\n                } else {\n                  preferred_name = selected_city;\n                }\n                selected_zip_code = zip_array[0];\n                $location_desc_user.show();\n                $nearest_location.text(preferred_name + ' (' + selected_zip_code + ')');\n                setCommunitySizeType(selected_zip_code);\n                $zip_select.show();\n                $loc_add_new.hide();\n                $new_loc_input.val('');\n              }\n              else {\n                selected_city = parsed_data.city;\n                selected_state = parsed_data.state;\n                if (selected_state) {\n                  preferred_name = selected_city + \", \" + selected_state;\n                } else {\n                  preferred_name = selected_city;\n                }\n                // Get city & zip attribute data\n                all_zip_attr = parsed_data.zip_attr;\n                all_city_attr = parsed_data.city_attr;\n                var zip_select = '<select id=\"city-state-lookup-zips\">';\n                $.each(parsed_data.zip_array, function(index, zip_code) {\n                  zip_select = zip_select + '<option value=\"' + zip_code + '\">' + zip_code + '</option>';\n                });\n                zip_select = zip_select + '</select>';\n                //$new_loc_input.val(selected_city + ', ' + selected_state);\n                $('#choose-zip').html(zip_select);\n                $('#typed-in-city-state').text(location);\n                $choose_zip_holder.show();\n                $('#city-state-lookup-zips').focus();\n              }\n            }\n          },\n          failure: function() {\n            alert('Was unable to connect to service');\n          }\n        });\n      }\n\n      function clear_city_state_error() {\n        $new_loc_input.removeClass('input-error');\n        $('#location-error-message').remove();\n      }\n\n      $org_select.change(function() {\n        var val = $(this).find('option:selected').text();\n        $local_govern_opts = $('#local-government-options');\n        if (val == 'Local government') {\n          $local_govern_opts.show();\n        }\n        else {\n          $local_govern_opts.hide();\n        }\n      });\n\n      $('#save-preferences').click(function() {\n        var interests = [];\n        var org_val = $org_select.val();\n        var org_text = $org_select.find('option:selected').text();\n        var role_val = $('#select-role').val();\n        var comm_size_val = 0;\n        var comm_type_val = 0;\n        if (org_text == 'Local government') {\n          var selected_size = $('#community-size').val();\n          var type_checkboxes = $('input[name=community-type]:checked');\n          if (selected_size != '') {\n            comm_size_val = selected_size;\n          }\n          if (type_checkboxes.length > 0) {\n            comm_type_val = type_checkboxes.val();\n          }\n        }\n\n        // Collect interests from checkboxes\n        $('.term-name-checkboxes:checked').each(function() {\n          var current_checkbox = $(this);\n          interests.push(current_checkbox.val());\n        });\n\n        // ***********  !  IMPORTANT  !  ***********\n        // If save_first_time_user_preferences is updated, please verify that...\n        // ... function skipGettingStarted is updated as needed also to pass any variables to...\n        // ... Workbench header.\n        $.ajax({\n          url: Drupal.settings.basePath + 'save_first_time_user_preferences',\n          type: 'POST',\n          data: {\n            skip: 0,\n            zip: selected_zip_code,\n            preferred_name: preferred_name,\n            geolocation_used: geolocation_used,\n            geolocation_zip: nearest_zip,\n            org: org_val,\n            role: role_val,\n            comm_size: comm_size_val,\n            comm_type: comm_type_val,\n            interests: interests\n          },\n          success: function(msg) {\n            var parsed_msg = $.parseJSON(msg);\n            $(document).trigger(\"ee:first_time_user_complete\");\n            if (parsed_msg.success) {\n              $('#location-select').html('<option value=\"' + selected_zip_code + '\" selected>' + preferred_name + ' (' + selected_zip_code + ')</option>').trigger('change');\n            }\n            else {\n              console.log(parsed_msg.error_msg);\n            }\n            first_time_user_block.dialog('close');\n          }\n        })\n      });\n\n      first_time_user_block.dialog({\n        title: '<span>Getting Started</span>What matters to you?',\n        modal: true,\n        autoOpen: true,\n        width: 1100,\n        height: 600,\n        //height: auto,\n        dialogClass: 'first-time-user-dialog',\n        closeOnEscape: false\n      });\n      $('body').find('.first-time-user-dialog').focus();\n\n      $('#skip-preferences').on('click', skipGettingStarted);\n      // If user presses Escape key\n      $(first_time_user_block).on('keydown', function(e) {\n        if (e.which === 27) {\n          e.stopImmediatePropagation();\n          e.preventDefault();\n          skipGettingStarted();\n          first_time_user_block.dialog('close');\n        }\n      });\n      $(first_time_user_block).parent().on('keydown', function(event) {\n        if (event.which === 27) {\n          event.stopImmediatePropagation();\n          event.preventDefault();\n          skipGettingStarted();\n          first_time_user_block.dialog('close');\n        }\n      });\n\n      $('#switch-to-interests').click(function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        $('.first-time-first-page').hide();\n        $('.first-time-second-page').show();\n        $('.term-name-checkboxes').filter(\":first\").focus();\n        $('.term-name-checkboxes').filter(\":first\").attr('checked', false);\n      });\n\n      $('#switch-to-first-page').click(function() {\n        $('.first-time-first-page').show();\n        $('.first-time-second-page').hide();\n        $org_select.focus();\n      });\n\n      $(window).resize(function() {\n        first_time_user_block.dialog(\"option\", \"position\", {my: \"center\", at: \"center\", of: window});\n      });\n\n      // After 5 seconds of inactivity from geolocation show the default\n      var timeout = setTimeout(\n        function() {\n          showDefaultData();\n        }, 1000);\n      // Try to get local settings via gelocation\n      getLocation();\n    }\n\n    function skipGettingStarted() {\n      // If user blocks location and skips Getting Started, leave zip and geolocation_zip blank\n      var show_zip = '';\n      if (geolocation_used == 0 && changed_city == 'no') {\n        nearest_zip = '27705';\n        preferred_name = 'Durham, NC';\n      }\n      else {\n        nearest_zip = selected_zip_code;\n      }\n      $.ajax({\n        url: Drupal.settings.basePath + 'save_first_time_user_preferences',\n        type: 'POST',\n        data: {\n          skip: 1,\n          zip: '',\n          geolocation_used: geolocation_used,\n          geolocation_zip: nearest_zip,\n          preferred_name: preferred_name\n        },\n        success: function() {\n          $(document).trigger(\"ee:first_time_user_complete\");\n          $('#location-select').html('<option value=\"' + selected_zip_code + '\" selected>' + preferred_name + ' (' + selected_zip_code + ')</option>').trigger('change');\n          $('.pane-views-first-time-user-profile-block').dialog('close');\n        }\n      });\n      return false;\n    }\n  });\n})(jQuery);\n"]}