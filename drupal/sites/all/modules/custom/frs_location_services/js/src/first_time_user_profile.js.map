{"version":3,"sources":["first_time_user_profile.js"],"names":["$","document","ready","showDefaultData","$location_desc_user","show","$location_desc_na","$loading_user_loc","hide","getLocation","navigator","geolocation","getCurrentPosition","showPosition","alert","position","latitude","coords","longitude","clearTimeout","timeout","lookupAndProcessCityState","ajax","url","Drupal","settings","basePath","type","async","data","success","location_data","parseJSON","error","showUserLocalData","failure","text","nearest_city","city","nearest_state","state","nearest_zip","zip","preferred_name","$nearest_location","selected_zip_code","selected_state","selected_city","geolocation_used","setCommunitySizeType","all_zip_attr","selected_pop","all_city_attr","selected_urban","toLowerCase","prop","val","lookupAndProcessLocation","location","location_input","error_message","initial_login","parsed_data","name_city_state","city_count","length","$loc_add_new","append","addClass","changed_city","parsed_zip","zip_attr","city_attr","$zip_select","$choose_city_holder","city_select","each","index","$new_loc_input","html","focus","zip_array","zip_count","zip_select","zip_code","$choose_zip_holder","clear_city_state_error","removeClass","remove","skipGettingStarted","skip","geolocation_zip","trigger","dialog","first_time_user_block","$org_select","$cancel_zip","countEnter","on","e","which","this","click","selected_location","test","change","find","$local_govern_opts","interests","org_val","org_text","role_val","comm_size_val","comm_type_val","selected_size","type_checkboxes","current_checkbox","push","org","role","comm_size","comm_type","msg","parsed_msg","console","log","error_msg","title","modal","autoOpen","width","height","dialogClass","closeOnEscape","stopImmediatePropagation","preventDefault","parent","event","stopPropagation","filter","attr","window","resize","my","at","of","setTimeout","jQuery"],"mappings":"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","file":"first_time_user_profile.js","sourcesContent":["(function($) {\r\n\r\n  $(document).ready(function() {\r\n\r\n    // If first time user, show modal for profile saving options\r\n    var first_time_user_block = $('#first-time-user-block');\r\n    if (first_time_user_block.length > 0) {\r\n\r\n      var selected_zip_code = '27705';\r\n      var selected_city = 'Durham';\r\n      var selected_state = 'NC';\r\n      var selected_urban = 'Urban';\r\n      var selected_pop = 228330;\r\n      var preferred_name = 'Durham, NC';\r\n      var nearest_zip = '27705';\r\n      var nearest_city = 'Durham';\r\n      var nearest_state = 'NC';\r\n      var geolocation_used = 0;\r\n      var all_city_attr = [];\r\n      var all_zip_attr = [];\r\n      var changed_city = 'no';\r\n\r\n      var $org_select = $('#select-organization');\r\n      var $zip_select = $('#zip_container');\r\n      var $nearest_location = $('#nearest-location');\r\n      var $location_desc_user = $('#location-description-user');\r\n      var $location_desc_na = $('#location-description-na');\r\n      var $loading_user_loc = $('#loading-user-location');\r\n      var $new_loc_input = $('#new-location-input');\r\n      var $loc_add_new = $('#location-add-new');\r\n      var $choose_zip_holder = $('#choose-zip-holder');\r\n      var $cancel_zip = $('#cancel-zip-select');\r\n      var $choose_city_holder = $('#choose-city-holder');\r\n      // Initialize  location with default information\r\n      $nearest_location.text(selected_city + ', ' + selected_state + ' (' + selected_zip_code + ')');\r\n\r\n      // Used if user did not allow geolocation\r\n      function showDefaultData() {\r\n        // show default data previously set\r\n        $location_desc_user.show();\r\n        $location_desc_na.show();\r\n        $loading_user_loc.hide();\r\n      }\r\n\r\n      function getLocation() {\r\n        if (navigator.geolocation) {\r\n          navigator.geolocation.getCurrentPosition(showPosition);\r\n        } else {\r\n          alert(\"Geolocation is not supported by this browser.\");\r\n        }\r\n      }\r\n\r\n      function showPosition(position) {\r\n        var latitude = position.coords.latitude;\r\n        var longitude = position.coords.longitude;\r\n        // cancel showing default timeout\r\n        clearTimeout(timeout);\r\n        lookupAndProcessCityState(latitude, longitude);\r\n      }\r\n\r\n\r\n      function lookupAndProcessCityState(latitude, longitude) {\r\n        $.ajax({\r\n          url: Drupal.settings.basePath + 'return_location_data_lat_long',\r\n          type: 'GET',\r\n          async: false,\r\n          data: {latitude: latitude, longitude: longitude},\r\n          success: function(location_data) {\r\n            var location_data = $.parseJSON(location_data);\r\n\r\n            if (!location_data.error) {\r\n              showUserLocalData(location_data);\r\n            }\r\n            else {\r\n              showDefaultData();\r\n            }\r\n            return location_data;\r\n          },\r\n          failure: function() {\r\n            alert('Unable to connect to service');\r\n          }\r\n        });\r\n      }\r\n\r\n      function showUserLocalData(location_data) {\r\n        // Reset nearest/selected to user's location data\r\n        $location_desc_na.text('Until you choose a location, the default location will be the location detected by the browser.').show();\r\n        nearest_city = location_data.city;\r\n        nearest_state = location_data.state;\r\n        nearest_zip = location_data.zip;\r\n        preferred_name = nearest_city + ', ' + nearest_state;\r\n        $nearest_location.text(nearest_city + ', ' + nearest_state + ' (' + nearest_zip + ')');\r\n//            $location_desc_na.hide();\r\n        selected_zip_code = nearest_zip;\r\n        selected_state = nearest_state;\r\n        selected_city = nearest_city;\r\n        geolocation_used = 1;\r\n        $location_desc_user.show();\r\n        $loading_user_loc.hide();\r\n      }\r\n\r\n      function setCommunitySizeType(zip) {\r\n        // console.log(all_zip_attr);\r\n        // console.log(all_city_attr);\r\n        if (all_zip_attr) {\r\n          if (zip in all_zip_attr) {\r\n            if (all_zip_attr[zip]['urban']) {\r\n              if (preferred_name && all_city_attr) {\r\n                if (preferred_name in all_city_attr) {\r\n                  selected_pop = all_city_attr[preferred_name]['pop'];\r\n                } else {\r\n                  selected_pop = all_zip_attr[zip]['pop'];\r\n                }\r\n              } else {\r\n                selected_pop = all_zip_attr[zip]['pop'];\r\n              }\r\n              selected_urban = all_zip_attr[zip]['urban'];\r\n              if (selected_urban.toLowerCase() === \"urban\") {\r\n                $('input[name=community-type][value=\"urban\"]').prop('checked', true);\r\n              } else if (selected_urban.toLowerCase() === \"rural\") {\r\n                $('input[name=community-type][value=\"rural\"]').prop('checked', true);\r\n              } else {\r\n                $('input[name=community-type][value=\"_none\"]').prop('checked', true);\r\n              }\r\n              if (selected_pop < 5000) {\r\n                $('#community-size option:contains(0 - 5,000)').prop('selected', true);\r\n              } else if (selected_pop < 10000) {\r\n                $('#community-size option:contains(5,000 - 10,000)').prop('selected', true);\r\n              } else if (selected_pop < 25000) {\r\n                $('#community-size option:contains(10,000 - 25,000)').prop('selected', true);\r\n              } else if (selected_pop < 100000) {\r\n                $('#community-size option:contains(25,000 - 100,000)').prop('selected', true);\r\n              } else if (selected_pop < 1000000) {\r\n                $('#community-size option:contains(100,000 - 1,000,000)').prop('selected', true);\r\n              } else {\r\n                $('#community-size option:contains(1,000,000+)').prop('selected', true);\r\n              }\r\n            } else {\r\n              // Reset options if not found in census data\r\n              $('input[name=community-type]').prop('checked', false);\r\n              $('#community-size').val('');\r\n            }\r\n          } else {\r\n            // Reset options if not found in census data\r\n            $('input[name=community-type]').prop('checked', false);\r\n            $('#community-size').val('');\r\n          }\r\n        } else {\r\n          // Reset options if not found in census data\r\n          $('input[name=community-type]').prop('checked', false);\r\n          $('#community-size').val('');\r\n        }\r\n      }\r\n\r\n      var countEnter = 0;\r\n      $('.term-name-checkboxes').on('keyup', function(e) {\r\n        if ((e.which == 13) && (countEnter == 1)) { // Enter key\r\n          $(this).trigger('click');\r\n        }\r\n        else if (e.which == 13 && countEnter == 0) {\r\n          countEnter = countEnter + 1;\r\n        }\r\n      });\r\n\r\n      // Show zip selection options\r\n      $('#change-location').click(function() {\r\n        $zip_select.hide();\r\n        $new_loc_input.val('');\r\n        $loc_add_new.show();\r\n        $choose_zip_holder.hide();\r\n        $cancel_zip.show();\r\n        $choose_city_holder.hide();\r\n        $('#new-location-input').focus();\r\n        return false;\r\n      });\r\n\r\n      // User has found zip they want, show in selected/nearest data\r\n      $('#confirm-zip-select').click(function() {\r\n        changed_city = 'yes';\r\n        selected_zip_code = $('#city-state-lookup-zips').val();\r\n        var selected_location = all_zip_attr[selected_zip_code]['city'];\r\n        setCommunitySizeType(selected_zip_code);\r\n        $location_desc_user.show();\r\n        $nearest_location.text(selected_location + ' (' + selected_zip_code + ')');\r\n        $zip_select.show();\r\n        $loc_add_new.hide();\r\n        $('#nearest-location').prop('tabindex', 0);\r\n        $('#nearest-location').focus();\r\n      });\r\n\r\n      // User has found city they want, show in selected/nearest data\r\n      $('#confirm-city-select').click(function() {\r\n        changed_city = 'yes';\r\n        preferred_name = $('#zip-lookup-city-state').val();\r\n        var selected_location = $new_loc_input.val();\r\n        setCommunitySizeType(selected_location);\r\n        $location_desc_user.show();\r\n        $nearest_location.text(preferred_name + ' (' + selected_location + ')');\r\n        $zip_select.show();\r\n        $loc_add_new.hide();\r\n        $('#nearest-location').prop('tabindex', 0);\r\n        $('#nearest-location').focus();\r\n      });\r\n\r\n      //Hide Zip selection options\r\n      $cancel_zip.click(function() {\r\n        $zip_select.show();\r\n        $loc_add_new.hide();\r\n        $choose_zip_holder.hide();\r\n        $choose_city_holder.hide();\r\n        clear_city_state_error();\r\n        $cancel_zip.hide();\r\n        $('#change-location').focus();\r\n      });\r\n\r\n      $('#add-location').click(function() {\r\n        var location_input = $new_loc_input;\r\n        var location = location_input.val();\r\n        var is_valid_zip = /(^\\d{5}$)|(^\\d{5}-\\d{4}$)|(^\\d{5}-\\d{5}$)/.test(location);\r\n        // regex for city, state code\r\n        var is_city_state = /^[\\w\\s]+,\\s*\\w{2}$/.test(location);\r\n        $('#location-error-message').remove();\r\n        location_input.removeClass('input-error');\r\n        lookupAndProcessLocation(location, location_input);\r\n      });\r\n\r\n      // accepts city, state or zipcodes.\r\n      function lookupAndProcessLocation(location, location_input) {\r\n        var error_message = '';\r\n        $.ajax({\r\n          url: Drupal.settings.basePath + 'return_location_data',\r\n          type: 'POST',\r\n          data: {location: location, initial_login: true},\r\n          success: function(data) {\r\n            var parsed_data = $.parseJSON(data);\r\n            // zip code entered, returned city/state\r\n            if (parsed_data.name_city_state) {\r\n              var city_count = parsed_data.city.length;\r\n              if (city_count == 0) { //Unable to find data for that zip\r\n                error_message = '<span id=\"location-error-message\">The ZIP code you entered could not be found.</span>';\r\n                $loc_add_new.append(error_message);\r\n                location_input.addClass('input-error');\r\n              }\r\n              else if (city_count == 1) { //Only one city/tribal area match\r\n                changed_city = 'yes';\r\n                selected_state = parsed_data.state;\r\n                var parsed_zip = parsed_data.zip;\r\n                // Get city & zip attribute data\r\n                all_zip_attr = parsed_data.zip_attr;\r\n                all_city_attr = parsed_data.city_attr;\r\n                // Update form with new location\r\n                $nearest_location.text(parsed_data.city[0] + ' (' + parsed_zip + ')');\r\n                selected_zip_code = parsed_zip;\r\n                preferred_name = parsed_data.city[0];\r\n                // Set community size & type fields based on census data\r\n                setCommunitySizeType(selected_zip_code);\r\n                $zip_select.show();\r\n                $loc_add_new.hide();\r\n                $choose_city_holder.hide();\r\n              }\r\n              else { //More than one city/tribal area match\r\n                selected_zip_code = parsed_data.zip;\r\n                selected_state = parsed_data.state;\r\n                // Get city & zip attribute data\r\n                all_zip_attr = parsed_data.zip_attr;\r\n                all_city_attr = parsed_data.city_attr;\r\n                // Create a city dropdown for the user to select from\r\n                // Community size/type will be populated based on selection\r\n                var city_select = '<select id=\"zip-lookup-city-state\">';\r\n                $.each(parsed_data.city, function(index, city) {\r\n                  city_select = city_select + '<option value=\"' + city + '\">' + city + '</option>';\r\n                });\r\n                city_select = city_select + '</select>';\r\n                $new_loc_input.val(selected_zip_code);\r\n                $('#choose-city').html(city_select);\r\n                $('#typed-in-city-state').text(location);\r\n                $choose_city_holder.show();\r\n                $('#zip-lookup-city-state').focus();\r\n              }\r\n            }\r\n            else { //Still uses old FRS-style for doing city/state -> zip lookups (i.e. no census data or auto-populating community size/type)\r\n              var zip_array = parsed_data.zip_array;\r\n              var zip_count = zip_array.length;\r\n              if (zip_count == 0) {\r\n                error_message = '<span id=\"location-error-message\">No ZIP codes returned. Are you sure the city and state code were entered correctly? (e.g., Durham, NC)</span>';\r\n                $loc_add_new.append(error_message);\r\n              }\r\n              else if (zip_count == 1) {\r\n                changed_city = 'yes';\r\n                selected_city = parsed_data.city;\r\n                selected_state = parsed_data.state;\r\n                all_zip_attr = parsed_data.zip_attr;\r\n                all_city_attr = parsed_data.city_attr;\r\n                if (selected_state) {\r\n                  preferred_name = selected_city + \", \" + selected_state;\r\n                } else {\r\n                  preferred_name = selected_city;\r\n                }\r\n                selected_zip_code = zip_array[0];\r\n                $location_desc_user.show();\r\n                $nearest_location.text(preferred_name + ' (' + selected_zip_code + ')');\r\n                setCommunitySizeType(selected_zip_code);\r\n                $zip_select.show();\r\n                $loc_add_new.hide();\r\n                $new_loc_input.val('');\r\n              }\r\n              else {\r\n                selected_city = parsed_data.city;\r\n                selected_state = parsed_data.state;\r\n                if (selected_state) {\r\n                  preferred_name = selected_city + \", \" + selected_state;\r\n                } else {\r\n                  preferred_name = selected_city;\r\n                }\r\n                // Get city & zip attribute data\r\n                all_zip_attr = parsed_data.zip_attr;\r\n                all_city_attr = parsed_data.city_attr;\r\n                var zip_select = '<select id=\"city-state-lookup-zips\">';\r\n                $.each(parsed_data.zip_array, function(index, zip_code) {\r\n                  zip_select = zip_select + '<option value=\"' + zip_code + '\">' + zip_code + '</option>';\r\n                });\r\n                zip_select = zip_select + '</select>';\r\n                //$new_loc_input.val(selected_city + ', ' + selected_state);\r\n                $('#choose-zip').html(zip_select);\r\n                $('#typed-in-city-state').text(location);\r\n                $choose_zip_holder.show();\r\n                $('#city-state-lookup-zips').focus();\r\n              }\r\n            }\r\n          },\r\n          failure: function() {\r\n            alert('Was unable to connect to service');\r\n          }\r\n        });\r\n      }\r\n\r\n      function clear_city_state_error() {\r\n        $new_loc_input.removeClass('input-error');\r\n        $('#location-error-message').remove();\r\n      }\r\n\r\n      $org_select.change(function() {\r\n        var val = $(this).find('option:selected').text();\r\n        $local_govern_opts = $('#local-government-options');\r\n        if (val == 'Local government') {\r\n          $local_govern_opts.show();\r\n        }\r\n        else {\r\n          $local_govern_opts.hide();\r\n        }\r\n      });\r\n\r\n      $('#save-preferences').click(function() {\r\n        var interests = [];\r\n        var org_val = $org_select.val();\r\n        var org_text = $org_select.find('option:selected').text();\r\n        var role_val = $('#select-role').val();\r\n        var comm_size_val = 0;\r\n        var comm_type_val = 0;\r\n        if (org_text == 'Local government') {\r\n          var selected_size = $('#community-size').val();\r\n          var type_checkboxes = $('input[name=community-type]:checked');\r\n          if (selected_size != '') {\r\n            comm_size_val = selected_size;\r\n          }\r\n          if (type_checkboxes.length > 0) {\r\n            comm_type_val = type_checkboxes.val();\r\n          }\r\n        }\r\n\r\n        // Collect interests from checkboxes\r\n        $('.term-name-checkboxes:checked').each(function() {\r\n          var current_checkbox = $(this);\r\n          interests.push(current_checkbox.val());\r\n        });\r\n\r\n        // ***********  !  IMPORTANT  !  ***********\r\n        // If save_first_time_user_preferences is updated, please verify that...\r\n        // ... function skipGettingStarted is updated as needed also to pass any variables to...\r\n        // ... Workbench header.\r\n        $.ajax({\r\n          url: Drupal.settings.basePath + 'save_first_time_user_preferences',\r\n          type: 'POST',\r\n          data: {\r\n            skip: 0,\r\n            zip: selected_zip_code,\r\n            preferred_name: preferred_name,\r\n            geolocation_used: geolocation_used,\r\n            geolocation_zip: nearest_zip,\r\n            org: org_val,\r\n            role: role_val,\r\n            comm_size: comm_size_val,\r\n            comm_type: comm_type_val,\r\n            interests: interests\r\n          },\r\n          success: function(msg) {\r\n            var parsed_msg = $.parseJSON(msg);\r\n            $(document).trigger(\"ee:first_time_user_complete\");\r\n            if (parsed_msg.success) {\r\n              $('#location-select').html('<option value=\"' + selected_zip_code + '\" selected>' + preferred_name + ' (' + selected_zip_code + ')</option>').trigger('change');\r\n            }\r\n            else {\r\n              console.log(parsed_msg.error_msg);\r\n            }\r\n            first_time_user_block.dialog('close');\r\n          }\r\n        })\r\n      });\r\n\r\n      first_time_user_block.dialog({\r\n        title: '<span>Getting Started</span>What matters to you?',\r\n        modal: true,\r\n        autoOpen: true,\r\n        width: 1100,\r\n        height: 600,\r\n        //height: auto,\r\n        dialogClass: 'first-time-user-dialog',\r\n        closeOnEscape: false\r\n      });\r\n      $('body').find('.first-time-user-dialog').focus();\r\n\r\n      $('#skip-preferences').on('click', skipGettingStarted);\r\n      // If user presses Escape key\r\n      $(first_time_user_block).on('keydown', function(e) {\r\n        if (e.which === 27) {\r\n          e.stopImmediatePropagation();\r\n          e.preventDefault();\r\n          skipGettingStarted();\r\n          first_time_user_block.dialog('close');\r\n        }\r\n      });\r\n      $(first_time_user_block).parent().on('keydown', function(event) {\r\n        if (event.which === 27) {\r\n          event.stopImmediatePropagation();\r\n          event.preventDefault();\r\n          skipGettingStarted();\r\n          first_time_user_block.dialog('close');\r\n        }\r\n      });\r\n\r\n      $('#switch-to-interests').click(function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        $('.first-time-first-page').hide();\r\n        $('.first-time-second-page').show();\r\n        $('.term-name-checkboxes').filter(\":first\").focus();\r\n        $('.term-name-checkboxes').filter(\":first\").attr('checked', false);\r\n      });\r\n\r\n      $('#switch-to-first-page').click(function() {\r\n        $('.first-time-first-page').show();\r\n        $('.first-time-second-page').hide();\r\n        $org_select.focus();\r\n      });\r\n\r\n      $(window).resize(function() {\r\n        first_time_user_block.dialog(\"option\", \"position\", {my: \"center\", at: \"center\", of: window});\r\n      });\r\n\r\n      // After 5 seconds of inactivity from geolocation show the default\r\n      var timeout = setTimeout(\r\n        function() {\r\n          showDefaultData();\r\n        }, 1000);\r\n      // Try to get local settings via gelocation\r\n      getLocation();\r\n    }\r\n\r\n    function skipGettingStarted() {\r\n      // If user blocks location and skips Getting Started, leave zip and geolocation_zip blank\r\n      var show_zip = '';\r\n      if (geolocation_used == 0 && changed_city == 'no') {\r\n        nearest_zip = '27705';\r\n        preferred_name = 'Durham, NC';\r\n      }\r\n      else {\r\n        nearest_zip = selected_zip_code;\r\n      }\r\n      $.ajax({\r\n        url: Drupal.settings.basePath + 'save_first_time_user_preferences',\r\n        type: 'POST',\r\n        data: {\r\n          skip: 1,\r\n          zip: '',\r\n          geolocation_used: geolocation_used,\r\n          geolocation_zip: nearest_zip,\r\n          preferred_name: preferred_name\r\n        },\r\n        success: function() {\r\n          $(document).trigger(\"ee:first_time_user_complete\");\r\n          $('#location-select').html('<option value=\"' + selected_zip_code + '\" selected>' + preferred_name + ' (' + selected_zip_code + ')</option>').trigger('change');\r\n          $('.pane-views-first-time-user-profile-block').dialog('close');\r\n        }\r\n      });\r\n      return false;\r\n    }\r\n  });\r\n})(jQuery);\r\n"]}