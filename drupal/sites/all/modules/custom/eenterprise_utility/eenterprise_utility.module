<?php
/**
 * Implements hook_menu().
 **/


function eenterprise_utility_menu()
{
  $items = array();
  $items['get_taxonomy_parent_name'] = array(
    'page callback' => 'get_taxonomy_parent_name',
    'access callback' => TRUE,
  );
  $items['load_air_now_us_data'] = array(
    'page callback' => 'load_air_now_us_data',
    'access callback' => TRUE,
  );
  $items['zip_code_lookup'] = array(
    'page callback' => 'zip_code_lookup',
    'access callback' => TRUE,
  );
  $items['test_load_air_now_us_data'] = array(
    'page callback' => 'test_load_air_now_us_data',
    'access callback' => TRUE,
  );
  $items['guest_login'] = array(
    'page callback' => 'guest_login_action',
    'access callback' => TRUE,
  );
  $items['guest_bye'] = array(
    'page callback' => 'guest_logout_action',
    'access callback' => TRUE,
  );


  $items['default_location_zip'] = array(
    'page callback' => 'default_location_zip',
    'access callback' => TRUE,
  );
  $items['admin/config/people/trusted-users'] = array(
    'title' => 'Trusted Users List Settings',
    'description' => 'Manage A Trusted Users List, Switch between using and not using trusted list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('trusted_users_list_settings'),
    'access arguments' => array('administer trusted list'),
    'file' => 'eenterprise_utility_trusted_users.admin.inc',
  );
  $items['admin/config/system/eactivity-dataflow'] = array(
    'title' => 'E-Activity Webservice Endpoint Settings',
    'description' => 'Manage E-Activity Webservice Endpoint Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eactivity_dataflow_list_settings'),
    'access arguments' => array('administer eactivity dataflow'),
    'file' => 'eenterprise_utility_eactivity_dataflow.admin.inc',
  );
  $items['admin/config/system/frs-naas'] = array(
    'title' => 'FRS NAAS Authentication',
    'description' => 'FRS NAAS Token generate and Zip code lookup Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('frs_naas_auth_settings'),
    'access arguments' => array('administer frs naas'),
    'file' => 'eenterprise_utility_frs_naas.admin.inc',
  );
  $items['admin/config/system/cdx-facility-widget'] = array(
    'title' => 'CDX Facility Widget',
    'description' => 'CDX Facility Management Widget Resource Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cdx_facility_widget_settings'),
    'access arguments' => array('administer cdx facility widget'),
    'file' => 'eenterprise_utility_cdx_facility_widget.admin.inc',
  );

  $items['update_user_gridstack_data'] = array(
    'page callback' => 'update_user_gridstack_data',
    'access callback' => TRUE,
  );

  $items['load_user_gridstack_data'] = array(
    'page callback' => 'load_user_gridstack_data',
    'access callback' => TRUE,
  );
  $items['map_dataset'] = array(
    'title' => 'Map Dataset',
    'page callback' => 'map_dataset',
    'access callback' => 'user_is_logged_in',
    '#type' => MENU_CALLBACK,
  );
  $items['sso-cdx-portal'] = array(
    'title' => 'Single Sign on From CDX to Portal',
    'page callback' => 'sso_cdx_portal',
    'access callback' => TRUE,
    '#type' => MENU_CALLBACK,
  );



  return $items;
}


/**
 * Implementation of hook node view.
 * SSO from CDX to Portal is implemented in this hook.
 */
function eenterprise_utility_node_view($node, $view_mode, $langcode)
{
  if (isset($_POST['Token']) && isset($_POST['CDX_DATA'])) {
    $frs_password = variable_get('cdx_facility_password');
    $email = variable_get('cdx_node_token_email');
    $domain = variable_get('cdx_node_token_domain');
    $server_ip = $_POST['CDX_DATA'];
    $wsdl = variable_get('cdx_facility_naas_wsdl');
    $cdx_resource_url = variable_get('cdx_facility_resource_url');
    $validate_client = connectToSOAPServerWithWSDL($wsdl, "Eenterprise Utility");
    if (!$validate_client->error) {
      $validate_parameters = array(
        "userId" => $email,
        "credential" => $frs_password,
        "domain" => $domain,
        "securityToken" => $_POST['Token'],
        "clientIp" => $server_ip,
        "resourceURI" => $cdx_resource_url,
        "applicationId" => "",
        "userProperties" => "",
      );
      $validate_response = callSOAPWithParams($validate_client->client,
        "Validate",
        $validate_parameters,
        "Eenterprise Utility");
      if (!$validate_response->error) {
        $response = $validate_response->response;
        if (isset($response->return)) {
          parse_str($response->return, $return_output);
          perform_user_login($return_output);//authenticate user and login to drupal
          if (isset($_GET['destination']))
            drupal_goto("/" . $_GET['destination']);
          else
            drupal_goto("/");
        }
      } else
        drupal_goto("/");
    } else {
      drupal_goto("/");
    }
  }
}


function perform_user_login($response_output)
{
  global $user;
  $username = $response_output['userId'];
  $ext_user = user_external_load_custom($username);
  if ($ext_user === FALSE) {
    $ext_user = user_external_load($username);
  }
  if (!$ext_user) {
    user_external_login_register($username, 'eenterprise_utility');
    if ($user) {
      user_save($user, array('mail' => trim($response_output['email'], '"')));
      //if user is public user
      if ($response_output['issuer'] == 'urn:ENNAAS' || $response_output['issuer'] == 'urn:NAAS') {
        //assign_roles_to_user($username);
        $_SESSION['cdx_fmw_security_token'] = $_POST['Token'];
        $_SESSION['userId'] = $username;
        $_SESSION['login_timestamp'] = time();
        $public_or_cdx = 'cdx';
      } else {
        $user_role = user_role_load_by_name('Public User');
        user_multiple_role_edit(array($user->uid), 'add_role', $user_role->rid);
        $public_or_cdx = 'public';
      }
      $_SESSION['cdx_user_type'] = $public_or_cdx;
    }
  } else {
    //If user is already registered, and authenticated through EPA Bridge, skip registration and just log the user in.
    $user = $ext_user;
    $form_state['uid'] = $user->uid;

    user_login_submit(array(), $form_state);
    //To fix a bug where email address is not updated after users update their email address in CDX and login.
    user_save($user, array('mail' => trim($response_output['email'], '"')));
    try {
      if ($response_output['issuer'] == 'urn:ENNAAS' || $response_output['issuer'] == 'urn:NAAS') {
        $_SESSION['cdx_fmw_security_token'] = $_POST['Token'];
        $_SESSION['userId'] = $username;
        $_SESSION['login_timestamp'] = time();
        $public_or_cdx = 'cdx';
      } else {
        $user_role = user_role_load_by_name('Public User');
        user_multiple_role_edit(array($user->uid), 'add_role', $user_role->rid);
        $public_or_cdx = 'public';
      }
      $_SESSION['cdx_user_type'] = $public_or_cdx;

    } catch (Exception $e) {
      watchdog('eenterprise_utility', "Error 0014: General Exception", array(), WATCHDOG_ERROR);
    }
  }
}

/**
 * returns a user object based on the external authentication source,
 * or FALSE if not found.
 *
 * This is exactly the same implementation as Drupal 7's user_external_load function
 * except the where clause in the query is changed to accommodate Unique username resolution put in place..
 */
function user_external_load_custom($authname)
{
  $uid = db_query("SELECT uid FROM {authmap} WHERE authname LIKE :authname", array(':authname' => '%' . db_like($authname) . '_Via_%'))->fetchField();
  if ($uid) {
    return user_load($uid);
  } else {
    return FALSE;
  }
}

/**
 * returns a map Dataset, formated as JSON.
 */
function map_dataset()
{
  $agency_map_datasets = views_get_view_result("agency_map_list");
  $mapset = array();
  foreach ($agency_map_datasets as $dataset) {
    $temp_dataset = array();
    $temp_dataset['id'] = $dataset->field_field_id[0]['rendered']['#markup'];
    $temp_dataset['alias'] = $dataset->field_field_ee_agency_map_agency[0]['rendered']['#title'];
    $temp_dataset['contactemail'] = $dataset->field_field_ee_agency_map_email[0]['rendered']['#markup'];
    $temp_dataset['url'] = $dataset->field_field_ee_agency_map_url[0]['rendered']['#title'];
    $temp_dataset['orgid'] = $dataset->field_field_orgid[0]['rendered']['#markup'];
    array_push($mapset, $temp_dataset);
  }
  $mapset = array('mapsets' => $mapset);
  drupal_add_http_header('Content-Type', 'application/json');
  echo drupal_json_encode($mapset);
}

/**
 * Implements hook_permission().
 */
function eenterprise_utility_permission()
{
  return array(
    'administer trusted list' => array(
      'title' => t('Administer Trusted Users List'),
      'description' => t('Change settings for enabling and disabling the usage of trusted users list for authentication.'),
    ),
    'administer eactivity dataflow' => array(
      'title' => t('Administer E-Activity Dataflow Settings'),
      'description' => t('Change E-Activity Webservice Endpoint Settings.'),
    ),
    'administer frs naas' => array(
      'title' => t('Administer FRS NAAS Settings'),
      'description' => t('Change FRS NAAS Settings.'),
    ),
    'administer cdx facility widget' => array(
      'title' => t('Administer CDX Facility Widget Settings'),
      'description' => t('Change CDX Facility Widget Settings.'),
    ),
  );
}

/**
 * @param $view
 * Implementation of hook_views_pre_render
 * Hide filters when views result is empty.
 */
function eenterprise_utility_views_pre_render(&$view)
{
  if ($view->name == 'progress_tracker' || $view->name == 'to_do') {
    if (empty($view->result) && empty($view->exposed_input)) {
      $view->exposed_widgets = NULL;
    }
  }
  if ($view->name == 'app_connect_new') {
    print drupal_render(drupal_get_form('app_connect_sso_form'));
  }
}

function app_connect_sso_form($form, &$form_state)
{
  $form['app-connect-sso-form']['security_token'] = array(
    '#type' => 'hidden',
    '#name' => 'security_token',
    '#value' => $_SERVER['SERVER_ADDR'],
  );
  $form['app-connect-sso-form']['client_ip'] = array(
    '#type' => 'hidden',
    '#name' => 'client_ip',
    '#value' => $_SESSION['cdx_fmw_security_token'],
  );
  $form['#action'] = variable_get('attains_destination_url');
  return $form;
}


/*
 * A function that simple sets a session variable so the user's default location or
 * selected location is remembered
 */
function default_location_zip()
{
  $_SESSION['default_location_zip'] = xssafe($_POST['zip']);
  $_SESSION['default_location_name'] = xssafe($_POST['name']);
}


/*
 * A function that implements guest login capability. Login a guest using a pre-defined username, role and password
 * The role will restrict the user from accessing parts of the portal guests are not supposed to access.
 */
function guest_login_action()
{
  global $user;
  if ($user->uid != 0)
    drupal_goto("/");
  else {
    $uid = user_authenticate("guest-user", "Gu35t_u53r!!");
    $user = user_load($uid);
    watchdog('guest_user', 'Session opened for %name.', array('%name' => $user->name));
    $user->login = REQUEST_TIME;
    variable_set('cdx_user_type', 'public');
    db_update('users')
      ->fields(array('login' => $user->login))
      ->condition('uid', $user->uid)
      ->execute();
    drupal_session_regenerate();
    //drupal_goto('/workbench', array('query' => array('dest' => 'guest_login')));
    drupal_goto("/");
  }
}

/*
 * Logout a guest user.
 */
function guest_logout_action()
{
  module_load_include('pages.inc', 'user');
  user_logout();
  drupal_goto("/");
}

function load_air_now_us_data($url = 'http://www.epa.gov/airnow/today/cityzipcodes.csv', $url_bool = false)
{
  // set php.ini max execution to 1500 temporarily for this processing
  ini_set('max_execution_time', 1500);
  $start = microtime(true);
  $csvData = file_get_contents($url, $url_bool);
  $lines = explode(PHP_EOL, $csvData);
  if (count($lines) <= 1) {
    echo '<p> There was no data available in online resource</p>';
    //first check if db has been updated, then no changes need to be made
    $results = db_select('air_now_city_zip_codes')->fields(NULL, array('zipcode'))->execute()->fetchAll();
    $count = count($results);
    if ($count == 0) { // no data in db, update from local
      echo '<p> There is no Air Now data loaded in the database, loading from local file.</p>';
      $csvData = file_get_contents('cityzipcodes.csv', true);
      $lines = explode(PHP_EOL, $csvData);
    } else { //No need to change anything, database has results and nothing from data source
      echo '<p> There is already Air Now data, no update needed.</p>';
      ini_set('max_execution_time', 150);
      exit();
    }
  }
  // clear table
  echo '<p> emptying previous results for latest data from resource. </p>';
  db_truncate('air_now_city_zip_codes')->execute();
  // insert new data
  $first_line = $lines[0];
  // Check resource column order
  if ($first_line != 'City|State|Zipcode|Latitude|Longitude,') {
    exit();
  }
  foreach (array_slice($lines, 1) as $line) {
    // Data returned of format City|State|Zipcode|Latitude|Longitude
    $data_line = str_getcsv($line, '|');
    if ($data_line[3] == '') {
      $data_line[3] = NULL;
    }
    if ($data_line[4] == '') {
      $data_line[4] = NULL;
    }
    if ($data_line[0] != '') {
      db_insert('air_now_city_zip_codes')// Table name no longer needs {}
      ->fields(array(
        'City' => $data_line[0],
        'State' => $data_line[1],
        'Zipcode' => $data_line[2],
        'Latitude' => (float)$data_line[3],
        'Longitude' => (float)$data_line[4],
      ))->execute();
    }
  }
  $time_elapsed_secs = microtime(true) - $start;
  echo '<p> the database has been updated in' . $time_elapsed_secs . ' seconds';
  $results = db_select('air_now_city_zip_codes')->fields(NULL, array('zipcode'))->execute()->fetchAll();
  $count = count($results);
  echo '<p> Table air_now_city_zip_codes now has ' . $count . ' rows.</p>';
  ini_set('max_execution_time', 150);
}

/**
 * Uses tid to look up json array
 * @param $tid
 * returns json {parents : [parents, ...], vid: [vids, ...]}
 */
function get_taxonomy_parent_name($tid)
{
  $data_array = array();
  $parents_array = array();
  $vid = '';
  $parents = taxonomy_get_parents_all($tid);
  foreach ($parents as $key => $value) {
    $parents_array[] = [$value->tid, $value->name];
    $vid = $value->vid;
  }
  $data_array['parents'] = $parents_array;
  $data_array['vid'] = $vid;
  echo json_encode($data_array);
}

/**
 * Returns a user preferred name for a given zip.
 *
 * @param $zip_lookup
 * @param $zip
 * @param $lookup_names
 * @return bool|int|string
 *
 * Keeps track of names already found in $lookup_names.
 * $zip_lookup is the user zip data to find the name-> zip matching
 * $zip is the zipcode used to search for name.
 */
function name_look_up($zip_lookup, $zip_search, &$lookup_names)
{
  foreach ($zip_lookup as $name => $location_data) {
    foreach ($location_data as $zip => $zip_data) {
      if ($zip_search != $zip) {
        continue;
      }
      if (!isset($lookup_names[$name])) {
        $lookup_names[$name] = array();
      }
      // Check if zip and name has already been used
      if (!in_array($zip, $lookup_names[$name])) {
        $lookup_names[$name][] = $zip;
        return $name;
      }

    }
  }
  return FALSE;
}

function eenterprise_utility_form_alter(&$form, &$form_state, $form_id)
{
  global $user;

  /**
   * Map Set Form
   */
  //Hide title from Map Set form
  if ($form['#form_id'] == 'ee_map_set_node_form') {
    $form['title']['#default_value'] = t('Map Set Value');
    hide($form['title']);
  }

  /**
   * Guest User Profile Form
   */
  //Prevent guest user from accessing account edit page.
  if (($form['#form_id'] == 'user_profile_form') && ($form['#user']->name == 'guest-user')) {
    drupal_goto("/");
  }

  /**
   * Public User Profile Form
   */
  if ($form['#form_id'] == 'user_profile_form' && (in_array('Public User', $user->roles) && count($user->roles) == 2)) {
    hide($form['account']['mail']);
    $form['account']['mail']['#access'] = FALSE;
  }

  /**
   * User Profile Form
   */
  if ($form['#form_id'] == 'user_profile_form') {
    drupal_session_start();

    /**
     * Hide user metadata or deprecated user fields
     */
    hide($form['picture']);
    hide($form['account']['current_pass']);
    hide($form['account']['pass']);
    hide($form['field_profile_interests']);
    hide($form['field_profile_last_name']);
    hide($form['field_initial_log_in']);
    hide($form['field_interests2']);
    hide($form['field_gridstack_settings']);
    hide($form['field_lgc_topics_of_interest']);
    // If user is admin allow to edit state admin STATE and toggle user's first time status
    if ($user->uid > 1) {
      hide($form['field_admin_state']);
      hide($form['field_first_time_user']);
    } else {
      // Set description for admin
      $form['field_admin_state'][LANGUAGE_NONE][0]['value']['#title'] = "State code, tribe name, or 'US EPA'";
      $form['field_first_time_user'][LANGUAGE_NONE]['#title'] = "Reset User as First Time Login for Testing";
    }
    // only admins see the Terms of Use Agreed Date field
    if (!user_access('administer site configuration')) {
      hide($form['field_terms_of_use_agreed'][LANGUAGE_NONE]);
    }

    /**
     * User Preferred Locations
     */
    // Load user preferences for zips from Session if has been updated in user form,
    // otherwise from db
    // Also load if no triggering element, meaning refreshed

    // Check if user has added preferred names for zips
    $zip_deltas = array();
    if (isset($form_state['input']['zip_mapping'])) {
      $zip_mapping = json_decode($form_state['input']['zip_mapping'], TRUE);
      // Create zip_mapping with delta as the key
      foreach ($zip_mapping as $name => $zip_data) {
        foreach ($zip_data as $zip => $data) {
          $zip_deltas[$data['delta']] = array('name' => $name, 'zip' => $zip, 'comm' => $data['comm'], 'urban' => $data['urban']);
        }
      }
    } else {
      $zip_mapping = load_user_preferred_zips();
    }

    $form['zip_mapping'] = array(
      '#title' => t('Zip Mapping'),
      '#type' => 'textfield',
      '#validated' => true, // allows for javascript editing value
    );

    //Edit select default options
    $form['field_community_type'][LANGUAGE_NONE]['#options']['_none'] = t('N/A');
    $form['field_community_size'][LANGUAGE_NONE]['#options']['_none'] = t('Select size');
    /**
     * User Email
     */
    if (empty($form['account']['mail']['#default_value'])) {
      $form['account']['mail']['#default_value'] = $form['#user']->name;
    }
    $form['account']['mail']['#attributes'] = array(
      'disabled' => 'disabled',
      'aria-describedby' => 'email-helptext'
    );
    $form['account']['mail']['#required'] = false;
    $form['account']['mail']['#title'] = 'Email Address <span tabindex="0" data-toggle="tooltip" data-placement="bottom" aria-hidden="true" id="email-helptext" class="fa fa-info-circle ee-bootstrap-tooltip"
            title="All emails from the system will be sent to this address. This email address will not be made public and will only be used if you have indicated that you wish to receive news or notifications by email. Any edits to your email address must be done through the provider for which your log-in credentials are associated (e.g., Yahoo, CDX)."> </span>';

    /**
     * Validation of Form
     */
    $form['#validate'][] = 'user_profile_form_custom_validate';
    //We are not validating profile picture and password as we do not save and manage these information on the Portal.
    foreach ($form['#validate'] as $key => $val) {
      if ($val == 'user_validate_current_pass' || $val == 'user_validate_picture') {
        unset($form['#validate'][$key]);
      }
    }
    //remove user_account_form_validate callback. This will remove email address validation
    // because we should allow multiple email addresses as CDX/Bridge allows that.
    foreach ($form['#validate'] as $key => $value) {
      if ($value == 'user_account_form_validate') {
        unset($form['#validate'][$key]);
      }
    }

    /**
     * Button Actions
     */
    $form['#submit'][] = 'eenterprise_utility_profile_form_submit';
    $form['actions']['delete'] = array('#type' => 'submit', '#value' => 'Delete profile');
    $form['actions']['delete']['#attributes']['class'][] = 'usa-button usa-button-outline';
    $form['actions']['delete']['#submit'][] = 'profile_delete_action';
    // When use delete last zip code or url, do not repopulate with previous saved zip
    if (isset($form_state['triggering_element'])) {
      $trigger_string = $form_state['triggering_element']['#name'];
      $trigger_array = explode('_', $trigger_string);
      if (in_array('zip', $trigger_array) && $trigger_array[5] == 'remove') {
        $index_to_remove = $trigger_array[4];
        unset($zip_deltas[$index_to_remove]);
        // Remove index/delta deleted from form
        unset($form_state['build_info']['args'][0]->field_zip_code[LANGUAGE_NONE][$index_to_remove]);

        // Update build info with new delta information, clearing any gaps
        $iter = 0;
        foreach ($form_state['build_info']['args'][0]->field_zip_code[LANGUAGE_NONE] as $index => $data) {
          if ($index != $iter) {
            // Reassign to $iter
            $form_state['build_info']['args'][0]->field_zip_code[LANGUAGE_NONE][$iter] = $data;
            unset($form_state['build_info']['args'][0]->field_zip_code[LANGUAGE_NONE][$index]);
          }
          $iter++;
        }
        // Update zip deltas with deleted info
        $iter = 0;
        foreach ($zip_deltas as $index => $data) {
          if ($index != $iter) {
            // Reassign to $iter
            $zip_deltas[$iter] = $data;
            unset($zip_deltas[$index]);
          }
          $iter++;
        }
      }
      if ($trigger_string == 'field_profile_favourites_' . LANGUAGE_NONE . '_0_remove_button') {
        $form['field_profile_favourites'][LANGUAGE_NONE][0]['field_title'][LANGUAGE_NONE][0]['value']['#default_value'] = '';
        $form['field_profile_favourites'][LANGUAGE_NONE][0]['field_url'][LANGUAGE_NONE][0]['value']['#default_value'] = '';
      }
    }

    /**
     * Add More Buttons
     */
    // add more button for zip codes
    $form['field_zip_code'][LANGUAGE_NONE]['add_more']['#value'] = 'New location';
    $form['field_zip_code'][LANGUAGE_NONE]['add_more']['#prefix'] = '<div class="add_more_holder">';
    $form['field_zip_code'][LANGUAGE_NONE]['add_more']['#suffix'] = '</div>';
    $form['field_zip_code'][LANGUAGE_NONE]['add_more']['#name'] = 'add_zip_code';
    $form['field_zip_code'][LANGUAGE_NONE]['add_more']['#default_value'] = 'add_zip_code';


    //Add more button for urls
    $form['field_profile_favourites'][LANGUAGE_NONE]['add_more']['#value'] = 'New favorite';
    $form['field_profile_favourites'][LANGUAGE_NONE]['add_more']['#prefix'] = '<div class="add_more_holder">';
    $form['field_profile_favourites'][LANGUAGE_NONE]['add_more']['#suffix'] = '</div>';
    $form['field_profile_favourites'][LANGUAGE_NONE]['add_more']['#name'] = 'add_url';
    $form['field_profile_favourites'][LANGUAGE_NONE]['add_more']['#default_value'] = 'add_url';

    /**
     * Favorite URL Settings
     */
    for ($delta = 0; $delta <= intval($form['field_profile_favourites'][LANGUAGE_NONE]['#max_delta']); $delta++) {
      $form['field_profile_favourites'][LANGUAGE_NONE][$delta]['actions']['remove_button']['#value'] = 'x';
      $form['field_profile_favourites'][LANGUAGE_NONE][$delta]['actions']['remove_button']['#attributes']['class'][] = 'multiple-fields-remove-button';
      $form['field_profile_favourites'][LANGUAGE_NONE][$delta]['actions']['remove_button']['#attributes']['title'] = 'Remove favorite';
      $date_value = $form['field_profile_favourites'][LANGUAGE_NONE][$delta]['field_date_updated'][LANGUAGE_NONE][0]['#default_value']['value'];
      $date_updated = date_create($date_value);
      $date_updated = date_format($date_updated, 'm/d/Y');
      $form['field_profile_favourites'][LANGUAGE_NONE][$delta]['field_title']['#suffix'] = '<span class="date_updated_contain">' . $date_updated . '</span>';
    }

    /**
     * Zip Code Settings
     */
    $form['field_zip_code'][LANGUAGE_NONE]['#title'] = "Enter city, state; tribe; or ZIP code";
    // Keeps track of used names and zips to check for duplicates
    $used_preferred_names = array();
    // List of used names so they are not used again.
    $lookup_names = array();

    for ($delta = 0; $delta <= intval($form['field_zip_code'][LANGUAGE_NONE]['#max_delta']); $delta++) {
      $duplicate = false;
      $zip = $form['field_zip_code'][LANGUAGE_NONE][$delta]['field_field_zip_code'][LANGUAGE_NONE][0]['value']['#default_value'];

      // Check if input has been made
      if (isset($zip_deltas[$delta])) {
        $zip = xssafe($zip_deltas[$delta]['zip']);
        // Setting input manually here in case overwritten by disabled input bug
        $form['field_zip_code'][LANGUAGE_NONE][$delta]['field_field_zip_code'][LANGUAGE_NONE][0]['value']['#default_value'] = $zip;
      }

      // Aria-describedby to associate city, state name in suffix <span> with input field
      $form['field_zip_code'][LANGUAGE_NONE][$delta]['field_field_zip_code'][LANGUAGE_NONE][0]['value']['#attributes']['aria-describedby'] = 'city-name-' . $delta;
      if (isset($zip) && $zip != '') {
        // returns false if not found
        if (isset($zip_deltas[$delta])) {
          $name = $zip_deltas[$delta]['name'];
        } else {
          $name = name_look_up($zip_mapping, $zip, $lookup_names);
        }

        if (!$name) {
          // no preferred name found, use zip_code_lookup
          $zip_data = zip_code_lookup($zip);
          $name = $zip_data['string'];
        }

        if (!isset($used_preferred_names[$name])) {
          $used_preferred_names[$name] = array();
        }
        if (!in_array($zip, $used_preferred_names[$name])) {
          $used_preferred_names[$name][] = $zip;
        } else {
          $duplicate = true;
        }

        if ($duplicate) {
          $field_suffix = '<span id="zip-code-error" class="field-suffix error">' .
            'Duplicate location name (' . $name . ') and zip code pairs are not allowed.</span>';
          $ariacity = '';
        } else {
          $field_suffix = '<span id="city-name-' . $delta . '" aria-live="polite">' . $name . '</span>';
          $ariacity = $name;
        }

      } else {
        $field_suffix = '';
        $ariacity = '';
      }
      // Placeholder
      $form['field_zip_code'][LANGUAGE_NONE][$delta]['field_field_zip_code'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = 'Enter city, state; tribe; or ZIP code';
      // Remove button
      $form['field_zip_code'][LANGUAGE_NONE][$delta]['actions']['remove_button']['#value'] = 'x';
      $form['field_zip_code'][LANGUAGE_NONE][$delta]['actions']['remove_button']['#attributes']['title'] = 'Remove ' . $zip . ' ' . $ariacity . ' from locations';
      $form['field_zip_code'][LANGUAGE_NONE][$delta]['field_field_zip_code'][LANGUAGE_NONE][0]['value']['#field_prefix'] = '<label class="element-invisible">' . $zip . '</label>';
      $form['field_zip_code'][LANGUAGE_NONE][$delta]['actions']['remove_button']['#attributes']['class'][] = 'multiple-fields-remove-button';
      $form['field_zip_code'][LANGUAGE_NONE][$delta]['field_field_zip_code'][LANGUAGE_NONE][0]['remove_button']['#attributes']['title'] = 'Remove';
      $form['field_zip_code'][LANGUAGE_NONE][$delta]['field_field_zip_code'][LANGUAGE_NONE][0]['value']['#attributes']['class'][] =
        'field_zip_code';
      $form['field_zip_code'][LANGUAGE_NONE][$delta]['field_field_zip_code'][LANGUAGE_NONE][0]['value']['#field_suffix'] =
        $field_suffix;

      hide($form['field_zip_code'][LANGUAGE_NONE][$delta]['field_field_zip_code'][LANGUAGE_NONE][0]['#title']);
    }
    /**
     * Terms of Use Agreed Date Field
     */
    $form['field_terms_of_use_agreed'][LANGUAGE_NONE]['#theme'] = 'eenterprise_utility_terms_of_use_agreed_date_display';
    $form['field_terms_of_use_agreed'][LANGUAGE_NONE]['#disabled'] = TRUE;
  } // end user form
}

function eenterprise_utility_profile_form_submit($form, &$form_state)
{

  // if Reset User as First Time Login for Testing is checked, clear user agreement signed as well
  if ($form_state['values']['field_first_time_user'][LANGUAGE_NONE][0]['value'] === 1) {
    global $user;
    $user_data = user_load($user->uid);
    $agreed = array();
    $edit = array('field_terms_of_use_agreed' => $agreed);
    user_save($user_data, $edit);
  }

  /*
   * Save user preferences based on Session
   */
  $zip_mapping = json_decode($form_state['values']['zip_mapping'], TRUE);
  clear_user_preferred_locations();
  foreach ($zip_mapping as $name => $location_data) {
    foreach ($location_data as $zip => $zip_data) {
      $commsize = $zip_data['commsize'];
      $isurban = $zip_data['isurban'];
      $primary = $zip_data['primary'];
      // Set default zip location data for workbench select
      if ($primary == 1) {
        $_SESSION['default_location_zip'] = $zip;
        $_SESSION['default_location_name'] = $name;
      }
      save_user_location($zip, $name, $commsize, $isurban, $primary);
    }
  }
}


function load_user_preferred_zips()
{
  global $user;
  $user_zips = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'user_location_preferences')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyCondition('uid', $user->uid);
  $result = $query->execute();
  if (isset($result['node'])) {
    foreach ($result['node'] as $node) {
      $nid = $node->nid;
      $node = node_load($nid);
      $name = $node->field_preferred_name[LANGUAGE_NONE][0]['value'];
      $zip = $node->field_user_zip_code[LANGUAGE_NONE][0]['value'];
      // Set primary value
      if (isset($node->field_primary[LANGUAGE_NONE]) && $node->field_primary[LANGUAGE_NONE][0]['value'] == 1) {
        $user_zips[$name][$zip]['primary'] = 1;
      } else {
        $user_zips[$name][$zip]['primary'] = 0;
      }
      // Set zip code
      // $user_zips[$name]['zip'] = $node->field_user_zip_code[LANGUAGE_NONE][0]['value'];
    }
  }
  return $user_zips;

}


// Params: zip code integer
// Returns Assoc Array( city => , state => , latitude => , longitude => )
// can be called by ajax with url arguments ?zip=_____
function zip_code_lookup($unparsed_zip = NULL, $return_data_type = 'php', $initial_login = false)
{
  $readable_string = '';
  $zip_data = array();
  $error = true;

  if (isset($_GET['zip'])) {
    $unparsed_zip = xssafe($_GET['zip']);
    $return_data_type = 'json';
  }

  // Test location to find if city, state or zip code
  $is_zip_code = preg_match("/(^\d{5}$)|(^\d{5}-\d{4}$)|(^\d{5}-\d{5}$)/", $unparsed_zip);
  $is_city_state = preg_match("/^[\w\s]+,\s*\w{2}$/", $unparsed_zip);
  if ($is_zip_code === 0 && $is_city_state === 0) {
    $error_message = 'Please input a valid ZIP code or a city and state code separated by a comma (e.g., Durham, NC)';
    $zip_data = array(
      'state' => '',
      'city' => '',
      'latitude' => '',
      'longitude' => '',
      'zip' => '',
      'zip_attr' => '',
      'city_attr' => '',
      'string' => $error_message,
      'error' => $error
    );
  } else {
    // Test if zip code (and not city, state)
    $validation = postal_code_validation_validate($unparsed_zip, 'US');
    if (!$validation['error']) {
      // only send first 5 digits to frs return
      $zip = substr($validation['postal_code'], 0, 5);
      $frs_city_state_return = frs_zip_code_to_city_state($zip);
      $frs_lat_long_return = frs_zip_code_to_lat_long($zip);

      if ($initial_login) {
        // If initial login, use new style zip/city lookup

        $zip_data = array(
          'city' => '',
          'latitude' => '',
          'longitude' => '',
          'zip_attr' => '',
          'city_attr' => '',
          'zip' => $zip,
        );

        // Get Zip Code to Census Place/Population Lookup table as json
        $zip_pop_url = 'https://services.arcgis.com/cJ9YHowT8TU7DUyn/arcgis/rest/services/ZipToCensusPlaceLookup_WFL/FeatureServer/1/query?';
        $zip_pop_url = $zip_pop_url . 'where=ZCTA%3D%27' . $zip . '%27&outFields=*&orderByFields=Place_Pop_2014_ACS2014&f=pjson';

        // Decode  json
        $json_file = file_get_contents($zip_pop_url);
        $result = json_decode($json_file);

        // If Zip->Census Place had results:
        if (!empty($result->features)) {
          $city_attr = array();
          $city_list = array();
          $zip_attr = array();

          // Loop through all Census Places for the specified zip
          foreach ($result->features as $feature) {
            if (!empty($feature->attributes->NAME_LABEL)) {
              // If the table has a placename, record that as the preferred name, along with its population
              $city_list[] = $feature->attributes->NAME_LABEL;
              $city_attr[$feature->attributes->NAME_LABEL] = array(
                "pop" => $feature->attributes->Place_Pop_2014_ACS2014
              );
            }
            // Also record the zip code's population and urban/rural status
            $zip_attr[$feature->attributes->ZCTA] = array(
              "pop" => $feature->attributes->Zip_Pop2014_ACS5,
              "urban" => $feature->attributes->Urban,
            );
          }

          $zip_data['city'] = $city_list;
          $zip_data['city_attr'] = $city_attr;
          $zip_data['zip_attr'] = $zip_attr;
        }

        // Get Zip Code to Tribal Area Lookup table as json
        $zip_tribe_url = 'https://services.arcgis.com/cJ9YHowT8TU7DUyn/arcgis/rest/services/ZipToTribalLookups_WFL/FeatureServer/1/query?';
        $zip_tribe_url = $zip_tribe_url . 'where=ZCTA%3D%27' . $zip . '%27&outFields=*&f=pjson';

        // Decode  json
        $json_file = file_get_contents($zip_tribe_url);
        $result = json_decode($json_file);

        // If tribal area was found in this zip:
        if (!empty($result->features)) {
          foreach ($result->features as $feature) {
            // If the table has a placename, record that as the preferred name
            $zip_data['city'][] = $feature->attributes->TRIBE_NAME_CLEAN;
          }
        }

        // Use FRS to find lat & long of zipcode
        if (isset($frs_lat_long_return['lat']) && isset($frs_city_state_return['state'])) {
          $zip_data['latitude'] = $frs_lat_long_return['lat'];
          $zip_data['longitude'] = $frs_lat_long_return['long'];
          $frs_city = $frs_city_state_return['city'] . ", " . $frs_city_state_return['state'];
          // Also, if no preferred name has been found yet, use FRS city/state
          if (!in_array($frs_city, $zip_data['city']) and strlen($frs_city_state_return['city']) != 0) {
            $zip_data['city'][] = $frs_city;
          }
        }
      } else {
        // If not intial login, revert to old way of doing zip/city lookups
        if (isset($frs_lat_long_return['lat']) && isset($frs_city_state_return['state'])) {
          $zip_data = array(
            'state' => $frs_city_state_return['state'],
            'city' => $frs_city_state_return['city'],
            'latitude' => $frs_lat_long_return['lat'],
            'longitude' => $frs_lat_long_return['long'],
            'zip' => $zip,
          );
        }
        $location_info = return_user_preferred_location($zip);
        // First find if there is a preferred name associated with this location
        if ($location_info) {
          $users_preferred_name = $location_info['preferred_name'];
          if (strlen($users_preferred_name) != 0) {
            $readable_string = $users_preferred_name;
            $zip_attr[$zip] = array(
              "pop" => $location_info['commsize'],
              "urban" => $location_info['isurban'],
            );
            $zip_data['zip_attr'] = $zip_attr;
            $error = false;
          } else if (strlen($zip_data['city']) != 0) {
            $readable_string .= $zip_data['city'] . ', ' . $zip_data['state'];
            $error = false;
          }
        } else if (strlen($zip_data['city']) != 0) {
          $readable_string .= $zip_data['city'] . ', ' . $zip_data['state'];
          $error = false;
        }
        $zip_data['string'] = $readable_string;
        $zip_data['error'] = $error;
      }
    }
  }
  if ($return_data_type == 'php') {
    return $zip_data;
  } else {
    print json_encode($zip_data);
  }

}


/**
 * @param $form
 * @param $form_state
 * Custom validation for user information, called when form is submitted.
 */
function user_profile_form_custom_validate(&$form, &$form_state)
{
  user_profile_zipcode_custom_validate($form, $form_state);
  user_profile_url_custom_validate($form, $form_state);
}


/**
 * @param $form
 * @param $form_state
 * Custom validate for zip code.
 */
function user_profile_zipcode_custom_validate(&$form, &$form_state)
{
  // Validates even if javascript validation failed on form submit
  $error = false;
  $error_messages = array();
  $error_deltas = array();
  $site_default_zip = 27705;
  $blank_zipcode = true;

  // Site default zip Occurs when all values are blank.
  // overrides if user has save geolocation zip
  global $user;
  $user_data = user_load($user->uid);
  $user_initial_login = $user_data->field_initial_log_in;
  $geolocation_used = (int)$user_initial_login[LANGUAGE_NONE][0]['field_geolocation'][LANGUAGE_NONE][0]['value'];
  $initial_zip = $user_initial_login[LANGUAGE_NONE][0]['field_default_zip_code'][LANGUAGE_NONE][0]['value'];


  if (!isset($form_state['input']['field_zip_code'])) {
    $form_state['values']['field_zip_code'][LANGUAGE_NONE][0]['field_field_zip_code'][LANGUAGE_NONE][0]['value'] = $site_default_zip;
    $form_state['values']['field_zip_code'][LANGUAGE_NONE][0]['field_field_primary'][LANGUAGE_NONE][0]['value'] = 1;
    return;
  }

  if (isset($geolocation_used) && $geolocation_used) {
    $site_default_zip = $initial_zip;
  }

  // User has entered a zipcode
  $count_zips = count($form_state['values']['field_zip_code'][LANGUAGE_NONE]) - 1;


  foreach ($form_state['values']['field_zip_code'][LANGUAGE_NONE] as $delta => $field) {
    if (!is_array($field) || !is_numeric($delta)) {
      continue; // Skip to next value
    }

    // Assign by reference
    $zip_code_form =& $form['field_zip_code'][LANGUAGE_NONE][$delta];
    $zip_code_input =& $form_state['input']['field_zip_code'][LANGUAGE_NONE][$delta];
    $zip_code_value =& $form_state['values']['field_zip_code'][LANGUAGE_NONE][$delta];

    // Check input and values for blank value, set to null if blank
    if (trim($zip_code_value['field_field_zip_code'][LANGUAGE_NONE][0]['value']) == '' ||
      trim($zip_code_input['field_field_zip_code'][LANGUAGE_NONE][0]['value']) == ''
    ) {
      $zip_code_value = null;
      $zip_code_form = null;
      $zip_code_input = null;
      continue;
    }

    // Zip code is not blank
    $zip_val = $zip_code_value['field_field_zip_code'][LANGUAGE_NONE][0]['value'];
    // Check length of zip greater than 0
    if (strlen($zip_val) <= 0) {
      continue;
    }

    // Check if valid format
    $valid_zip = postal_code_validation_validate($zip_val, 'US');
    if ($valid_zip['error']) {
      $error = true;
      $error_message = "Invalid ZIP code. Please enter a United States ZIP code " .
        "in one of the following formats, '99999,' '99999-9999,' or '99999-999999,'" .
        "or a city and state code separated by a comma (e.g., Durham, NC).";
      // Set field_suffix for field
      $field_suffix = '<span id="zip-code-error" class="field-suffix error">' . $error_message . '</span>';
      $zip_code_form['field_field_zip_code'][LANGUAGE_NONE][0]['value']['#field_suffix'] = $field_suffix;
      $zip_code_value['field_field_zip_code'][LANGUAGE_NONE][0]['value']['#field_suffix'] = $field_suffix;
      // Clear city details from field
      //  $form['field_zip_code'][LANGUAGE_NONE][$delta]['field_field_zip_code'][LANGUAGE_NONE]['value']['#field_suffix'] = $field_suffix;
      // unset($form['field_zip_code'][LANGUAGE_NONE][$delta]['field_field_zip_code'][LANGUAGE_NONE]['value']['#field_suffix']);
      // Do not duplicate error messages to user
      if (!in_array($error_message, $error_messages)) {
        $error_messages[] = $error_message;
      }
      // Save deltas to know which fields to highlight for errors
      if (!in_array($delta, $error_deltas)) {
        $error_deltas[] = $delta;
      }
    } else {
      $zip_code_lookup = zip_code_lookup($zip_val);
      if ($zip_code_lookup['city'] == '') {
        $error = true;
        $error_message = 'The ZIP code you entered could not be found';
        if (!in_array($error_message, $error_messages)) {
          $error_messages[] = $error_message;
        }
        if (!in_array($delta, $error_deltas)) {
          $error_deltas[] = $delta;
        }
      } else {
        // If there is only one zip code- make sure primary value is set. Subtract 1 one count to account for add-more element
        if ($count_zips == 1) {
          $zip_code_value['field_field_primary'][LANGUAGE_NONE][0]['value'] = 1;
        }
        $blank_zipcode = false;
      }
    }
  }

  if ($error) {
    // Write all error messages and highlight fields
    foreach ($error_messages as $delta => $message) {
      form_set_error('field_zip_code][' . LANGUAGE_NONE . '][' . $error_deltas[$delta] . '][field_field_zip_code', t($message));
    }
    // High light all fields with no additional messages
    foreach ($error_deltas as $delta) {
      form_set_error('field_zip_code][' . LANGUAGE_NONE . '][' . $delta);
    }
  }

// if only blank inputs, use default and save as primary
  if ($blank_zipcode) {
    $form_state['values']['field_zip_code'][LANGUAGE_NONE][0]['field_field_zip_code'][LANGUAGE_NONE][0]['value'] = $site_default_zip;
    $form_state['values']['field_zip_code'][LANGUAGE_NONE][0]['field_field_primary'][LANGUAGE_NONE][0]['value'] = 1;
  }
}


function user_profile_url_custom_validate(&$form, &$form_state)
{
  // Occurs when all values are blank.
  if (!isset($form_state['input']['field_profile_favourites'])) {
    $form_state['values']['field_profile_favourites'][LANGUAGE_NONE][0]['field_url'][LANGUAGE_NONE][0]['value'] = '';
    $form_state['values']['field_profile_favourites'][LANGUAGE_NONE][0]['field_title'][LANGUAGE_NONE][0]['value'] = '';
    $form_state['input']['field_profile_favourites'][LANGUAGE_NONE][0]['field_url'][LANGUAGE_NONE][0]['value'] = '';
  } else {
    foreach ($form_state['values']['field_profile_favourites'][LANGUAGE_NONE] as $delta => $field) {
      if (trim($form_state['values']['field_profile_favourites'][LANGUAGE_NONE][$delta]['field_url'][LANGUAGE_NONE][0]['value']) == '') {
        unset($form_state['values']['field_profile_favourites'][LANGUAGE_NONE][$delta]);
      }
      // if title is empty, set it to given url
      if (trim($form_state['values']['field_profile_favourites'][LANGUAGE_NONE][$delta]['field_title'][LANGUAGE_NONE][0]['value']) == '') {
        $form_state['values']['field_profile_favourites'][LANGUAGE_NONE][$delta]['field_title'][LANGUAGE_NONE][0]['value'] = $form_state['values']['field_profile_favourites'][LANGUAGE_NONE][$delta]['field_url'][LANGUAGE_NONE][0]['value'];
      }
    }
  }
}


/**
 * @param $form
 * @param $form_state
 * Delete user's profile permanently.
 */
function profile_delete_action($form, &$form_state)
{
  global $user;
  if ($user->uid != 1) {
    if ($form_state['clicked_button']['#value'] == 'Delete profile') {
      $_SESSION['form_origin_btn'] = 'Delete profile';
      drupal_goto('eebridge-auth/logout');
    }
  }
}

/**
 * @param $account
 * @param $view_mode
 * @param $langcode
 * Hook user_view implementation, on user view, if user is logged in, go directly to the edit page, instead of the view page.
 */
function eenterprise_utility_user_view($account, $view_mode, $langcode)
{
  if ($account->name == 'guest-user')
    drupal_goto("/");
  else if ($account->uid > 0)
    drupal_goto("/user/" . $account->uid . "/edit");
}


/**
 * @return array
 * Workbench header data
 */
function get_header_variables()
{
  $locations_array = array();
  $user_preferred_zips = load_user_preferred_zips();
  // Primary zip is the selected zip in the drop down
  $primary_location = '';
  $primary_zip = -1;
  // Does the user have any saved zip codes? If not will use default information
  $user_has_zip = false;
  $location_count = 0;

  foreach ($user_preferred_zips as $name => $location_data) {
    foreach ($location_data as $zip => $zip_data) {
      $primary = $zip_data['primary'];

      if ($primary == 1) {
        $primary_location = $name;
        $primary_zip = $zip;
      }
      // initialize empty array to hold zips for name
      if (!isset($locations_array[$name])) {
        $locations_array[$name] = array();
      }
      // Add zip to location named list
      $locations_array[$name][] = $zip;
      // User has zips stored
      $user_has_zip = TRUE;

      $location_count++;
    }
  }

  if (!$user_has_zip) {
    // First Time User settings stores initial location preferences
    global $user;
    $user_data = user_load($user->uid);
    $user_initial_login = $user_data->field_initial_log_in;
    $initial_zip = $user_initial_login[LANGUAGE_NONE][0]['field_default_zip_code'][LANGUAGE_NONE][0]['value'];
    $initial_geo = $user_initial_login[LANGUAGE_NONE][0]['field_geolocation'][LANGUAGE_NONE][0]['value'];
    // If user has no locations and no initial zip or locations in their profile (e.g., Skip this)
    //TODO check this condition, looks wonky
    if ($initial_zip <= 0 && $initial_geo <= 0) {
      $initial_zip = 27705;
      //$initial_zip = 12401; // Good zip to test for good air quality
    }
    $zipcode_data = zip_code_lookup($initial_zip);
    $primary_location = $zipcode_data['string'];
    $locations_array[$primary_location] = array($initial_zip);
  }

  // Overide primary location with session if set
  if (isset($_SESSION['default_location_zip']) && isset($_SESSION['default_location_name'])) {
    if (is_numeric($_SESSION['default_location_zip'])) {
      $primary_location = $_SESSION['default_location_name'];
      $primary_zip = $_SESSION['default_location_zip'];
      // add to locations array
      if (!isset($locations_array[$primary_location])) {
        $locations_array[$primary_location] = array();
      }
      // Only add if not already included
      if (!in_array($primary_zip, $locations_array[$primary_location])) {
        $locations_array[$primary_location][] = $primary_zip;
      }
    }
  }

  // Sort locations by location name
  ksort($locations_array);
  $header_data = array(
    'locations' => $locations_array,
    'primary_location' => $primary_location,
    'primary_zip' => $primary_zip,
    'location_count' => $location_count
  );
  return $header_data;
}

/**
 * Creates modal for user with 10+ saved locations
 *
 * @param $locations
 * @param $city_name_count
 */
function get_modal_data($locations)
{
  print "<a id='locations-modal' href='#'>View all favorite cities</a>";
  print "<div id='dialog-all-locations' class='ui-dialog' title='Set location'>";
  print "<fieldset class='radio-options-holder'>";
  foreach ($locations as $name => $zips) {
    foreach ($zips as $zip) {
      print '<input type="radio"  id="' . $zip . '|' . $name . '"  name="location-radio" value="' . $zip . '|' . $name . '" /><label for="' . $zip . '|' . $name . '">' . $name . " (" . $zip . ")" . "</label>";
    }
  }
  print "</fieldset></div>";
}


/**
 * Generates location drop down in workbench header
 */
function generate_location_select()
{
  $max_location_items = 9;

  // show an input box instead of a select for guest users
  global $user;

  if ($user->name == 'guest-user') {
    generate_location_input_for_guests();
    return;
  }

  $header_data = get_header_variables();

  // Check if user has saved user_preferred_locations
  $user_data = user_load($user->uid);
  $user_zips_count = count($user_data->field_zip_code[LANGUAGE_NONE]);

  if ($user_zips_count != $header_data['location_count']) {
    // User zip fields are not reflected in user_preferred_locations
    deprec_generate_location_select();
    return;
  }

  $primary_location = $header_data['primary_location'];
  $primary_location_used = FALSE;
  $primary_zip = $header_data['primary_zip']; // Reset if found


  print "<label for='location-select'>Set location</label>";
  print "<select name='favorite-location' id='location-select'>";

  $count = 0;
  $show_more = TRUE;
  // Zip is array of zips
  foreach ($header_data['locations'] as $name => $zips) {
    foreach ($zips as $zip) {
      // Select if default/primary location
      if ($name == $primary_location && $zip == $primary_zip) {
        $selected = 'selected';
        $primary_location_used = true;
      } else {
        $selected = '';
      }


      // Print option for select (up to 8 values)
      if ($count < $max_location_items) {
        print "<option title = '" . $name . " (" . $zip . ")' value='" . $zip . "' " . $selected . " >" . $name . " (" . $zip . ")</option>";
      } // need to use default zip if not used yet
      else if ($count == $max_location_items && !$primary_location_used && $primary_zip > 0) {
        print "<option value='" . $primary_zip . "' selected>" . $primary_location . "</option>";
      } else if ($show_more) {
        print "<option value='view_more'>Show more...</option>";
        $show_more = FALSE;
        break;
      }

      $count = $count + 1;
    }
  }
  print "</select>";

  if ($count >= 9) {
    get_modal_data($header_data['locations']);
  }
}

/**
 * Called if user has not accessed user profile updating to user_preferred_locations
 */
function deprec_get_header_variables()
{
  //the value for now is hardcoded not to block front end developers while backend developers investigate API endpoints to get data from CDX
  global $user;
  $user_data = user_load($user->uid);
  $user_zips = $user_data->field_zip_code;
  $locations_array = array();
  // Primary zip is the selected zip in the drop down
  $primary_zip = '';
  // Does the user have any saved zip codes?
  $user_has_zip = false;
  foreach ($user_zips[LANGUAGE_NONE] as $key => $value) {
    $primary = $value['field_field_primary'][LANGUAGE_NONE][0]['value'];
    $zipcode = $value['field_field_zip_code'][LANGUAGE_NONE][0]['value'];
    if ($primary == 1) {
      $primary_zip = $zipcode;
    }
    $zipcode_data = return_user_preferred_location($zipcode);

    if (!$zipcode_data['error']) {
      if ($zipcode_data['preferred_name']) {
        $locations_array[$zipcode] = $zipcode_data['preferred_name'];
        $user_has_zip = true;
      } else {
        $zipcode_data = zip_code_lookup($zipcode);
        $locations_array[$zipcode] = $zipcode_data['string'];
        $user_has_zip = true;
      }
    }
  }
  if (!$user_has_zip) {
    // Use initial login information
    $user_initial_login = $user_data->field_initial_log_in;
    $initial_zip = $user_initial_login[LANGUAGE_NONE][0]['field_default_zip_code'][LANGUAGE_NONE][0]['value'];
    $initial_geo = $user_initial_login[LANGUAGE_NONE][0]['field_geolocation'][LANGUAGE_NONE][0]['value'];
    // If user has no locations and no initial zip or locations in their profile (e.g., Skip this)
    if (!$initial_zip > 0 && !$initial_geo > 0) {
      $initial_zip = 27705;
      //$initial_zip = 12401; // Good zip to test for good air quality
    }
    $zipcode_data = zip_code_lookup($initial_zip);
    $primary_zip = $initial_zip;
    $locations_array[$initial_zip] = $zipcode_data['string'];
  }
  asort($locations_array);
  $header_data = array(
    'locations' => $locations_array,
    'primary_zip' => $primary_zip,
  );
  return $header_data;
}

/**
 * Called if user has not accessed user profile updating to user_preferred_locations
 */
function deprec_generate_location_select()
{
  // show an input box instead of a select for guest users
  global $user;
  $max_location_items = 10;

  if ($user->name == 'guest-user') {
    generate_location_input_for_guests();
    return;
  }

  $default_zip_used = false;
  $header_data = deprec_get_header_variables();
  $city_name_count = array();
  $default_zip = $header_data['primary_zip'];
  if (isset($_SESSION['default_location_zip']) && isset($_SESSION['default_location_name'])) {
    if (is_numeric($_SESSION['default_location_zip'])) {
      $default_zip = $_SESSION['default_location_zip'];
    }
    $default_name = $_SESSION['default_location_name'];
  }

  foreach ($header_data['locations'] as $key => $value) {
    if (isset($city_name_count[$value])) {
      ++$city_name_count[$value];
    } else {
      $city_name_count[$value] = 1;
    }
  }
//    if (count($header_data['locations']) > 1) {
  print "<label for='location-select'>Set location</label>";
  print "<select for='favorite-location' id='location-select'>";

  $count = 0;
  foreach ($header_data['locations'] as $key => $value) {

    if (intval($key) == intval($default_zip)) {
      $selected = 'selected';
      $default_zip_used = true;
    } else {
      $selected = '';
    }
    if ($count < $max_location_items) {
      print "<option value='" . $key . "' " . $selected . " >" . $value . " (" . $key . ")</option>";
    }
    if ($count == $max_location_items) {
      print "<option value='view_more'>Show more...</option>";
      break;
    }
    $count = $count + 1;
  }

  // Check if saved default_zip was used. If not, it is a session variable that has not been saved yet.
  // Add the value to the location selection
  if ($default_zip_used == false && !empty($default_zip) && $default_name != "") {
    print "<option value='" . $default_zip . "' selected>" . $default_name . "</option>";
  }

  print "</select>";

  if (count($header_data['locations']) > $max_location_items) {
    deprec_get_modal_data($header_data['locations'], $city_name_count);
  }
}

/**
 * Called if user has not accessed user profile updating to user_preferred_locations
 */
function deprec_get_modal_data($locations)
{
  print "<a id='locations-modal' href='#'>View all favorite cities</a>";
  print "<div id='dialog-all-locations' class='ui-dialog' title='Set location'>";
  print "<fieldset class='radio-options-holder'>";
  foreach ($locations as $key => $value) {
    print "<input type='radio'  id='" . $key . "'  name='location-radio' value='" . $key . "|" . $value . "' /><label for='" . $key . "'>" . $value . " (" . $key . ")" . "</label>";
  }
  print "</fieldset></div>";
}

/**
 * Generates workbench location input for guest users
 */
function generate_location_input_for_guests()
{
  print '<div class="form-inline">';
  print '<div class="form-group has-feedback">';
  print '<label class="control-label" for="location-input-guests">Enter city, state; tribe; or ZIP code</label>';
  print '<input type="text" class="form-control input-sm" id="location-input-guests" aria-describedby="location-input-guests-error" style="height:23px;vertical-align: top;padding-top:2px;padding-bottom:2px">';
  print '<span class="form-control-feedback" aria-hidden="true" style="top:-2px;font-size:80%"></span>';
//  print '<span id="location-input-guests-error" class="sr-only">(success)</span>';
  print '</div>';
  print '</div>';
}


function eenterprise_utility_node_access($node, $op, $account)
{
  //Deny access to content that the user did not create.
  if (($node->type == 'progress_tracker' && $op == 'view') && $node->name != $account->name)
    return NODE_ACCESS_DENY;
}


function eenterprise_utility_node_presave($node)
{
  if ($node->type == 'trusted_user')
    $node->title = strtolower($node->title);
}

function eenterprise_utility_views_query_alter(&$view, &$query)
{
  if ($view->name == 'to_do') {
    if (isset($view->exposed_raw_input) && $view->exposed_raw_input['field_todo_lst_due_value'] != '') {
      foreach ($query->where[1]['conditions'] as $key => $value) {
        if ($value['field'] == 'field_data_field_todo_lst_due.field_todo_lst_due_value') {
          $view->query->where[1]['conditions'][$key]['operator'] = '>=';
        }
      }
      $view->args['week_filter_val'] = $view->exposed_raw_input['field_todo_lst_due_value'];
      date_default_timezone_set('America/New_York');
      $time_diff = time() - strtotime($view->exposed_raw_input['field_todo_lst_due_value']);
      if ($time_diff < (7 * 24 * 60 * 60) && $time_diff > 0) {
        //if (substr($view->exposed_raw_input['field_todo_lst_due_value'], 0, 10) == date("Y-m-d")) {
        $view->query->add_where(1, 'field_data_field_todo_lst_due.field_todo_lst_due_value', date("Y-m-d 23:59:59", strtotime("next saturday", time())), '<');
      } //if the difference between beyond next week and now is more than 7 days
      else if ((strtotime($view->exposed_raw_input['field_todo_lst_due_value']) - time()) > (7 * 24 * 60 * 60)) {
        ;
        //here, there is no need to add a second where clause because the filter is beyond next week.
      } else if (date('D', strtotime($view->exposed_raw_input['field_todo_lst_due_value'])) == 'Sun') {
        $next_week = time() + 7 * 24 * 60 * 60;
        $view->query->add_where(1, 'field_data_field_todo_lst_due.field_todo_lst_due_value', date("Y-m-d 23:59:59", strtotime("next saturday", $next_week)), '<');
      }

    }

    if (isset($query->table_queue['field_data_field_todo_lst_rprt_type_filter'])) {
      unset($query->table_queue['field_data_field_todo_lst_rprt_type_filter']);
      unset($query->tables['node']['field_data_field_todo_lst_rprt_type_filter']);
    }
    foreach ($query->where[1]['conditions'] as $key => $value)
      if ($value['field'] == 'field_data_field_todo_lst_rprt_type_filter.field_todo_lst_rprt_type_filter_value')
        unset($query->where[1]['conditions'][$key]);
    $field_info = field_info_field('field_todo_lst_rprt_type_filter');
    $allowed_values = $field_info['settings']['allowed_values'];
    if (isset($view->exposed_raw_input['field_todo_lst_rprt_type_filter_value']) && $view->exposed_raw_input['field_todo_lst_rprt_type_filter_value'] != 'All') {
      $query->add_table('field_data_field_todo_lst_item');
      $query->add_where(1, 'field_data_field_todo_lst_item.field_todo_lst_item_value', '%' . $allowed_values[$view->exposed_raw_input['field_todo_lst_rprt_type_filter_value']] . '%', 'LIKE');
    } else if (isset($view->exposed_raw_input['field_todo_lst_rprt_type_filter_value']) && $view->exposed_raw_input['field_todo_lst_rprt_type_filter_value'] == 'All') {
      $query->add_table('field_data_field_todo_lst_item');
      $query->add_where(1, 'field_data_field_todo_lst_item.field_todo_lst_item_value', '% %', 'LIKE');
    }
  }
  if ($view->name == 'progress_tracker') {
    //Remove the natural behavior of the second filter on progress tracker.
    unset($query->table_queue['field_data_field_prog_track_rep_type_filter']);
    unset($query->tables['node']['field_data_field_prog_track_rep_type_filter']);

    foreach ($query->where[1]['conditions'] as $key => $value) {
      if ($value['field'] == 'field_data_field_prog_track_rep_type_filter.field_prog_track_rep_type_filter_value') {
        unset($query->where[1]['conditions'][$key]);
      }
    }
    //get allowed values for field filter.
    $field_info = field_info_field('field_prog_track_rep_type_filter');
    $allowed_values = $field_info['settings']['allowed_values'];
    if (isset($view->exposed_raw_input['field_prog_track_rep_type_filter_value']) && $view->exposed_raw_input['field_prog_track_rep_type_filter_value'] != 'All') {
      if (in_array($allowed_values[$view->exposed_raw_input['field_prog_track_rep_type_filter_value']], array('Firm Abatement', 'Firm RRP', 'Firm Combination'))) {
        $res_val = explode(" ", $allowed_values[$view->exposed_raw_input['field_prog_track_rep_type_filter_value']]);
        $query->add_table('field_data_field_prog_tracker_app');
        $query->add_where(1, 'field_data_field_prog_tracker_app.field_prog_tracker_app_value', '%' . $res_val[1] . '%', 'LIKE');
      } else {
        $query->add_table('field_data_field_prog_tracker_app');
        $query->add_where(1, 'field_data_field_prog_tracker_app.field_prog_tracker_app_value', '%' . $allowed_values[$view->exposed_raw_input['field_prog_track_rep_type_filter_value']] . '%', 'LIKE');
      }
    } else if (isset($view->exposed_raw_input['field_prog_track_rep_type_filter_value']) && $view->exposed_raw_input['field_prog_track_rep_type_filter_value'] == 'All') {
      $query->add_table('field_data_field_prog_tracker_app');
      $query->add_where(1, 'field_data_field_prog_tracker_app.field_prog_tracker_app_value', '% %', 'LIKE');
    }
  }
}

/**
 * Implements hook_theme().
 */
function eenterprise_utility_theme($existing, $type, $theme, $path)
{

  $themes = array(
    'eenterprise_utility_terms_of_use_agreed_date_display' => array(
      'render element' => 'element'
    ),
  );
  return $themes;
}

// Custom theme output.
function theme_eenterprise_utility_terms_of_use_agreed_date_display($vars)
{
  $element = $vars['element'];

  $header = array(
    'field_date_signed' => t('User Agreement Signed'),
    'field_agreement_node_id' => t('Agreement Version'),
  );

  $rows = array();
  for ($i = 0; $i <= $element['#max_delta']; $i++) {
    $row = array();
    $row['data'] = array();

    $timestamp = $element[$i]['field_date_signed'][LANGUAGE_NONE][0]['value']['#value'];
    $nid = $element[$i]['field_agreement_node_id'][LANGUAGE_NONE][0]['value']['#value'];

    if (!empty($timestamp)) {

      $node = node_load($nid);

      $row['data'][] = format_date($timestamp, 'long');
      $row['data'][] = l($node->title . ' (Last modified: ' . format_date($node->changed) . ')', '/node/' . $nid);
      $rows[] = $row;
    }
  }

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
  ));
}

/**
 * Provides logic for generating default zip statement in user  profile. Inform the user wheter their default location
 * is their current location (if allowed), Durham, NC.
 */
function location_description()
{
  global $user;
  $user_data = user_load($user->uid);
  $num_zip_codes = count($user_data->field_zip_code[LANGUAGE_NONE]);
  if ($num_zip_codes > 0) {
    $location_description = "Add a location of interest to see environmental information relevant to that area. <strong>Select your primary location by clicking the <span class='sr-only'>Set primary location</span><i class='fa fa-star-o star-example description-key selected' aria-hidden='true' title='Set primary location'></i> icon.</strong>";
    $first_zip_code = $user_data->field_zip_code[LANGUAGE_NONE][0]['field_field_zip_code'][LANGUAGE_NONE][0]['value'];
  } else {
    $location_description = "Add your locations of interest to see environmental information relevant to those areas.  <strong>Click the <span class='sr-only'>Set primary location</span><i class='fa fa-star-o star-example description-key selected' aria-hidden='true' title='Set primary location'></i> icon next to a location to make it your default location.</strong> <br />";
    $first_zip_code = '';
  }

  $geolocation = false;
  $user_initial_login = $user_data->field_initial_log_in;
  $geolocation_used = (int)$user_initial_login[LANGUAGE_NONE][0]['field_geolocation'][LANGUAGE_NONE][0]['value'];

  if (isset($geolocation_used)) {
    if ($geolocation_used) {
      $location_description .= '<br /> Until a location is specified, the location detected upon your initial login will be set as the default.';
      $geolocation = true;
    }
  }
  if ($geolocation == false && $num_zip_codes < 2) {
    // Check if they have already saved values
    if ($first_zip_code == '27705' || $first_zip_code == '') {
      $location_description .= '<br /> Until a location is specified, the default location is set to Durham, North Carolina.';
    }
  }

  return $location_description;
}


/**
 * Function to return latest release number.
 * If recent session variable forgoes the db query and returns the session
 */
function release_number()
{
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'release_number')
    ->propertyCondition('status', 1);

  $results = $query->execute();
  if (isset($results['node'])) {
    $nodes = node_load(max(array_keys($results['node']))); // Get the highest nodie id
    $release_number = $nodes->title;
    $_SESSION['release_number'] = $release_number;
  } else {
    $release_number = '';
  }
  return $release_number;
}

/**
 * Accepts POST data to update users gridstack settings
 *Accessed by ajax request
 */
function update_user_gridstack_data()
{
  global $user;
  $user_data = user_load($user->uid);
  echo json_encode($_POST['grid_data']);
  if (isset($_POST['grid_data'])) {
    $user_grid_data = $user_data->field_gridstack_settings;
    unset($user_grid_data);
    foreach ($_POST['grid_data'] as $index => $obj) {
      $pane_id = $obj['id'];
      $x_coor = $obj['x'];
      $y_coor = $obj['y'];
      $width = $obj['width'];
      $height = $obj['width'];

      $multifield_gridstack_obj = array(
        'field_pane_id_value' => $pane_id,
        'field_pane_id_value_format' => null,
        'field_x_coordinate_value' => $x_coor,
        'field_x_coordinate_value_format' => null,
        'field_y_coordinate_value' => $y_coor,
        'field_y_coordinate_value_format' => null,
        'field_pane_id' => array(
          LANGUAGE_NONE => array(
            0 => array(
              'value' => $pane_id
            ),
          ),
        ),
        'field_x_coordinate' => array(
          LANGUAGE_NONE => array(
            0 => array(
              'value' => $x_coor
            ),
          ),
        ),
        'field_y_coordinate' => array(
          LANGUAGE_NONE => array(
            0 => array(
              'value' => $y_coor
            ),
          ),
        ),
        'field_grid_width' => array(
          LANGUAGE_NONE => array(
            0 => array(
              'value' => $width
            ),
          ),
        ),
        'field_grid_height' => array(
          LANGUAGE_NONE => array(
            0 => array(
              'value' => $height
            ),
          ),
        ),
      );
      $user_grid_data[LANGUAGE_NONE][$index] = $multifield_gridstack_obj;
    }
    $edit = array(
      'field_gridstack_settings' => $user_grid_data
    );
    try {
      user_save($user_data, $edit);
    } catch (Exception $e) {
      print json_encode($e);
      exit();
    }


  }

}

function loadPaneData($pane_id)
{
  global $user;
  $user_data = user_load($user->uid);
  if (isset($user_data->field_gridstack_settings[LANGUAGE_NONE][0])) {
    foreach ($user_data->field_gridstack_settings[LANGUAGE_NONE] as $key => $value) {
      $users_pane_id = $value["field_pane_id"][LANGUAGE_NONE][0]["safe_value"];
      if ($pane_id == $users_pane_id) {
        $x_coordinate = intval($value["field_x_coordinate"][LANGUAGE_NONE][0]["value"]);
        $y_coordinate = intval($value["field_y_coordinate"][LANGUAGE_NONE][0]["value"]);
        return array($x_coordinate, $y_coordinate);
      }
    }
  }
  return false;
}


function load_user_gridstack_data()
{
  // Format of gridstack data     {x: 2, y: 5, width: 1, height: 1}
  $return_array = array();
  global $user;
  $user_data = user_load($user->uid);
  if (isset($user_data->field_gridstack_settings[LANGUAGE_NONE][0])) {
    foreach ($user_data->field_gridstack_settings[LANGUAGE_NONE] as $key => $value) {
      $pane_id = $value["field_pane_id"][LANGUAGE_NONE][0]["safe_value"];
      $x_coordinate = intval($value["field_x_coordinate"][LANGUAGE_NONE][0]["value"]);
      $y_coordinate = intval($value["field_y_coordinate"][LANGUAGE_NONE][0]["value"]);
      $return_array[] = array('x' => $x_coordinate, 'y' => $y_coordinate, 'width' => 5, 'height' => 1, 'id' => $pane_id);
    }
  }
  if (isset($_GET['json'])) {
    echo json_encode($return_array);
    exit();
  } else {
    return $return_array;
  }

}

/*
 * To change user profile page title.
 * */
function eenterprise_menu_alter(&$items)
{
  $items['user/%user']['title callback'] = eenterprise_user_page_title;
}

/*
 * Callback function to hook_menu_alter.
 * */
function eenterprise_user_page_title()
{
  $output = "Profile";
  return $output;
}

/**
 * Implementation of hook_form_user_profile_form_alter
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function eenterprise_utility_form_user_profile_form_alter(&$form, &$form_state, $form_id)
{
  $form['account']['submit'] = $form['actions']['submit'];
}

function eenterprise_utility_node_prepare($node)
{
  // Node edit tab is viewed.
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit' && isset($node->nid)) {
    // Show a message on node edit page if a link check failed once or more.
    $ignore_response_codes = preg_split('/(\r\n?|\n)/', variable_get('linkchecker_ignore_response_codes', "200\n206\n302\n304\n401\n403"));
    $links = db_query('SELECT ll.* FROM {linkchecker_node} ln INNER JOIN {linkchecker_link} ll ON ln.lid = ll.lid WHERE ln.nid = :nid AND ll.fail_count > :fail_count AND ll.status = :status AND ll.code NOT IN (:codes)', array(':nid' => $node->nid, ':fail_count' => 0, ':status' => 1, ':codes' => $ignore_response_codes));
    foreach ($links as $link) {
      if (_linkchecker_link_access($link)) {
        drupal_set_message(format_plural($link->fail_count, 'The link below - <b><a href="@url">@url</a></b> - is no longer working and returned a @code status error.  Please update it before saving.', 'The link below - <b><a href="@url">@url</a></b> - is no longer working and returned a @code status error.  Please update it before saving.', array('@url' => $link->url, '@code' => $link->code)), 'error', FALSE);
      }
    }
  }
}

/*
@TODO - Use this to replace - Any - with All in drop-downs.  Need to determine why Progress Tracker > Lead > Report Type drop-down filter only shows All first
function eenterprise_utility_form_views_exposed_form_alter(&$form, &$form_state) {

     if($form["#id"] == 'views-exposed-form-progress-tracker-block-1'){
         $form['field_prog_track_domain_value']['#options']["All"] = 'All';
				 $form['field_prog_track_part_code_value']['#options']["All"] = 'All';
				 $form['field_prog_track_sub_part_code_value']['#options']["All"] = 'All';
				 $form['field_prog_track_rep_type_filter_value']['#options']["All"] = 'All';
     }
     else if($form["#id"] == 'views-exposed-form-to-do-block-1') {
	     $form['field_todo_lst_domain_value']['#options']["All"] = 'All';
	     $form['field_todo_lst_part_code_value']['#options']["All"] = 'All';
	     $form['field_todo_lst_sub_part_code_value']['#options']["All"] = 'All';
	     $form['field_todo_lst_rprt_type_filter_value']['#options']["All"] = 'All';

     }
}
*/


function connectToSOAPServerWithWSDL($wsdl, $location = "")
{
  $soap_obj = new stdClass();

  try {
    $client = new SoapClient($wsdl,
      array(
        "trace" => 1,
        'exceptions' => 1,
        "stream_context" => stream_context_create(
          array(
            'ssl' => array(
              'verify_peer' => false,
              'verify_peer_name' => false,
            )
          )
        )
      ));
    $soap_obj->client = $client;
    $soap_obj->error = FALSE;
  } catch (SoapFault $f) {
    dpm($f);
    $message = "Error: " . $f . ' Error Message: ' . $f->detail->faultdetails->message;
    watchdog($location, $message, array(), WATCHDOG_ERROR);
    $soap_obj->error = TRUE;
  }
  return $soap_obj;
}

/**
 * @param $client
 * @param $service
 * @param $params
 * @return bool
 */
function callSOAPWithParams($client, $service, $params, $location = "")
{
  $soap_obj = new stdClass();
  try {
    $response = $client->__soapCall($service, array($params));
    $soap_obj->response = $response;
    $soap_obj->error = FALSE;
  } catch (SoapFault $f) {
    $soap_obj->error = TRUE;
    $message = "Error: " . $f . ' Error Message: ' . $f->detail->faultdetails->message;
    watchdog($location, $message, array(), WATCHDOG_ERROR);
  }
  return $soap_obj;
}

function getFileContents($file_location, $location = "")
{
  $response = new stdClass();
  $stream_context = array(
    "ssl" => array(
      "verify_peer" => false,
      "verify_peer_name" => false,
    ),
  );
  try {
    $content = file_get_contents($file_location, false, stream_context_create($stream_context));
    $response->error = FALSE;
    $response->content = $content;
  } catch (Exception $e) {
    $response->error = TRUE;
    $message = "Error: " . $e . ' Error Message: ' . $e->getMessage();
    watchdog($location, $message, array(), WATCHDOG_ERROR);
  }
  return $response;

}
