<?php
/**
  * Implements hook_menu().
  **/
  

function eenterprise_utility_menu() {

  $items =array();
    $items['user_add_favorite_link'] = array(
      'page callback' => 'process_favorite_link',
      'access callback' => TRUE,
      );
    $items['load_links'] = array(
      'page callback' => 'load_links',
      'access callback' => TRUE,
      );

    return $items;
} 



function remove_url ($array, $remove_url) {
  if (is_array($array)) {
    foreach ($array[LANGUAGE_NONE] as $key => $value) {
      $url = explode("|", $value['value'])[0];
      echo $url;
      echo $remove_url;
      if ($url == $remove_url) {
        return $key;
      }
    }
  }
}

function process_favorite_link($url, $action) {
  echo $url;
  echo $action;
  global $user;
  $user_data = user_load($user->uid);
  $user_urls = $user_data->field_profile_favourites;
  $date =  date('m/d/Y h:i:s a', time());
  $order_weight = 0;
  $value = $url . '|' . $date . '|' . $order_weight;
  switch ($action) {
    case "add":
      $user_urls[LANGUAGE_NONE][] = array("value" => $value, "format"=> NULL, "safe_value" => $url);
      break;
    case "remove":
        $remove_url_index = remove_url($user_urls, $url);
        unset($user_urls[LANGUAGE_NONE][$remove_url_index]);
      break;
  }
  $edit = array(
    'field_profile_favourites' => $user_urls
  );
  // save existing user
  user_save($user_data,  $edit);
   $items = array();
    return $items;

}

function load_links($index) {
  global $user;
  $load_count = $index + 20;
  $user_data = user_load($user->uid);
  $user_urls = $user_data->field_profile_favourites;
  $url_data = array();
  $load_next_elem = false;
  $amount_loaded = 0;
  if (isset($user_urls[LANGUAGE_NONE])){ 
    $html_elem = "<div id='sortable'>";
   foreach($user_urls[LANGUAGE_NONE] as $key=>$value) {
     if ($index < $load_count) {
       if ($key == $index) {
        $data_array = explode("|", $value['value']);
        $url = $data_array[0];
        $date_updated = $data_array[1];
        $order_weight = $data_array[2];
        $url_data[$url] = array('order_weight' => $order_weight, 'date_updated' => $date_updated);
        $index = $index + 1;
        $amount_loaded = $amount_loaded + 1;
      }
     }
     else if ($index == $load_count) { // Check if next element exists
             $load_next_elem = true;
     }
    }
  }
  $results = array('url_data' => $url_data, 'loadNextElem' => $load_next_elem, 'amountLoaded' => $amount_loaded);
  echo json_encode($results);

}



function eenterprise_utility_form_alter(&$form, &$form_state, $form_id){
  drupal_add_css(drupal_get_path('module', 'eenterprise_utility') . '/eenterprise_utility.css');

  if($form['#form_id'] == 'user_profile_form'){

      hide($form['picture']);
      hide($form['account']['current_pass']);
      hide($form['account']['pass']);
      //hide($form['field_profile_interests']);
      
      if(empty($form['account']['mail']['#default_value']))
          $form['account']['mail']['#default_value'] = $form['#user']->name;
      $form['account']['mail']['#attributes'] = array('disabled' => 'disabled');
      $form['account']['mail']['#required'] = false;
      $form['account']['mail']['#title'] = 'Email Address';
      //if(empty($form['account']['mail']['#default_value']))
          //$form['account']['mail']['#default_value'] = $form['#user']->name;
//      $form['account']['mail']['#attributes'] = array('readonly' => 'readonly');
      $form['#validate'][] = 'user_profile_form_custom_validate';
      $form['actions']['delete'] = array('#type' => 'submit', '#value' => 'Delete profile');
      $form['actions']['delete']['#submit'][] = 'profile_delete_action';
      $form['actions']['delete']['#attributes'] =  array(
        'onclick' => "fancyConfirm('Are you sure you want to delete?')");
        //"return confirm('This will delete your entire profile, including any selected preferences, from the E-Enterprise Platform and will log you out from the system. Are you sure that you want to do this?')");
      $form['actions']['delete']['#attributes']['class'][] = 'imagefield-fancybox';
      $form['account']['mail']['#description'] = "All emails from the system will be sent to this address. This email address will not be made public and will only be used if you have indicated that you wish to receive news or notifications by email. Any edits to your email address must be done through the provider for which your log-in credentials are associated (e.g., Yahoo, CDX).";
      //We are not validating profile picture and password as we do not save and manage these information on the Portal.
      foreach($form['#validate'] as $key => $val){
          if($val == 'user_validate_current_pass' || $val == 'user_validate_picture')
              unset($form['#validate'][$key]);
      }

      $form['field_zip_code'][LANGUAGE_NONE]['#title'] = 'ZIP Code(s)';
//      $form['field_zip_code']['#attributes'][] = 'zip_code_inputs';
      $form['field_zip_code'][LANGUAGE_NONE]['#attributes']['class'][] = 'form-control';
      // add more button

      $form['field_zip_code'][LANGUAGE_NONE]['add_more']['#value'] = '+';
      $form['field_zip_code'][LANGUAGE_NONE]['add_more']['#prefix'] = '<div class="add_more_holder">';
      $form['field_profile_favourites'][LANGUAGE_NONE]['add_more']['#suffix'] = '</div>';
      //Add more button
      $form['field_profile_favourites'][LANGUAGE_NONE]['add_more']['#value'] = '+';
      $form['field_profile_favourites'][LANGUAGE_NONE]['add_more']['#prefix'] = '<div class="add_more_holder">';
      $form['field_profile_favourites'][LANGUAGE_NONE]['add_more']['#suffix'] = '</div>';
      
//
//    $form['field_zip_code']['clear'] = array(
//        '#type' => 'button',
//		    '#value' => t('Clear'),
//        '#ajax' => array(
//           'callback' => 'clear_fields',
//           'wrapper' => 'zipcode_description',
//        ),
//      );
//
//  
      //create weight array
      $lowest_weight = 0;

      if (isset($form_state['input']['field_zip_code'])) {
        for($delta = 0; $delta <= intval($form['field_zip_code'][LANGUAGE_NONE]['#max_delta']); $delta++) {
          $current_weight = intval($form_state['input']['field_zip_code'][LANGUAGE_NONE][$delta]['_weight']);
          if ($current_weight < $lowest_weight) {
            $lowest_weight = $current_weight;
          }
        }
      }

 
      $second_zero = false;
      for($delta = 0; $delta <= intval($form['field_zip_code'][LANGUAGE_NONE]['#max_delta']); $delta++) {
//      if (isset($form_state['build_info'][0][0]['cleared'])) {
//        $form['field_zip_code'][LANGUAGE_NONE][$delta]['value']['#default_value'] = '';
//         unset($form_state['input']['field_zip_code'][LANGUAGE_NONE][$delta]);
//      }
        
       // set primary default description location
        if (isset($form_state['input']['field_zip_code'])) {
          $current_weight = intval($form_state['input']['field_zip_code'][LANGUAGE_NONE][$delta]['_weight']);
          if ($current_weight == $lowest_weight && !$second_zero) {
            $primary = true;
            $second_zero = true;
          }
          else {
            $primary = false;
          }
        }
        else if ($delta == 0) {
          $primary = true;
        }
        else {
          $primary = false;
        }
        $zip = $form['field_zip_code'][LANGUAGE_NONE][$delta]['value']['#default_value']; 
        // overide default if input has been made
        if (isset($form_state['values']['field_zip_code'][LANGUAGE_NONE][$delta])) {
          $input_zip = $form_state['values']['field_zip_code'][LANGUAGE_NONE][$delta];
          if (isset($input_zip)) {
            $zip = $input_zip['value'];
          }
        }
        $field_suffix = '<span class="move_zip_code"></span>';
        if (isset($zip)) {
          $field_suffix = "";//zipcodeLookUp($zip);
        }
        else {
          $field_suffix = "";
        }

        if ($primary) {
           $description = '<span class="zip-code-description">Primary/Default Location</span>';
        }
        else {
          $description = '';
        }
        $form['field_zip_code'][LANGUAGE_NONE][$delta]['value']['#attributes']['class'][] =
          'field_zip_code form-control';
        $form['field_zip_code'][LANGUAGE_NONE][$delta]['value']['#description'] =
          $description;
        $form['field_zip_code'][LANGUAGE_NONE][$delta]['value']['#field_suffix'] =
          $field_suffix;
    
//        $form['field_zip_code'][LANGUAGE_NONE][$delta]['value']['#ajax'] = array(
//                'callback' => 'field_zip_code_generate',
//                'wrapper' => 'zipcode_description',
//                );
     }
        
  }
    drupal_add_js(drupal_get_path('module', 'eenterprise_utility') . '/eenterprise_utility.js');

}

//
function clear_fields(&$form, &$form_state) {
  $form_state['build_info'][0][0]['cleared'] = true;
//  for($delta = 0; $delta <= intval($form['field_zip_code'][LANGUAGE_NONE]['#max_delta']); $delta++) {
//      unset($form_state['values']['field_zip_code'][LANGUAGE_NONE][$delta]);
//      unset($form_state['input']['field_zip_code'][LANGUAGE_NONE][$delta]);
//        }
//     $form_state['values']['field_zip_code'][LANGUAGE_NONE][0] = '';
//     $form['field_zip_code'][LANGUAGE_NONE][0] = '';
//
////$form_state['input'] = array();
////$form_state['rebuild']= TRUE;
  return $form['field_zip_code'];
}

function zip_code_lookup($zip) {
  if (strlen($zip) == 5) {
  $request = drupal_http_request("http://api.zippopotam.us/us/$zip");
  $response_array = json_decode($request->data);
  $zip_places = $response_array->places[0];
  $zip_string = $zip_places->{'place name'} . ', ' . $zip_places->{'state abbreviation'};
  return $zip_string;
  }
}

 function field_zip_code_generate($form, $form_state) {
    $validation = user_profile_zipcode_custom_validate($form, $form_state);
//    $city_and_state = zip_code_lookup();
  if (!$validation['passed']) {
    $arguments = array(
       'passed' => 'false',
       'id' => $validation['id'],
    );
    $commands[] = ajax_command_invoke(NULL, 'zipCodeValidate', array($arguments));
    return array('#type' => 'ajax','#commands' => $commands);
  }
  else {
    // field_zip_code prefix and suffix are adding

    return $form['field_zip_code'];
  }
}


/**
 * @param $form
 * @param $form_state
 * Custom validation for user information, called when form is submitted.
 */
function user_profile_form_custom_validate(&$form, &$form_state) {
   user_profile_zipcode_custom_validate($form, $form_state);
}

/**
 * @param $form
 * @param $form_state
 * Custom validate for zip code.
 */
 function user_profile_zipcode_custom_validate(&$form, &$form_state) {
  // Validates even if javascript validation failed on form submit
    $previous_zipcodes = array();
    $error = false;
    $error_message = '';
    $field_id = '';
   
    foreach($form_state['values']['field_zip_code']['und'] as $delta => $field) {
        if(is_array($field) && is_numeric($delta)) {
            $zip_val = $form_state['values']['field_zip_code']['und'][$delta]['value'];
            if(!is_numeric($zip_val) && !empty($zip_val)) {
              $error_message = 'Zip code can only be number';
              $error = true;
            }
            else if(strlen($zip_val) != 5 && !empty($zip_val)) {
              $error_message = 'Zip code should be 5 digits';
              $error = true;
            }
            else if (in_array($zip_val, $previous_zipcodes)) {
              $error_message = 'Duplicate zip codes are not allowed.';
              $error = true;
            }
            else { 
              if ($zip_val != '') {
               $previous_zipcodes[] = $zip_val;
              }
            }
            
            if ($error) {
              $field_ids[] = '#edit-field-zip-code-und-' . $delta . '-value';
              break;
            }
        }
    }
   if ($error) {
     if ($form_state['clicked_button']['#value'] == 'Save') { //only write alert if submitted
       form_set_error('field_zip_code', t($error_message));
     return array( 
       'passed' => false, 
       'id' => $field_id,
      );
     }
   }
   else {
     return array('passed' => true);
   }
}

/**
 * @param $form
 * @param $form_state
 * Delete user's profile permanently.
 */
function profile_delete_action($form, &$form_state) {
//    global $user;
//    if($form_state['clicked_button']['#value'] == 'Delete profile') {
//        user_delete($user->uid);
//        drupal_goto('/');
//    }
}

/**
 * @param $account
 * @param $view_mode
 * @param $langcode
 * Hook user_view implementation, on user view, if user is logged in, go directly to the edit page, instead of the view page.
 */
function eenterprise_utility_user_view($account, $view_mode, $langcode){
    if($account->uid > 0)
        drupal_goto("/user/".$account->uid."/edit");
}
