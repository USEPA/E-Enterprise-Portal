<?php
/**
 * Implements hook_menu().
 **/
function recommended_resources_menu()
{
    $items = array();
    $items['generateFavoriteAreasOfInterestTable'] = array(
        'page callback' => 'generateFavoriteAreasOfInterestTable',
        'access callback' => TRUE,
    );
    $items['generateAllAreasOfInterestTable'] = array(
        'page callback' => 'generateAllAreasOfInterestTable',
        'access callback' => TRUE,
    );
    $items['generateCurrentAreaOfInterestTable'] = array(
                'page callback' => 'generateCurrentAreaOfInterestTable',
        'access callback' => TRUE,

    );

    return $items;
}

/**
 * Implements hook_theme_registry_alter().
 */
function recommended_resources_theme_registry_alter(&$theme_registry)
{
    // Defined path to the current module.
    $module_path = drupal_get_path('module', 'recommended_resources');
    // Find all .tpl.php files in this module's folder recursively.
    $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
    // Iterate through all found template file objects.
    foreach ($template_file_objects as $key => $template_file_object) {
        // If the template has not already been overridden by a theme.
        if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
            // Alter the theme path and template elements.
            $theme_registry[$key]['theme path'] = $module_path;
            $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
            $theme_registry[$key]['type'] = 'module';
        }
    }
}



/**
 * Implements hook_form_alter().
 */
function recommended_resources_form_alter(&$form, &$form_state, $form_id)
{


    global $user;
    if ($form_id == 'state_resource_node_form') {

        drupal_add_js(drupal_get_path('module', 'recommended_resources') . "/js/preview_url_form.js", "file");
        drupal_add_css(drupal_get_path('module', 'recommended_resources') . "/css/state_resource_editor.css", "file");

        hide($form['additional_settings']);
        hide($form['actions']['preview']);

        // Make sure resource is marked as published
        $form['options']['status'] = array(
            '#type' => 'value',
            '#value' => 1
        );



        $form_state['rebuild'] = TRUE;

        $form['#validate'][] = 'recommended_resources_form_validate';
        // Allow admin to edit the Source
        if ($user->uid > 1) {
            $form['title']['#attributes'] = array(
                'disabled' => 'disabled');
            $user_data = user_load($user->uid);
            $state = $user_data->field_admin_state[LANGUAGE_NONE][0]['safe_value'];
            $form['title']['#value'] = $state;
        }


        $form['title']['#description'] = "State code (such as NC for North Carolina), tribe, or EPA.";

        $form['field_source_url'][LANGUAGE_NONE][0]['value']['#field_suffix'] = "<a id='new-state-url-preview' href='#'>Preview</a>";


        $form['actions']['submit']['#submit'][] = 'new_state_form_redirect';
        $form['actions']['#suffix'] = "<div class='resource-edit-cancel-link'>" . l(t('Cancel'), '/resource-editor', array('attributes' => array('class' => 'link'))) . "</div>";

    }
}



function recommended_resources_form_validate($form, &$form_state){
    $url = $form_state['values']['field_source_url'][LANGUAGE_NONE][0]['value'];
    if (!valid_url($url, TRUE)) {
        $message = "Invalid Web URL (include http or https prefix).";
        form_set_error('url', $message);
    }

    /// Validate Duplicates/
    if  (db_query("SELECT COUNT(*) FROM {field_data_field_source_url} WHERE field_source_url_value = :url;", array(':url' => $url))->fetchField()) {
        // If it is, give an error
        $message = "This url has already been added. Please enter another.";
        form_set_error('url', $message);
    }
}


/**
 * Hook_node_presave
 */
function recommended_resources_node_presave($node) {
    global $user;
   // Ensure custom content type is assigned to correct author
    if($node->type === 'state_resource') {
        $node->uid = $user->uid;
    }
}

//function new_state_form_redirect($form, &$form_state) {
//        drupal_goto('/resource-editor');
//}


// function loadStateResources() {
//     $state_resources = array();
//     $query = new EntityFieldQuery;
//     $query->entityCondition('entity_type', 'node')
//         ->entityCondition('bundle', 'state_resource')
//         ->propertyCondition('status', 1);
//     $results = $query->execute();
//     if (isset($results['node'])) {
//         $nids = array_keys($results['node']);
//         $state_resources = entity_load('node', $nids);
//     }
//    return $state_resources;
//}
//
//
//function loadUserStates() {
//    $states = array();
//    global $user;
//    $user_data = user_load($user->uid);
//    $zip_codes = $user_data->field_zip_code[LANGUAGE_NONE];
//    if (count($zip_codes) > 0) {
//        foreach($zip_codes as $elem) {
//            $zip = $elem['field_field_zip_code'][LANGUAGE_NONE][0]['value'];
//            $state = zip_code_lookup($zip)['state'];
//            $states[] = $state;
//        }
//    }
//    if ( isset($_SESSION['default_location_zip'])) {
//        // add default state
//        $state = zip_code_lookup($_SESSION['default_location_zip'])['state'];
//        $states[] = $state;
//    }
//
//    /// Add users admin state if applicable
//    if (in_array('state_admin', $user->roles)) {
//        if (isset($user_data->field_admin_state[LANGUAGE_NONE])) {
//            $admin_state = $user_data->field_admin_state[LANGUAGE_NONE][0]['safe_value'];
//            // Reserve EPA for EPA tab
//            if ($admin_state != 'EPA') {
//                $states[] = $admin_state;
//            }
//        }
//    }
//    return $states;
//}
//
//function generateAllAreasOfInterestTable() {
//        $state_resources = loadStateResources();
//        echo "<table id='other-areas-of-interest-table'>" .
//            "<thead><tr><th>Source</th><th>Resource</th><th>Topic</th></tr></thead>" .
//            "<tbody>";
//        foreach ($state_resources as $nid => $nid_data) {
//            $state = $nid_data->title;
//                $source = $nid_data->field_source[LANGUAGE_NONE][0]['safe_value'];
//                $url = $nid_data->field_source_url[LANGUAGE_NONE][0]['safe_value'];
//                $topic = $nid_data->field_topic[LANGUAGE_NONE][0]['value'];
//                echo "<tr><td>$state</td>" .
//                    "<td><div class='interests-url-hyperlink'><a href='" . $url . "' target='_blank'>$source</a></div>" .
//                    "<div class='interests-url-text' title='" . $url . "'>$url</div></td>" .
//                    "<td>$topic</td></tr>";
//        }
//        echo "</tbody> </table>";
//
//}
//
//
//function generateFavoriteAreasOfInterestTable() {
//    $state_resources = loadStateResources();
//        echo "<table id='other-areas-of-interest-table'>" .
//            "<thead><tr><th>Source</th><th>Resource</th><th>Topic</th></tr></thead>" .
//            "<tbody>";
//        $users_favorite_states = loadUserStates();
//        foreach ($state_resources as $nid => $nid_data) {
//            $state = $nid_data->title;
//            if (in_array($state, $users_favorite_states)) {
//                $source = $nid_data->field_source[LANGUAGE_NONE][0]['safe_value'];
//                $url = $nid_data->field_source_url[LANGUAGE_NONE][0]['safe_value'];
//                $topic = $nid_data->field_topic[LANGUAGE_NONE][0]['value'];
//                echo "<tr><td>$state</td>" .
//                    "<td><div class='interests-url-hyperlink'><a href='" . $url . "' target='_blank'>$source</a></div>" .
//                    "<div class='interests-url-text' title='" . $url . "'>$url</div></td>" .
//                    "<td>$topic</td></tr>";
//
//            }
//        }
//        echo "</tbody> </table>";
//}
//
//// Takes state code for filtering
//function generateCurrentAreaOfInterestTable() {
//    $state_resources = loadStateResources();
//    echo "<table id='other-areas-of-interest-table'>" .
//        "<thead><tr><th>Source</th><th>Resource</th><th>Topic</th></tr></thead>" .
//        "<tbody>";
//    if (isset($_POST['state'])) {
//        $user_selected_state = $_POST['state'];
//        foreach ($state_resources as $nid => $nid_data) {
//            $state = $nid_data->title;
//            if ($state == $user_selected_state) {
//                $source = $nid_data->field_source[LANGUAGE_NONE][0]['safe_value'];
//                $url = $nid_data->field_source_url[LANGUAGE_NONE][0]['safe_value'];
//                $topic = $nid_data->field_topic[LANGUAGE_NONE][0]['value'];
//                echo "<tr><td>$state</td>" .
//                    "<td><div class='interests-url-hyperlink'><a href='" . $url . "' target='_blank'>$source</a></div>" .
//                    "<div class='interests-url-text' title='" . $url . "'>$url</div></td>" .
//                    "<td>$topic</td></tr>";
//            }
//        }
//    }
//    echo "</tbody> </table>";
//}



