<?php
/**
 * Implements hook_menu().
 **/
function recommended_resources_menu() {
  $items = array();

  $items['admin/config/system/lgc'] = array(
    'title' => 'LGC',
    'description' => 'LGC data configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lgc_settings'),
    'access arguments' => array('administer lgc'),
    'file' => 'recommended_resources_lgc.admin.inc',
  );

  $items['generateUserLocalResourcesTable'] = array(
    'page callback' => 'generateUserLocalResourcesTable',
    'access callback' => TRUE,
  );
  $items['generateAllLocalResourcesTable'] = array(
    'page callback' => 'generateAllLocalResourcesTable',
    'access callback' => TRUE,
  );

  // Manage My Topics ajax urls
  $items['manage_my_topics/save_topic'] = array(
    'page callback' => 'save_lgc_topic',
    'access callback' => TRUE,
  );

  $items['manage_my_topics/remove_topic'] = array(
    'page callback' => 'remove_lgc_topic',
    'access callback' => TRUE,
  );

  $items['manage_my_topics/load_view'] = array(
    'page callback' => 'load_view',
    'access callback' => TRUE,
  );

  $items['lgc_resources_json_all'] = array(
    'page callback' => 'lgc_resources_json_all',
    'access callback' => TRUE,
  );

  $items['lgc_resources_json_by_user/%'] = array(
    'page callback' => 'lgc_resources_json_by_user',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['rcs_lgc_resources_json_by_topic'] = array(
    'page callback' => 'rcs_lgc_resources_json_by_topic',
    'access callback' => TRUE,
  );
  $items['rcs_load_topics'] = array(
    'page callback' => 'rcs_load_topics',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_block_view().
 */
function recommended_resources_block_view($delta = '') {
  drupal_add_js(drupal_get_path('module', 'datatables') . '/dataTables/media/js/jquery.dataTables.js', [
    'scope' => 'header',
    'preprocess' => TRUE,
    'group' => JS_LIBRARY,
    'weight' => -1,
    'type' => 'file',
    'cache' => TRUE,
    'requires_jquery' => TRUE
  ]);
}

/**
 * Implements hook_js_alter().
 */
function recommended_resources_js_alter(&$javascript) {
  set_user_lgc_topic_session();
  $user_topics = [];
  foreach ($_SESSION['user_lgc_topics'] as $tid => $title) {
    if ($title) {
      $user_topics[$tid] = $title;
    }
  }
  drupal_add_js(['recommended_resources' => ['user_lgc_topics' => $user_topics]], 'setting');
}

/**
 * Implements hook_theme_registry_alter().
 */
function recommended_resources_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'recommended_resources');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Creates Session array if does not already exists.
 * Checks session for topic tid
 * Return true if User has saved tid, false otherwise
 * @param $tid
 * @return bool
 */
function is_user_topic_saved($tid) {
  if (isset($_SESSION['user_lgc_topics'])) {
    // TODO: is there a way to do this without using a session variable? Ben and I are 'not thrilled about this'
    drupal_session_start(); // use drupal session
    $topics = $_SESSION['user_lgc_topics'];

    return array_key_exists($tid, $topics);
  } else {
    $_SESSION['user_lgc_topics'] = array();
    global $user;
    $user_data = user_load($user->uid);
    $lgc_topics = $user_data->field_lgc_topics_of_interest[LANGUAGE_NONE];

    foreach ($lgc_topics as $topic) {
      $_SESSION['user_lgc_topics'][$topic['tid']] = taxonomy_term_load($topic['tid'])->name;
    }
    return is_user_topic_saved($tid);
  }
}

/**
 * Returns html for multiselect for lgc topics
 */
function lgc_topics_multiselect() {
  $multi_select = "<div id='lgc-topics-filter'><select id='lgc-topics-select' multiple>";
  $vocab = taxonomy_vocabulary_machine_name_load("lgc_topics");
  $terms = taxonomy_get_tree($vocab->vid);
  foreach ($terms as $obj) {
    $tid = $obj->tid;
    $name = $obj->name;
    $multi_select .= "<option value=$tid>$name</option>";
  }
  $multi_select .= "</select> <button id='apply-lgc-topics'>Apply</button></div>";
  return $multi_select;
}

function xml2array($xmlObject, $out = array()) {
  foreach ((array)$xmlObject as $index => $node) {
    $out[$index] = (is_object($node)) ? xml2array($node) : $node;
  }

  return $out;
}

/**
 * Implements hook_form_alter().
 */
function recommended_resources_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'lgc_resource_node_form') {
    drupal_add_js(drupal_get_path('module', 'recommended_resources') . "/js/preview_url_form.js", ['scope' => 'footer', 'preprocess' => true, 'group' => JS_LIBRARY, 'type' => 'file', 'cache' => true, 'requires_jquery' => true]);
    drupal_add_css(drupal_get_path('module', 'recommended_resources') . "/css/recommended_resources.css", ['preprocess' => true, 'group' => CSS_DEFAULT]);

    hide($form['additional_settings']);
    hide($form['actions']['preview']);

    // Make sure resource is marked as published
    $form['options']['status'] = array(
      '#type' => 'value',
      '#value' => 1
    );

    $form_state['rebuild'] = TRUE;

    $form['#attributes']['novalidate'] = '1';
    $form['#validate'][] = 'recommended_resources_form_validate';

    $form['field_lgc_link'][LANGUAGE_NONE][0]['value']['#field_suffix'] = "<a class='usa-button' id='new-lgc-resource-url-preview' href='#'>Preview</a>";

    $form['actions']['submit']['#submit'][] = 'new_lgc_resource_form_redirect';
    $form['actions']['#suffix'] = "<div class='resource-edit-cancel-link'>" . l(t('Cancel'), '/local-resource-editor', array('attributes' => array('class' => 'link usa-button usa-button-outline'))) . "</div>";

  }
}

function recommended_resources_form_validate($form, &$form_state) {
  $edit_form = FALSE;
  $delete_form = FALSE;
  $changed_title = FALSE;
  $input_title = $form_state['input']['title'];
  $saved_title = $form['title']['#default_value'];

  if (!empty($form_state['values']['delete'])) {
    $edit_form = TRUE;
  }
  if ($form_state['input']['op'] == 'Delete') {
    $delete_form = TRUE;
  }
  if ($input_title != $saved_title) {
    $changed_title = TRUE;
  }

  if (!$delete_form) {
    $url = $form_state['values']['field_lgc_link'][LANGUAGE_NONE][0]['value'];
    if (!valid_url($url, TRUE)) {
      $message = "Invalid Web URL (include http or https prefix).";
      form_set_error('field_lgc_link', $message);
    }

    if ($changed_title || !$edit_form) {
      /// Validate Duplicates/
      if (db_query("SELECT count(*) FROM {node} WHERE type = 'lgc_resource' and  title = :title;", array(':title' => $input_title))->fetchField()) {
        // If it is, give an error
        $message = "This resource has already been added. Please enter another.";
        form_set_error('title', $message);
      }
    }
  }
}

/**
 * Hook_node_presave
 */
function recommended_resources_node_presave($node) {
  global $user;
  // Ensure custom content type is assigned to correct author
  if ($node->type === 'lgc_resource') {
    $node->uid = $user->uid;
  }
}

function new_lgc_resource_form_redirect($form, &$form_state) {
  drupal_goto('/local-resource-editor');
}

function generateUserLocalResourcesTable() {
  set_user_lgc_topic_session();
  $table = views_embed_view('lgc_resources', 'rcs_resources_user');
  print $table;
}

function generateAllLocalResourcesTable() {
  $table = views_embed_view('lgc_resources', 'rcs_resources_all');
  print $table;
}

/**
 * Accepts POST request with "tid" param
 * Saves LGC topic to current user with tid
 * @return array
 */
function save_lgc_topic() {
  // Access current user lgc topics (tids)
  global $user;
  $user_data = user_load($user->uid);
  $user_interests = $user_data->field_lgc_topics_of_interest;
  $response = array();

  // Check if POST tid is set
  if (!isset($_POST['tid'])) {
    $response['error'] = TRUE;
    $response['message'] = 'Must include TID in POST as \'tid\'';
    print $response;
    exit();
  }

  //Add tid to users preexisting lgc topic tids
  $tid = $_POST['tid'];
  $user_interests[LANGUAGE_NONE][] = array('tid' => $tid);
  $edit = array(
    'field_lgc_topics_of_interest' => $user_interests
  );

  // Save changes, return error exception if fails
  try {
    user_save($user_data, $edit);
    $response['error'] = FALSE;
    $response['message'] = 'Successfully saved tid- ' . $tid;
    $_SESSION['user_lgc_topics'][$tid] = taxonomy_term_load($tid)->name;
  } catch (Exception $e) {
    $response['error'] = TRUE;
    $response['message'] = array('Failed with exception' => $e);
  }
  print json_encode($response);
}

/**
 * Accepts POST request with "tid" param
 * Removes LGC topic from current user with tid
 * @return array
 */
function remove_lgc_topic() {
  // Access current user lgc topics (tids)
  global $user;
  $user_data = user_load($user->uid);
  $user_interests = $user_data->field_lgc_topics_of_interest;
  $response = array();

  // Check if POST tid is set
  if (!isset($_POST['tid'])) {
    $response['error'] = TRUE;
    $response['message'] = 'Must include TID in POST as \'tid\'';
    print $response;
    exit();
  }
  //Remove tid to users preexisting lgc topic tids
  $tid_to_remove = xssafe($_POST['tid']);
  foreach ($user_interests[LANGUAGE_NONE] as $key => $topic) {
    if ($topic['tid'] == $tid_to_remove) {
      unset($user_interests[LANGUAGE_NONE][$key]);
    }
  }

  $edit = array(
    'field_lgc_topics_of_interest' => $user_interests
  );

  // Save changes, return error exception if fails
  try {
    user_save($user_data, $edit);
    unset($_SESSION['user_lgc_topics'][$tid_to_remove]);
    $response['error'] = FALSE;
    $response['message'] = 'Successfully removed tid- ' . $tid_to_remove;
  } catch (Exception $e) {
    $response['error'] = TRUE;
    $response['message'] = array('Failed with exception' => $e);
  }
  print json_encode($response);
}

function set_user_lgc_topic_session() {
  $_SESSION['user_lgc_topics'] = array();
  global $user;
  $user_data = user_load($user->uid);
  $lgc_topics = $user_data->field_lgc_topics_of_interest[LANGUAGE_NONE];
  if (is_array($lgc_topics)) {
    foreach ($lgc_topics as $topic) {
      $_SESSION['user_lgc_topics'][$topic['tid']] = taxonomy_term_load($topic['tid'])->name;
    }
  }
}

function load_view() {
  set_user_lgc_topic_session();
  $table = views_embed_view('lgc_manage_my_topics', 'block');
  print $table;
  exit();
}

/**
 * Parse LGC XML response and update LGC Taxonomy with new topic information
 *
 * @param $response_data
 * @param $term_tid_mapping
 * @param $deprecated_terms
 * @return array
 */
function parse_lgc_xml_return_from_rcs($response_data, &$term_tid_mapping, &$deprecated_terms) {
  // Tracks all resources pulled from RCS and parsed from XML
  $resources_array = [];

  // Convert the response into an xml object
  $xmlobj = simplexml_load_string($response_data);
  // convert the resources into an array
  $resources = xml2array($xmlobj->Results->NewDataSet);


  /* Loop through RCS xml return to
  *  1) update LGC taxonomy with LGC topic names,
  *  2) return array of LGC resources
  */
  foreach ($resources['Resource'] as $simpleXML) {
    // Convert inner xmlObj of resource array to array
    $resource_array = xml2array($simpleXML);
    // Only pull LGC Resource if contains topic
    if (
      isset($resource_array['TopicText'])
      && isset($resource_array['ResourceName'])
      && trim($resource_array['TopicText']) !== ''
      && trim($resource_array['ResourceName']) !== ''
    ) {

      // Trim any non-alphanumeric from description
      $resource_array['DescriptionText'] = trim($resource_array['DescriptionText']);

      // Check for '|' delimiters in topic
      $topics_array = explode('|', $resource_array['TopicText']);
      $tids = [];
      foreach ($topics_array as $topic) {
        $topic = trim($topic);

        // Topic is not deprecated
        unset($deprecated_terms[$topic]);
        // Add topic to tid_mapping if the topic has not been saved
        // to the LGC Resource taxonomy
        if (!isset($term_tid_mapping[$topic])) {
          // Update $term_tid_mapping with topic=>tid
          add_new_lgc_topic_to_taxonomy($topic, $term_tid_mapping);
        }
        // Save the new TID to the RCS return (resource_array)
        $tid = $term_tid_mapping[$topic];
        $tids[] = $tid;
      }
      $resource_array['tids'] = $tids;


      $resources_array[] = $resource_array;

    }
  }

  return $resources_array;
}

/**
 * Parse LGC XML response and update LGC Taxonomy with new topic information
 * @param $response_data
 * @param $term_tid_mapping
 * @param $deprecated_terms
 * @return array
 */
function parse_lgc_json_return_from_mo($response_data, &$term_tid_mapping, &$deprecated_terms) {
  // Tracks all resources pulled from RCS and parsed from XML
  $resources_array = [];

  $resources = json_decode($response_data)->resources;

  /* Loop through json return to
  *  1) update LGC taxonomy with LGC topic names,
  *  2) return array of LGC resources
  */
  foreach ($resources as $resource) {
    $resource_array = [];
    $tids = [];
    $topics_string = "";
    $categories_string = "";
    $relevances_string = "";

    // Only pull LGC Resource if contains topic
    if (
      isset($resource->topics)
      && isset($resource->name)
      && count($resource->topics) > 0
      && trim($resource->name) !== ''
    ) {

      foreach ($resource->topics as $topic) {
        $topic = trim($topic);
        $topics_string .= $topic . '|';
        // Topic is not deprecated
        unset($deprecated_terms[$topic]);
        // Add topic to tid_mapping if the topic has not been saved
        // to the LGC Resource taxonomy
        if (!isset($term_tid_mapping[$topic])) {
          // Update $term_tid_mapping with topic=>tid
          add_new_lgc_topic_to_taxonomy($topic, $term_tid_mapping);
        }
        // Save the new TID to the RCS return (resource_array)
        $tid = $term_tid_mapping[$topic];
        $tids[] = $tid;
      }


      foreach ($resource->categories as $category) {
        $categories_string .= trim($category) . '|';
      }

      foreach ($resource->relevance as $relevance) {
        $relevances_string .= trim($relevance) . '|';
      }

      $resource_array['ResourceName'] = $resource->name;
      $resource_array['LocationResourceText'] = $resource->link;
      // Trim any non-alphanumeric from description
      $resource_array['DescriptionText'] = trim($resource->detailed_description);
// TODO: have MO return SOURCE instead of hardcoding
      $resource_array['SourceSystemText'] = $resource->source;
      $resource_array['TopicText'] = $topics_string;
      $resource_array['BusinessFunctionText'] = $categories_string;
      $resource_array['SubtypeText'] = $resource->tool_type;
      $resource_array['RatingsTrainingLevelText'] = $resource->training_level;
      $resource_array['RatingsRecommendationText'] = $resource->data_resource_requirements;
      $resource_array['RelevanceText'] = $relevances_string;

      $resource_array['tids'] = $tids;
      $resources_array[] = $resource_array;
    }
  }

  return $resources_array;
}

/**
 * Makes request to endpoint (json/xml) or returns previously
 * cached data
 * @param $cache_key
 * @param $default_endpoint
 * @param $content_type
 * @param $term_tid_mapping
 * @param $deprecated_terms
 * @return array
 */
function lgc_load_data_from_endpoint($cache_key, $default_endpoint, $content_type, &$term_tid_mapping, &$deprecated_terms) {
  $data = &drupal_static(__FUNCTION__);

  if (!isset($data)) {

    // Return cache if available and not expired
    $cache = cache_get($cache_key);
    if ($cache && time() < $cache->expire) {
      if (count($cache->data) > 0) {
        $response = new stdClass();
        $response->data = $cache->data;
      }
    }
  }

  if (!isset($response)) {
    // Load amount of time to wait before reloading rcs. Default is 5 minutes
    $expire_ts = time() + (intval(variable_get('lgc_cache_reset_time', 5)) * 60);

    module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
    if (feature_toggle_get_status('sample_rcs_data') && $content_type !== 'application/json') {
      $response = new stdClass();
      $response->data = file_get_contents(drupal_get_path('module', 'recommended_resources') . '/rcs-sample-response.xml');
    } else {
      $url = variable_get($cache_key . '_endpoint_url', $default_endpoint);
      $response = drupal_http_request($url, array(
        'headers' => array('Content-Type' => $content_type),
        'method' => 'GET',
        'timeout' => variable_get('lgc_service_timeout', 30.0),
      ));

      // If request was unsuccessful, load last successful request
      if ($content_type === 'text/xml') {
        $file_type = 'xml';
      } else {
        $file_type = 'json';
      }
      if ($response->code != 200 || $response->data == "") {
        $response->data = file_get_contents(drupal_get_path('module', 'recommended_resources') . '/last_' . $cache_key . '_request.' . $file_type);
      } else {
        // Store last successful request in xml
        file_put_contents(drupal_get_path('module', 'recommended_resources') . '/last_' . $cache_key . '_request.' . $file_type, $response->data);
      }
    }

    // Set variables for cache to save processing time on recurrent calls
    cache_set($cache_key, $response->data, 'cache', $expire_ts);
  }

  if ($content_type === 'text/xml') {
    $resources_array = parse_lgc_xml_return_from_rcs($response->data, $term_tid_mapping, $deprecated_terms);
  } else {
    $resources_array = parse_lgc_json_return_from_mo($response->data, $term_tid_mapping, $deprecated_terms);
  }


  return $resources_array;
}


/**
 * Returns RCS information
 * @param $term_tid_mapping
 * @param $deprecated_terms
 * @return array
 */
function rcs_lgc_resources(&$term_tid_mapping, &$deprecated_terms) {
  // Will be overriden if changes are made in the admin configs
  $default_endpoint = "https://ends2.epa.gov/RestProxy/query?Node=.NetNode2&Dataflow=RCS&Request=GetRCSResourcesByCategoryTag_v1.0&Params=CategoryTag|Local+Government";
  return lgc_load_data_from_endpoint('rcs_lgc', $default_endpoint, "text/xml", $term_tid_mapping, $deprecated_terms);
}

/**
 * Returns MO information
 * @param $term_tid_mapping
 * @param $deprecated_terms
 * @return array
 */
function mo_lgc_resources(&$term_tid_mapping, &$deprecated_terms) {
  // Will be overriden if changes are made in the admin configs
  $default_endpoint = 'https://devepaapi.azurewebsites.us/localgovernmentresources/resource';
  return lgc_load_data_from_endpoint('mo_lgc', $default_endpoint, "application/json", $term_tid_mapping, $deprecated_terms);
}

/**
 * Public endpoint for accessing LGC datasources
 * Initiates a mapping of the current LGC taxonomy. This
 * is passed by reference and updated through all endpoints
 * to keep the LGC Topics up to date across multiple data
 * sources
 *
 * @throws Exception
 */
function lgc_resources_json_all() {
  module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');

  // Load term to tid mapping and copy for keeping track of deprecated terms
  $term_tid_mapping = load_lgc_taxonomy_mapping();
  $deprecated_terms = $term_tid_mapping;


  $resources_array['resources'] = rcs_lgc_resources($term_tid_mapping, $deprecated_terms);
  if (feature_toggle_get_status('mo_lgc_data')) {
    $resources_array['resources'] = array_merge($resources_array['resources'], mo_lgc_resources($term_tid_mapping, $deprecated_terms));
  }


  // Delete $deprecated_terms not included in LGC data
  if (count($deprecated_terms) > 0) {
    // Force users cache to be rebuilt from the database and not use the old references in drupal cache
    entity_get_controller('user')->resetCache();
    foreach ($deprecated_terms as $term_to_delete => $tid) {
      taxonomy_term_delete($tid);
    }
  }
  drupal_json_output($resources_array);
  exit();
}

/**
 * Loads and returns the LGC topics mapped to their
 * term ids
 * @return array
 */
function load_lgc_taxonomy_mapping(){
  $term_tid_mapping = [];
  // Load LGC Resource taxonomy
  $vocabulary = taxonomy_vocabulary_machine_name_load('lgc_topics');
  $vid = $vocabulary->vid;
  // Load the terms for the LGC Resource taxonomy
  $lgc_terms = entity_load('taxonomy_term', FALSE, array('vid' => $vid));

  // Initialize $term_tid_mapping and $deprecated_terms with mapping of
  // topic name to tid from LGC taxonomy
  foreach ($lgc_terms as $tid => $term_data) {
    $term_tid_mapping[$term_data->name] = $tid;
  }
  return $term_tid_mapping;
}

/**
 * Returns tids of the LGC taxonomy that the user has
 * subscribed to or favored through their profile/workbench
 * @param $uid
 * @return array
 */
function lgc_user_tids($uid) {
  $user_data = user_load($uid);
  $user_lgc_topic_tids = array();
  $user_lgc_topic_saved_field = $user_data->field_lgc_topics_of_interest;
  if (isset($user_lgc_topic_saved_field[LANGUAGE_NONE])) {
    foreach ($user_lgc_topic_saved_field[LANGUAGE_NONE] as $data) {
      $user_lgc_topic_tids[] = intval($data['tid']);
    }
  }
  return $user_lgc_topic_tids;
}


/**
 * returns lgc resource by what topics the user has selected in their profile or lgc widget
 */
function lgc_resources_json_by_user($uid = -1) {
  module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');

  // Load term to tid mapping and copy for keeping track of deprecated terms
  $term_tid_mapping = load_lgc_taxonomy_mapping();
  $deprecated_terms = $term_tid_mapping;



  $resources_array['resources'] = rcs_lgc_resources($term_tid_mapping, $deprecated_terms);
  if (feature_toggle_get_status('mo_lgc_data')) {
    $resources_array['resources'] = array_merge($resources_array['resources'], mo_lgc_resources($term_tid_mapping, $deprecated_terms));
  }


  if ($uid == -1) {
    // TODO: find out cases where this conditional is actually running
    global $user;
    $uid = $user->uid;
  }
  $user_lgc_tids = lgc_user_tids($uid);

  $response = array('resources' => array());
  foreach ($resources_array['resources'] as $resource_data) {
    $tids = $resource_data['tids'];
    foreach ($tids as $tid) {
      if (in_array($tid, $user_lgc_tids)) {
        $response['resources'][] = $resource_data;
        break; // no need to loop through other tids
      }
    }
  }
  drupal_json_output($response);
  exit();
}


/**
 * Saves Topic in system and adds to tid_term_mapping
 * @param $topic
 * @param $tid_term_mapping
 */
function add_new_lgc_topic_to_taxonomy($topic, &$tid_term_mapping) {
  // Load LGC Resource vocabulary VID
  $vid = taxonomy_vocabulary_machine_name_load('lgc_topics')->vid;

  $term = new stdClass();
  $term->name = $topic;
  $term->vid = $vid;
  taxonomy_term_save($term);
  $tid = $term->tid;
  $tid_term_mapping[$topic] = $tid;
}

/**
 * Implements hook_views_pre_execute().
 * Before running the REST call, provide the logged-in user's UID.
 */
function recommended_resources_views_pre_execute(&$view) {
  global $user;
  if ($view->current_display == 'rcs_resources_user') {
    $view->query->options['json_file'] .= '/' . $user->uid;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function recommended_resources_preprocess_views_view(&$variables) {
  if ($variables['theme_hook_original'] == 'views_view__recommended_resources__block') {
    $path = "recommended_resources-about";
    $org_path = drupal_lookup_path("source", $path);
    $node = menu_get_object("node", 1, $org_path);
    $nid = $node->nid;
    $node = node_load($nid);
    $nodeView = node_view($node, 'full');
    $variables['recommended_resources_html'] = drupal_render($nodeView['body']);
  }
}
