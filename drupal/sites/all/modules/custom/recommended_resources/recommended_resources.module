<?php
/**
 * Implements hook_menu().
 **/
function recommended_resources_menu() {
  $items = array();
  $items['generateUserLocalResourcesTable'] = array(
    'page callback' => 'generateUserLocalResourcesTable',
    'access callback' => TRUE,
  );
  $items['generateAllLocalResourcesTable'] = array(
    'page callback' => 'generateAllLocalResourcesTable',
    'access callback' => TRUE,
  );

  // Manage My Topics ajax urls
  $items['manage_my_topics/save_topic'] = array(
    'page callback' => 'save_lgc_topic',
    'access callback' => TRUE,
  );

  $items['manage_my_topics/remove_topic'] = array(
    'page callback' => 'remove_lgc_topic',
    'access callback' => TRUE,
  );

  $items['manage_my_topics/load_view'] = array(
    'page callback' => 'load_view',
    'access callback' => TRUE,
  );

  $items['load_data_from_rcs'] = array(
    'page callback' => 'load_data_from_rcs',
    'access callback' => TRUE,
  );

  $items['rcs_lgc_resources_json_all'] = array(
    'page callback' => 'rcs_lgc_resources_json_all',
    'access callback' => TRUE,
  );

  $items['rcs_lgc_resources_json_by_user'] = array(
    'page callback' => 'rcs_lgc_resources_json_by_user',
    'access callback' => TRUE,
  );

  $items['rcs_lgc_resources_json_by_topic'] = array(
    'page callback' => 'rcs_lgc_resources_json_by_topic',
    'access callback' => TRUE,
  );
  $items['rcs_load_topics'] = array(
    'page callback' => 'rcs_load_topics',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_theme_registry_alter().
 */
function recommended_resources_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'recommended_resources');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}


/**
 * Creates Session array if does not already exists.
 * Checks session for topic tid
 * Return true if User has saved tid, false otherwise
 * @param $tid
 * @return bool
 */
function is_user_topic_saved($tid) {
  if (isset($_SESSION['user_lgc_topics'])) {
    // TODO: is there a way to do this without using a session variable? Ben and I are 'not thrilled about this'
    drupal_session_start(); // use drupal session
    $topics = $_SESSION['user_lgc_topics'];

    return array_key_exists($tid, $topics);
  }
  else {
    $_SESSION['user_lgc_topics'] = array();
    global $user;
    $user_data = user_load($user->uid);
    $lgc_topics = $user_data->field_lgc_topics_of_interest[LANGUAGE_NONE];

    foreach ($lgc_topics as $topic) {
      $_SESSION['user_lgc_topics'][$topic['tid']] = taxonomy_term_load($topic['tid'])->name;
    }
    return is_user_topic_saved($tid);
  }
}

/**
 * Returns html for multiselect for lgc topics
 */
function lgc_topics_multiselect() {
  $multi_select = "<div id='lgc-topics-filter'><select id='lgc-topics-select' multiple>";
  $vocab = taxonomy_vocabulary_machine_name_load("lgc_topics");
  $terms = taxonomy_get_tree($vocab->vid);
  foreach ($terms as $obj) {
    $tid = $obj->tid;
    $name = $obj->name;
    $multi_select .= "<option value=$tid>$name</option>";
  }
  $multi_select .= "</select> <button id='apply-lgc-topics'>Apply</button></div>";
  return $multi_select;
}

function xml2array($xmlObject, $out = array()) {
  foreach ((array) $xmlObject as $index => $node) {
    $out[$index] = (is_object($node)) ? xml2array($node) : $node;
  }

  return $out;
}

/**
 * Implements hook_form_alter().
 */
function recommended_resources_form_alter(&$form, &$form_state, $form_id) {


  if ($form_id == 'lgc_resource_node_form') {
    drupal_add_js(drupal_get_path('module', 'recommended_resources') . "/js/preview_url_form.js", "file");
    drupal_add_css(drupal_get_path('module', 'recommended_resources') . "/css/recommended_resources.css", "file");

    hide($form['additional_settings']);
    hide($form['actions']['preview']);

    // Make sure resource is marked as published
    $form['options']['status'] = array(
      '#type' => 'value',
      '#value' => 1
    );


    $form_state['rebuild'] = TRUE;

    $form['#attributes']['novalidate'] = '1';
    $form['#validate'][] = 'recommended_resources_form_validate';

    $form['field_lgc_link'][LANGUAGE_NONE][0]['value']['#field_suffix'] = "<a class='usa-button' id='new-lgc-resource-url-preview' href='#'>Preview</a>";

    $form['actions']['submit']['#submit'][] = 'new_lgc_resource_form_redirect';
    $form['actions']['#suffix'] = "<div class='resource-edit-cancel-link'>" . l(t('Cancel'), '/local-resource-editor', array('attributes' => array('class' => 'link usa-button usa-button-outline'))) . "</div>";

  }
}


function recommended_resources_form_validate($form, &$form_state) {
  $edit_form = FALSE;
  $delete_form = FALSE;
  $changed_title = FALSE;

  $input_title = $form_state['input']['title'];
  $saved_title = $form['title']['#default_value'];


  if (!empty($form_state['values']['delete'])) {
    $edit_form = TRUE;
  }
  if ($form_state['input']['op'] == 'Delete') {
    $delete_form = TRUE;
  }
  if ($input_title != $saved_title) {
    $changed_title = TRUE;
  }


  if (!$delete_form) {
    $url = $form_state['values']['field_lgc_link'][LANGUAGE_NONE][0]['value'];
    if (!valid_url($url, TRUE)) {
      $message = "Invalid Web URL (include http or https prefix).";
      form_set_error('field_lgc_link', $message);
    }

    if ($changed_title || !$edit_form) {
      /// Validate Duplicates/
      if (db_query("SELECT count(*) FROM {node} WHERE type = 'lgc_resource' and  title = :title;", array(':title' => $input_title))->fetchField()) {
        // If it is, give an error
        $message = "This resource has already been added. Please enter another.";
        form_set_error('title', $message);
      }
    }
  }
}


/**
 * Hook_node_presave
 */
function recommended_resources_node_presave($node) {
  global $user;
  // Ensure custom content type is assigned to correct author
  if ($node->type === 'lgc_resource') {
    $node->uid = $user->uid;
  }
}

function new_lgc_resource_form_redirect($form, &$form_state) {
  drupal_goto('/local-resource-editor');
}


function generateUserLocalResourcesTable() {
  set_user_lgc_topic_session();
  $table = views_embed_view('lgc_resources', 'rcs_resources_user');
  print $table;
}

function generateAllLocalResourcesTable() {
//  if (isset($_POST['filters'])) {
//    $topics = xssafe($_POST['filters']);
//    $tids = implode('+', $topics);
//    $table = views_embed_view('recommended_resources', 'block_to_be_rendered', $tids);
//  }
//  else {
  $table = views_embed_view('lgc_resources', 'rcs_resources_all');
//  }
  print $table;
}

/**
 * Accepts POST request with "tid" param
 * Saves LGC topic to current user with tid
 * @return array
 */
function save_lgc_topic() {
  // Access current user lgc topics (tids)
  global $user;
  $user_data = user_load($user->uid);
  $user_interests = $user_data->field_lgc_topics_of_interest;
  $response = array();

  // Check if POST tid is set
  if (!isset($_POST['tid'])) {
    $response['error'] = TRUE;
    $response['message'] = 'Must include TID in POST as \'tid\'';
    print $response;
    exit();
  }


  //Add tid to users preexisting lgc topic tids
  $tid = $_POST['tid'];
  $user_interests[LANGUAGE_NONE][] = array('tid' => $tid);
  $edit = array(
    'field_lgc_topics_of_interest' => $user_interests
  );

  // Save changes, return error exception if fails
  try {
    user_save($user_data, $edit);
    $response['error'] = FALSE;
    $response['message'] = 'Successfully saved tid- ' . $tid;
    $_SESSION['user_lgc_topics'][$tid] = taxonomy_term_load($tid)->name;
  } catch (Exception $e) {
    $response['error'] = TRUE;
    $response['message'] = array('Failed with exception' => $e);
  }
  print json_encode($response);
}


/**
 * Accepts POST request with "tid" param
 * Removes LGC topic from current user with tid
 * @return array
 */
function remove_lgc_topic() {
  // Access current user lgc topics (tids)
  global $user;
  $user_data = user_load($user->uid);
  $user_interests = $user_data->field_lgc_topics_of_interest;
  $response = array();

  // Check if POST tid is set
  if (!isset($_POST['tid'])) {
    $response['error'] = TRUE;
    $response['message'] = 'Must include TID in POST as \'tid\'';
    print $response;
    exit();
  }
  //Remove tid to users preexisting lgc topic tids
  $tid_to_remove = xssafe($_POST['tid']);
  foreach ($user_interests[LANGUAGE_NONE] as $key => $topic) {
    if ($topic['tid'] == $tid_to_remove) {
      unset($user_interests[LANGUAGE_NONE][$key]);
    }
  }

  $edit = array(
    'field_lgc_topics_of_interest' => $user_interests
  );

  // Save changes, return error exception if fails
  try {
    user_save($user_data, $edit);
    unset($_SESSION['user_lgc_topics'][$tid_to_remove]);
    $response['error'] = FALSE;
    $response['message'] = 'Successfully removed tid- ' . $tid_to_remove;
  } catch (Exception $e) {
    $response['error'] = TRUE;
    $response['message'] = array('Failed with exception' => $e);
  }
  print json_encode($response);
}


function set_user_lgc_topic_session() {
  $_SESSION['user_lgc_topics'] = array();
  global $user;
  $user_data = user_load($user->uid);
  $lgc_topics = $user_data->field_lgc_topics_of_interest[LANGUAGE_NONE];
  foreach ($lgc_topics as $topic) {
    $_SESSION['user_lgc_topics'][$topic['tid']] = taxonomy_term_load($topic['tid'])->name;
  }
}

function load_view() {
  set_user_lgc_topic_session();
  $table = views_embed_view('lgc_manage_my_topics', 'block');
  print $table;
  exit();
}


function load_data_from_rcs() {
  $cache = variable_get('rcs_cache');
  $time_last_loaded = variable_get('rcs_cache_load_time');
  $current_time = time();
  $time_diff = ($current_time - $time_last_loaded) / 60;
  if (!isset($cache) || $time_diff >= 1) {
    module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
    if (feature_toggle_get_status('sample_rcs_data')) {
      $response = new stdClass();
      $response->data = file_get_contents(drupal_get_path('module', 'recommended_resources') . '/sample-response.xml');
    } else {
      $url = "https://ends2.epa.gov/RestProxy/query?Node=.NetNode2&Dataflow=RCS&Request=GetRCSResourcesByCategoryTag_v1.0&Params=CategoryTag|Local+Government";
      $response = drupal_http_request($url, array(
        'headers' => array('Content-Type' => 'text/xml'),
        'method' => 'GET',
      ));
    }

    $xmlobj = simplexml_load_string($response->data);
    $resources = xml2array($xmlobj->Results->NewDataSet);
    $resources_array = array("resources" => array());
    $processed_topics = array();
    $vocabulary = taxonomy_vocabulary_machine_name_load('lgc_topics');
    $vid = $vocabulary->vid;
    $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
    $term_tid_mapping = array();
    $remaining_terms = array();
    foreach ($terms as $tid => $term_data) {
      $term_tid_mapping[$term_data->name] = $tid;
      $remaining_terms[$term_data->name] = $tid;
    }
    foreach ($resources['Resource'] as $simpleXML) {
      $resource_array = xml2array($simpleXML);
      $topic = $resource_array['TopicText'];
      if ($topic !== '') {
        $topic = trim(preg_replace("/[^A-Za-z0-9 ]/", '', $topic));
        $resources_array['DescriptionText'] = trim(preg_replace("/[^A-Za-z0-9 ]/", '', $resources_array['DescriptionText']));
        // Found topic, remove from remaining list
        unset($remaining_terms[$topic]);
        if (!isset($term_tid_mapping[$topic])) {
          // adds topic to tid_mapping
          add_new_rcs_topic_to_taxonomy($topic, $vid, $term_tid_mapping);
        }
        if (!isset($processed_topics[$topic])) {
          $tid = $term_tid_mapping[$topic];
          $processed_topics[$topic] = $tid;
        }
        else {
          $tid = $processed_topics[$topic];
        }
        $resource_array['tid'] = $tid;
        $resources_array["resources"][] = $resource_array;
      }
    }
    // Delete remaining terms
    foreach ($remaining_terms as $term_to_delete => $tid) {
      taxonomy_term_delete($tid);
    }


    variable_set('rcs_cache', $resources_array);
    variable_set('rcs_cache_load_time', time());
    return $resources_array;
  }
  else {
    return $cache;
  }
}


/**
 * Returns json of all lgc information
 */
function rcs_lgc_resources_json_all() {
  $resource_array = load_data_from_rcs();
  print json_encode($resource_array);
  exit();
}

function lgc_user_tids($uid) {
  $user_data = user_load($uid);
  $user_lgc_topic_tids = array();
  $user_lgc_topic_saved_field = $user_data->field_lgc_topics_of_interest;
  if (isset($user_lgc_topic_saved_field[LANGUAGE_NONE])) {
    foreach ($user_lgc_topic_saved_field[LANGUAGE_NONE] as $data) {
      $user_lgc_topic_tids[] = intval($data['tid']);
    }
  }
  return $user_lgc_topic_tids;
}

/**
 * returns lgc resource by what topics the user has selected in their profile or lgc widget
 */
function rcs_lgc_resources_json_by_user() {

  global $user;
  $uid = $user->uid;
  $user_lgc_tids = lgc_user_tids($uid);
  $resources_array = load_data_from_rcs();
  $response = array('resources' => array());
  foreach ($resources_array['resources'] as $resource_data) {
    $tid = $resource_data['tid'];
    if (in_array($tid, $user_lgc_tids)) {
      $response['resources'][] = $resource_data;
    }
  }
  print json_encode($response);
  exit();
}

/**
 * returns lgc resources filtered by topic
 */
function rcs_lgc_resources_json_by_topic() {
  $search_topic = "Climate Change";
  $filtered_resources_array = array("resources" => array());
  $resources_array = load_data_from_rcs();
  foreach ($resources_array['resources'] as $resource_data) {
    $topic = $resource_data['TopicText'];
    if ($topic === $search_topic) {
      $filtered_resources_array["resources"][] = $resource_data;
    }
  }
  print json_encode($filtered_resources_array);
  exit();
}

/**
 * Loads from  RCS endpoint. Restrict return to array of topics
 */
function rcs_load_topics() {
  $resources_array = load_data_from_rcs();
  $topics = array();
  foreach ($resources_array['resources'] as $resource_data) {
    $topic = $resource_data['TopicText'];
    if (!in_array($topic, $topics) && $topic) {
      $topics[] = $resource_data['TopicText'];
    }
  }
  print json_encode($topics);
  exit();
}

function rcs_filtered_by_tids($tids) {
  $resources_array = load_data_from_rcs();
  foreach ($resources_array['resources'] as $resource_data) {

  }
}

/**
 * Saves Topic in system and adds to tid_term_mapping
 * @param $topic
 * @return int
 */
function add_new_rcs_topic_to_taxonomy($topic, $vid, &$tid_term_mapping) {
  $term = new stdClass();
  $term->name = $topic;
  $term->vid = $vid;
  taxonomy_term_save($term);
  $tid = $term->tid;
  $tid_term_mapping[$topic] = $tid;
}

