<?php
/**
 * Implements hook_menu().
 **/
function other_items_of_interest_menu() {
  $items = array();
  $items['additional_resources/current_area_of_interest_json'] = array(
    'page callback' => 'current_area_table_datatable_json',
    'access callback' => TRUE,
  );
  return $items;
}

function current_area_table_datatable_json() {
  $o = new AdditionalResources();
  $o->loadAdditionalResources();
}


/**
 * Implements hook_block_info().
 */
function other_items_of_interest_block_info() {
  $blocks = array();
  $blocks['other_items_of_interest'] = array(
    'info' => t('Additional Resources'),
  );
  return $blocks;
}


/**
 * Implements hook_theme().
 * @see http://www.devdungeon.com/content/using-tpl-template-files-custom-drupal-7-modules
 */
function other_items_of_interest_theme() {

  return array(
    // Name to be called with theme(). theme('other_items_of_interest')
    'other_items_of_interest' => array(
      'template' => 'other-items-of-interest',
      'path' => drupal_get_path('module', 'other_items_of_interest') . '/templates'
    ),
    'other_items_of_interest_topic_selection' => array(
      'template' => 'manage-my-topics',
      'path' => drupal_get_path('module', 'other_items_of_interest') . '/templates'
    ),
    'lgc_about_content' => array(
      'template' => 'lgc-about',
      'path' => drupal_get_path('module', 'other_items_of_interest') . '/templates'
    )
  );
}

/**
 * Implements hook_block_view().
 */
function other_items_of_interest_block_view($delta = '') {
  $block = array();
  if ($delta == 'other_items_of_interest') {
    // Check user permissions
    if (user_access('access content')) {
      // Variables to be accessed in JS

      if (isset($_SESSION['default_location_name']) && $_SESSION['default_location_name'] != '') {
        $inital_location = $_SESSION['default_location_name'];
      } else {
        $inital_location = "Durham, NC";
      }
      $columns = [
        ['title' => "Source"],
        ['title' => "Resource"],
        ['title' => "Topic"],
      ];
      $lgc_settings =
        ['additional_resources' =>
          [
            'columns' => $columns,
            'all_resources' => lgc_datatables_return(lgc_resources_json_all()),
            'user_resources' => lgc_datatables_return(lgc_resources_json_by_user()),
            'epa_resources' => [],
            'favorite_resources' => [],
            'initial_location' => $inital_location,
            'manage_my_topics_html' =>
              theme('other_items_of_interest_topic_selection', ['topics' => load_lgc_topics()]),
            'topics' => load_lgc_topics(),
            'user_topics' => load_user_lgc_topics(),
          ]
        ];
      drupal_add_js($lgc_settings, 'setting');


      // Set default LGC about html
      $lgc_about_html = theme('lgc_about_content');
      $config_about_html = variable_get('lgc_about_content', ['value' => '']);
      if ($config_about_html['value'] != '') {
        $lgc_about_html = $config_about_html['value'];
      }
      $block['subject'] = t('Additional Resources');
      $block['content'] = theme('other_items_of_interest', ['lgc_about_html' => $lgc_about_html]);
      return $block;
    }
  }
  return $block;
}

/**
 * Implements hook_form_alter().
 */
function other_items_of_interest_form_alter(&$form, &$form_state, $form_id) {


  global $user;
  if ($form_id == 'state_resource_node_form') {

    drupal_add_js(drupal_get_path('module', 'other_items_of_interest') . "/js/preview_url_form.js", ['scope' => 'footer', 'preprocess' => true, 'group' => JS_LIBRARY, 'type' => 'file', 'cache' => true, 'requires_jquery' => true]);
    drupal_add_css(drupal_get_path('module', 'other_items_of_interest') . "/css/state_resource_editor.css", ['preprocess' => true, 'group' => CSS_DEFAULT]);

    hide($form['additional_settings']);
    hide($form['actions']['preview']);

    // Make sure resource is marked as published
    $form['options']['status'] = array(
      '#type' => 'value',
      '#value' => 1
    );
    $form['#attributes']['novalidate'] = '1';
    $form_state['rebuild'] = TRUE;
    $form['#validate'][] = 'other_items_of_interest_form_validate';

    // Allow admin to edit the Source
    if ($user->uid > 1) {
      $form['title']['#attributes'] = array(
        'disabled' => 'disabled');
      $user_data = user_load($user->uid);
      $state = $user_data->field_admin_state[LANGUAGE_NONE][0]['safe_value'];
      $form['title']['#value'] = $state;
    }

    $form['title']['#description'] = "State code (such as NC for North Carolina), tribe, or US EPA.";
    $form['field_source_url'][LANGUAGE_NONE][0]['value']['#field_suffix'] = "<a class='usa-button' id='new-state-url-preview' href='#'>Preview</a>";
    $form['actions']['submit']['#submit'][] = 'new_state_form_redirect';
    $form['actions']['#suffix'] = "<div class='resource-edit-cancel-link'>" . l(t('Cancel'), '/resource-editor', array('attributes' => array('class' => 'link usa-button-outline usa-button'))) . "</div>";

  }
}

function other_items_of_interest_form_validate($form, &$form_state) {
  $edit_form = FALSE;
  $delete_form = FALSE;
  $changed_url = FALSE;

  $input_url = $form_state['values']['field_source_url'][LANGUAGE_NONE][0]['value'];
  $saved_url = $form['field_source_url'][LANGUAGE_NONE][0]['value']['#default_value'];

  if (!empty($form_state['values']['delete'])) {
    $edit_form = TRUE;
  }
  if ($form_state['input']['op'] == 'Delete') {
    $delete_form = TRUE;
  }

  if ($input_url != $saved_url) {
    $changed_url = TRUE;
  }

  if (!$delete_form) {
    if (ucwords($form_state['values']['title']) == 'EPA') {
      $form['title']['#value'] = 'US EPA';
      $form_state['values']['title'] = 'US EPA';
    }
    if (!valid_url($input_url, TRUE)) {
      $message = "Invalid Web URL (include http or https prefix).";
      form_set_error('field_source_url', $message);
    } // Else, for valid formatted link, verify that link is not broken
    else {
      $headers = get_headers($input_url, 1);
      if ($headers[0] == 'HTTP/1.1 200 OK') {
        // Do nothing - this links seems to work
      }
      else if ($headers[0] != 'HTTP/1.1 200 OK') {
        form_set_error('url', 'The link you tried - ' . $input_url . ' - does not seem to exist. Please check it and try again.');
      }
      else {
        form_set_error('url', 'There was a problem checking this link.  Please let the system admin know.');
      }
    }

    if (!empty($form_state['values']['delete'])) {
      $edit_form = TRUE;
    }
    /// Validate Duplicates/
    if ($changed_url || !$edit_form) {
      if (db_query("SELECT COUNT(*) FROM {field_data_field_source_url} WHERE field_source_url_value = :url;", array(':url' => $input_url))->fetchField()) {
        // If it is, give an error
        $message = "This url has already been added. Please enter another.";
        form_set_error('field_source_url', $message);
      }
    }
  }
}


/**
 * Hook_node_presave
 */
function other_items_of_interest_node_presave($node) {
  global $user;
  // Ensure custom content type is assigned to correct author
  if ($node->type === 'state_resource') {
    $node->uid = $user->uid;
  }
}

function new_state_form_redirect($form, &$form_state) {
  drupal_goto('/resource-editor');
}


/**
 * Searches for common locations with preferred names or state codes.
 * Will return Resources that match the location of Tribes as well
 * @param $title
 * @return mixed
 */
function mapResourceTitlesToNids($title) {
  //@see https://gist.github.com/keithmorris/4155220
  $commonWords = array('a', 'able', 'about', 'above', 'abroad', 'according', 'accordingly', 'across', 'actually', 'adj', 'after', 'afterwards', 'again', 'against', 'ago', 'ahead', 'ain\'t', 'all', 'allow', 'allows', 'almost', 'alone', 'along', 'alongside', 'already', 'also', 'although', 'always', 'am', 'amid', 'amidst', 'among', 'amongst', 'an', 'and', 'another', 'any', 'anybody', 'anyhow', 'anyone', 'anything', 'anyway', 'anyways', 'anywhere', 'apart', 'appear', 'appreciate', 'appropriate', 'are', 'aren\'t', 'around', 'as', 'a\'s', 'aside', 'ask', 'asking', 'associated', 'at', 'available', 'away', 'awfully', 'b', 'back', 'backward', 'backwards', 'be', 'became', 'because', 'become', 'becomes', 'becoming', 'been', 'before', 'beforehand', 'begin', 'behind', 'being', 'believe', 'below', 'beside', 'besides', 'best', 'better', 'between', 'beyond', 'both', 'brief', 'but', 'by', 'c', 'came', 'can', 'cannot', 'cant', 'can\'t', 'caption', 'cause', 'causes', 'certain', 'certainly', 'changes', 'clearly', 'c\'mon', 'co', 'co.', 'com', 'come', 'comes', 'concerning', 'consequently', 'consider', 'considering', 'contain', 'containing', 'contains', 'corresponding', 'could', 'couldn\'t', 'course', 'c\'s', 'currently', 'd', 'dare', 'daren\'t', 'definitely', 'described', 'despite', 'did', 'didn\'t', 'different', 'directly', 'do', 'does', 'doesn\'t', 'doing', 'done', 'don\'t', 'down', 'downwards', 'during', 'e', 'each', 'edu', 'eg', 'eight', 'eighty', 'either', 'else', 'elsewhere', 'end', 'ending', 'enough', 'entirely', 'especially', 'et', 'etc', 'even', 'ever', 'evermore', 'every', 'everybody', 'everyone', 'everything', 'everywhere', 'ex', 'exactly', 'example', 'except', 'f', 'fairly', 'far', 'farther', 'few', 'fewer', 'fifth', 'first', 'five', 'followed', 'following', 'follows', 'for', 'forever', 'former', 'formerly', 'forth', 'forward', 'found', 'four', 'from', 'further', 'furthermore', 'g', 'get', 'gets', 'getting', 'given', 'gives', 'go', 'goes', 'going', 'gone', 'got', 'gotten', 'greetings', 'h', 'had', 'hadn\'t', 'half', 'happens', 'hardly', 'has', 'hasn\'t', 'have', 'haven\'t', 'having', 'he', 'he\'d', 'he\'ll', 'hello', 'help', 'hence', 'her', 'here', 'hereafter', 'hereby', 'herein', 'here\'s', 'hereupon', 'hers', 'herself', 'he\'s', 'hi', 'him', 'himself', 'his', 'hither', 'hopefully', 'how', 'howbeit', 'however', 'hundred', 'i', 'i\'d', 'ie', 'if', 'ignored', 'i\'ll', 'i\'m', 'immediate', 'in', 'inasmuch', 'inc', 'inc.', 'indeed', 'indicate', 'indicated', 'indicates', 'inner', 'inside', 'insofar', 'instead', 'into', 'inward', 'is', 'isn\'t', 'it', 'it\'d', 'it\'ll', 'its', 'it\'s', 'itself', 'i\'ve', 'j', 'just', 'k', 'keep', 'keeps', 'kept', 'know', 'known', 'knows', 'l', 'last', 'lately', 'later', 'latter', 'latterly', 'least', 'less', 'lest', 'let', 'let\'s', 'like', 'liked', 'likely', 'likewise', 'little', 'look', 'looking', 'looks', 'low', 'lower', 'ltd', 'm', 'made', 'mainly', 'make', 'makes', 'many', 'may', 'maybe', 'mayn\'t', 'me', 'mean', 'meantime', 'meanwhile', 'merely', 'might', 'mightn\'t', 'mine', 'minus', 'miss', 'more', 'moreover', 'most', 'mostly', 'mr', 'mrs', 'much', 'must', 'mustn\'t', 'my', 'myself', 'n', 'name', 'namely', 'nd', 'near', 'nearly', 'necessary', 'need', 'needn\'t', 'needs', 'neither', 'never', 'neverf', 'neverless', 'nevertheless', 'new', 'next', 'nine', 'ninety', 'no', 'nobody', 'non', 'none', 'nonetheless', 'noone', 'no-one', 'nor', 'normally', 'not', 'nothing', 'notwithstanding', 'novel', 'now', 'nowhere', 'o', 'obviously', 'of', 'off', 'often', 'oh', 'ok', 'okay', 'old', 'on', 'once', 'one', 'ones', 'one\'s', 'only', 'onto', 'opposite', 'or', 'other', 'others', 'otherwise', 'ought', 'oughtn\'t', 'our', 'ours', 'ourselves', 'out', 'outside', 'over', 'overall', 'own', 'p', 'particular', 'particularly', 'past', 'per', 'perhaps', 'placed', 'please', 'plus', 'possible', 'presumably', 'probably', 'provided', 'provides', 'q', 'que', 'quite', 'qv', 'r', 'rather', 'rd', 're', 'really', 'reasonably', 'recent', 'recently', 'regarding', 'regardless', 'regards', 'relatively', 'respectively', 'right', 'round', 's', 'said', 'same', 'saw', 'say', 'saying', 'says', 'second', 'secondly', 'see', 'seeing', 'seem', 'seemed', 'seeming', 'seems', 'seen', 'self', 'selves', 'sensible', 'sent', 'serious', 'seriously', 'seven', 'several', 'shall', 'shan\'t', 'she', 'she\'d', 'she\'ll', 'she\'s', 'should', 'shouldn\'t', 'since', 'six', 'so', 'some', 'somebody', 'someday', 'somehow', 'someone', 'something', 'sometime', 'sometimes', 'somewhat', 'somewhere', 'soon', 'sorry', 'specified', 'specify', 'specifying', 'still', 'sub', 'such', 'sup', 'sure', 't', 'take', 'taken', 'taking', 'tell', 'tends', 'th', 'than', 'thank', 'thanks', 'thanx', 'that', 'that\'ll', 'thats', 'that\'s', 'that\'ve', 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'thence', 'there', 'thereafter', 'thereby', 'there\'d', 'therefore', 'therein', 'there\'ll', 'there\'re', 'theres', 'there\'s', 'thereupon', 'there\'ve', 'these', 'they', 'they\'d', 'they\'ll', 'they\'re', 'they\'ve', 'thing', 'things', 'think', 'third', 'thirty', 'this', 'thorough', 'thoroughly', 'those', 'though', 'three', 'through', 'throughout', 'thru', 'thus', 'till', 'to', 'together', 'too', 'took', 'toward', 'towards', 'tried', 'tries', 'truly', 'try', 'trying', 't\'s', 'twice', 'two', 'u', 'un', 'under', 'underneath', 'undoing', 'unfortunately', 'unless', 'unlike', 'unlikely', 'until', 'unto', 'up', 'upon', 'upwards', 'us', 'use', 'used', 'useful', 'uses', 'using', 'usually', 'v', 'value', 'various', 'versus', 'very', 'via', 'viz', 'vs', 'w', 'want', 'wants', 'was', 'wasn\'t', 'way', 'we', 'we\'d', 'welcome', 'well', 'we\'ll', 'went', 'were', 'we\'re', 'weren\'t', 'we\'ve', 'what', 'whatever', 'what\'ll', 'what\'s', 'what\'ve', 'when', 'whence', 'whenever', 'where', 'whereafter', 'whereas', 'whereby', 'wherein', 'where\'s', 'whereupon', 'wherever', 'whether', 'which', 'whichever', 'while', 'whilst', 'whither', 'who', 'who\'d', 'whoever', 'whole', 'who\'ll', 'whom', 'whomever', 'who\'s', 'whose', 'why', 'will', 'willing', 'wish', 'with', 'within', 'without', 'wonder', 'won\'t', 'would', 'wouldn\'t', 'x', 'y', 'yes', 'yet', 'you', 'you\'d', 'you\'ll', 'your', 'you\'re', 'yours', 'yourself', 'yourselves', 'you\'ve', 'z', 'zero');
  $title = preg_replace('/\b(' . implode('|', $commonWords) . ')\b/', '', $title);

  $title_array = explode(',', $title);
  $query = db_select("node", 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'state_resource')
    ->condition('status', 1);

  $db_or = db_or();
  foreach ($title_array as $word) {
    $db_or->condition('title', '%' . db_like(trim($word)) . '%', 'LIKE');
  }
  $query->condition($db_or);

  $nids = $query->execute()->fetchCol();
  return $nids;
}

function loadUserResources() {
  global $user;
  $resources = array();
  $locations = array();

  $user_data = user_load($user->uid);
  $zip_codes = $user_data->field_zip_code[LANGUAGE_NONE];
  if (count($zip_codes) > 0) {
    foreach ($zip_codes as $elem) {
      $zip = $elem['field_field_zip_code'][LANGUAGE_NONE][0]['value'];
      $preferred = return_user_preferred_location($zip);
      if ($preferred) {
        $location = $preferred['preferred_name'];
      }
      else {
        $location = zip_code_lookup($zip)['state'];
      }
      if (!in_array($location, $locations)) {
        $locations[] = $location;
        $resources = array_merge($resources, mapResourceTitlesToNids($location));
      }
    }
  }
  if (isset($_SESSION['default_location_zip'])) {
    // add default state
    $state = zip_code_lookup($_SESSION['default_location_zip'])['state'];
    if (!in_array($state, $locations)) {
      $locations[] = $state;
      $resources = array_merge($resources, mapResourceTitlesToNids($state));
    }
  }

  /// Add users admin state if applicable
  if (in_array('state_admin', $user->roles)) {
    if (isset($user_data->field_admin_state[LANGUAGE_NONE])) {
      $admin_state = $user_data->field_admin_state[LANGUAGE_NONE][0]['safe_value'];
      // Reserve EPA for EPA tab
      if ($admin_state != 'US EPA' && !in_array($admin_state, $locations)) {
        $locations[] = $admin_state;
        $resources = array_merge($resources, mapResourceTitlesToNids($admin_state));
      }
    }
  }
  return $resources;
}

function generateAllAreasOfInterestTable() {
  $table = views_embed_view('additional_resources_all', 'block');
  print $table;
}


function generateFavoriteAreasOfInterestTable() {
  $users_favorite_resources = loadUserResources();
  $nids = implode('+', $users_favorite_resources);
  $table = views_embed_view('additional_resources_all', 'block', $nids);
  print $table;
}

// Takes state code for filtering
function generateCurrentAreaOfInterestTable() {
  if (isset($_GET['state'])) {
    $user_selected_state = xssafe($_GET['state']);
    if ($user_selected_state == 'US EPA') {
      $table = views_embed_view('additional_resources_all', 'us_epa');
    }
    else {
      $table = views_embed_view('additional_resources_all', 'current_location', $user_selected_state);
    }
    if ($table == '') {
      echo 'No saved resources for ' . $user_selected_state;
    }
    else {
      print $table;
    }
  }
}

function load_additional_resources() {


}



