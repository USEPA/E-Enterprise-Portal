<?php


/**
 * Implements hook_menu().
 **/
function my_cdx_menu() {

  $items = array();
  $items['admin/config/system/my-cdx'] = array(
    'title' => 'My CDX Settings',
    'description' => 'Manage My CDX Webservice Endpoint Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('my_cdx_settings'),
    'access arguments' => array('administer my cdx'),
    'file' => 'my_cdx.admin.inc',
  );
  $items['my-cdx/links-json'] = array(
    'page callback' => 'my_cdx_links_json_output',
    'access arguments' => array('access content'),
  );

  $items['my-cdx/link-details-json/%'] = array(
    'page callback' => 'my_cdx_json_link_details',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );

  $items['my-cdx/link-json-handoff/%'] = array(
      'page callback' => 'my_cdx_json_link_handoff',
      'page arguments' => array(2),
      'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function my_cdx_block_info() {
  $blocks = array();
  $blocks['my_cdx'] = array(
    'info' => t('My CDX Block'),
  );
  return $blocks;
}

/**
 * Implements hook_theme().
 * @see http://www.devdungeon.com/content/using-tpl-template-files-custom-drupal-7-modules
 */
function my_cdx_theme() {
  return array(
    // Name to be called with theme(). theme('my_cdx')
    'my_cdx' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use my-cdx.tpl.php
      'template' => 'my-cdx',
      'path' => drupal_get_path('module', 'my_cdx') . '/templates'
    ),
    'my_cdx_modal' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use my-cdx.tpl.php
      'template' => 'my-cdx-modal',
      'path' => drupal_get_path('module', 'my_cdx') . '/templates'
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function my_cdx_block_view($delta = '') {
  $block = array();

  if ($delta == 'my_cdx') {
    drupal_add_css(libraries_get_path('font-awesome-4.5.0') . "/css/font-awesome.min.css", [
      'preprocess' => TRUE,
      'group' => CSS_THEME
    ]);
    drupal_add_css(libraries_get_path('jqueryui') . "/themes/base/jquery.ui.tabs.css", "file");
    drupal_add_js(drupal_get_path('module', 'datatables') . '/dataTables/media/js/jquery.dataTables.js', [
      'scope' => 'footer',
      'preprocess' => TRUE,
      'group' => JS_LIBRARY,
      'type' => 'file',
      'cache' => TRUE,
      'requires_jquery' => TRUE
    ]);
    drupal_add_js(drupal_get_path('module', 'my_cdx') . '/js/my_cdx.js', [
      'scope' => 'footer',
      'preprocess' => TRUE,
      'group' => JS_LIBRARY,
      'type' => 'file',
      'cache' => TRUE,
      'requires_jquery' => TRUE
    ]);
    drupal_add_css(drupal_get_path('module', 'my_cdx') . '/css/my_cdx.css', [
      'preprocess' => TRUE,
      'group' => CSS_THEME
    ]);

    // Set Modal Template
    $modal_html = theme('my_cdx_modal');
    drupal_add_js(array("myCDXModalTemplate" => $modal_html), 'setting');

    if (user_access('access content')) { //good idea to check user perms here
      $block['subject'] = t('App Connect');
      $block['content'] = theme('my_cdx');
      return $block;
    }
  }

  return $block;
}

/**
 * Convert status from CDX into user friendly, readable status
 * @param $status
 * @return string
 */
function processCDXStatus($status) {

  switch ($status) {
    case "AwaitingApproval":
      $status = "Awaiting Approval";
      break;
    case "AwaitingDigitalCertificate":
      $status = "Awaiting DSA Approval";
      break;
    case "AwaitingElectronicSignatureAgreement":
      $status = "Awaiting ESA Approval";
      break;
    case "AwaitingSponsorship":
      $status = "Awaiting Sponsorship";
      break;
    case "OfflineTemporary":
      $status = "Temporarily Offline";
      break;
  }

  return $status;
}

/**
 * Loop through statuses in an array and return status string
 * @param $status_array
 * @return string
 */
function printStatuses($status_array) {
  $statuses_string = "";
  // Alphabetize statuses
  asort($status_array);
  foreach ($status_array as $status) {
    $statuses_string .= '<div class="my-cdx-status">' . processCDXStatus($status) . '</div>';
  }
  return $statuses_string;
}

/**
 * Callback for 'my-cdx/links-json' menu item
 * @see https://www.webwash.net/drupal/articles/getting-started-json-drupal-7 (JSON Endpoints)
 */
function my_cdx_links_json_output() {
  if ($input = load_my_cdx_data()) {
    module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
    // convert the data into a format that DataTables ajax can understand
    $output = array();
    foreach ($input as $value) {
      if (feature_toggle_get_status('mycdx_connections')) {
        // If status is not active, do not allow link to be clicked
        if (!in_array("Active", $value['statuses'])) {
          $link = $value['data']['role'];
        }
        else {
          $link = '<a data-role-description="' . $value['data']['role_description'] . '" ' .
            'data-acronym="' . $value['data']['data_acronym'] . '" ' .
            'data-role-ids="' . implode('|', $value['role_ids']) . '" ' .
            'class="cdx-link" href="javascript:void(0);">' .
            $value['data']['role'] .
            '</a>';
        }
        $output[] = array(
          $value['data']['program_service_name'],
          printStatuses($value['statuses']),
          $link,
        );
      }
      else {
        $output[] = array(
          $value['program_service_name'],
          processCDXStatus($value['status']),
          $value['role'],
        );
      }
    }
    drupal_json_output(array('data' => $output));
  }
  else {
    // TODO: an error occurred, handle it here
    // Send empty json so Datatables does not break
    drupal_json_output(array('data' => array()));
  }
}

/**
 * Callback for 'my-cdx/link-details/%' menu item
 * @param $role_ids string (pipe-delimited)
 * @see https://www.webwash.net/drupal/articles/getting-started-json-drupal-7 (JSON Endpoints)
 */
function my_cdx_json_link_details($role_ids) {
  if ($input = load_my_cdx_link_details($role_ids)) {
    drupal_json_output($input);
  }
  else {
    // Send empty json so Datatables does not break
    drupal_json_output(array());
  }
}

/**
 * Callback for 'my-cdx/link-json-handoff/%' menu item
 */
function my_cdx_json_link_handoff($role_id) {
  if ($input = fetch_my_cdx_link_handoff($role_id)) {
    drupal_json_output($input);
  }
  else {
    // Send empty json to Data-tables
    drupal_json_output(array());
  }
}



/**
 * Load My CDX data from cache, web service, or static source (for testing)
 * Restructure XML return into an array we can JSONify, or return FALSE if we have an error
 * @return mixed
 */
function load_my_cdx_data() {
  global $user;
  $data = &drupal_static(__FUNCTION__);

  if (!isset($data)) {
    module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
    if (feature_toggle_get_status('sample_mycdx_data')) {
      $data = fetch_sample_my_cdx_links();
    }
    else {
      // each user gets their own cached data
      $cache_key = 'my_cdx_data|' . $user->uid;

      $cache = cache_get($cache_key);
      // Check if cache was set and if the cache is stale, since cache_get() does not.
      // @see https://civicactions.com/blog/drupal-gotchya-cache_get-returns-expired-items/
      if ($cache && time() < $cache->expire) {
        // try cache first
        // @see https://www.lullabot.com/articles/a-beginners-guide-to-caching-data-in-drupal-7
        $data = $cache->data;
      }
      else {
        $data = fetch_my_cdx_links();

        // expire the cache every ___ minutes
        $expire_ts = time() + (intval(variable_get('my_cdx_cache_reset_time', 5)) * 60);
        module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
        if (!feature_toggle_get_status('cdx_dev_mode')) {
          cache_set($cache_key, $data, 'cache', $expire_ts);
        }
      }
    }
  }
  return $data;
}

/**
 * Load My CDX data from cache, web service, or static source (for testing)
 * Restructure XML return into an array we can JSONify, or return FALSE if we have an error
 * @param $role_ids string (pipe-delimited)
 * @return mixed
 */
function load_my_cdx_link_details($role_ids) {
  global $user;
  $data = &drupal_static(__FUNCTION__);

  if (!isset($data)) {
    module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
    if (feature_toggle_get_status('sample_mycdx_data')) {
      $data = fetch_sample_my_cdx_link_details();
    }
    else {
      // setup distinct caches for each role that a given user has
      $cache_key = implode('|', array(
        'my_cdx_link_details',
        $user->uid,
        $role_ids,
      ));

      $cache = cache_get($cache_key);
      // Check if cache was set and if the cache is stale, since cache_get() does not.
      // @see https://civicactions.com/blog/drupal-gotchya-cache_get-returns-expired-items/
      if ($cache && time() < $cache->expire) {
        // try cache first
        // @see https://www.lullabot.com/articles/a-beginners-guide-to-caching-data-in-drupal-7
        $data = $cache->data;
      }
      // The cache was set but with invalid data
      if (!isset($data)) {
        $data = fetch_my_cdx_link_details($role_ids);

        // expire the cache every ___ minutes
        $expire_ts = time() + (intval(variable_get('my_cdx_cache_reset_time', 5)) * 60);
        module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
        if (!feature_toggle_get_status('cdx_dev_mode')) {
          cache_set($cache_key, $data, 'cache', $expire_ts);
        }
      }
    }
  }

  if (feature_toggle_get_status('sample_instant_connect')) {
    // strip down the result to only 1 org and 1 role
    $new_data = array(
      'orgCount' => 1,
    );

    foreach ($data['organizations'] as $key => $value) {
      foreach ($value['programClients'] as $k2 => $v2) {
        $new_data['organizations'][$key] = array(
          'orgName' => $value['orgName'],
          'clientCount' => 1,
          'programClients' => array(
            $k2 => $v2,
          )
        );
        break;
      }
      break;
    }

    $data = $new_data;
  }

  return $data;
}

/**
 * Load My CDX data from cache, web service, or static source (for testing)
 */
function load_my_cdx_link_handoff($role_id){
  global $user;
  $data = &drupal_static(__FUNCTION__);

  if (!isset($data)) {
    module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
    if (feature_toggle_get_status('sample_mycdx_data')) {
      $data = fetch_sample_my_cdx_link_handoff();
    }
    else {
      // setup distinct caches for each role that a given user has
      $cache_key = implode('|', array(
          'my_cdx_link_handoff',
          $user->uid,
          $role_id,
      ));

      if ($cache = cache_get($cache_key)) {
        // try cache first
        $data = $cache->data;
      }
      // The cache was set but with invalid data
      if (!isset($data)) {
        $data = fetch_my_cdx_link_handoff($role_id);

        // expire the cache every ___ minutes
        $expire_ts = time() + (intval(variable_get('my_cdx_cache_reset_time', 5)) * 60);
        cache_set($cache_key, $data, 'cache', $expire_ts);
      }
    }
  }
  return $data;
}

/**
 * Easy way to fake the status data in the Sample Links.
 * @return mixed
 */
function fetchRandomStatus() {
  $possible_statuses = array(
    "Inactive",
    "Active",
    "AwaitingApproval",
    "AwaitingDigitalCertificate",
    "AwaitingElectronicSignatureAgreement",
    "AwaitingSponsorship"
  );
  $random_status_index = mt_rand(0, count($possible_statuses) - 1);
  return $possible_statuses[$random_status_index];
}

/**
 * Fetch Sample My CDX data
 */
function fetch_sample_my_cdx_links() {
  $data = array();

  $data[] = array(
    'program_service_name' => 'CEDRI: Compliance and Emissions Data Reporting Interface',
    'role' => 'Certifier',
    'role_id' => "00001",
    'data_acronym' => "CED0",
    'status' => fetchRandomStatus(),
    'statuses' => array(fetchRandomStatus()),
  );
  $data[] = array(
    'program_service_name' => 'CSPP: Submissions for Chemical Safety and Pesticide Program',
    'role' => 'Primary Authorized Official',
    'role_id' => "00002",
    'data_acronym' => "CED1",
    'status' => fetchRandomStatus(),
    'statuses' => array(fetchRandomStatus()),
  );
  $data[] = array(
    'program_service_name' => 'eDisclosure: Voluntary Disclosure System',
    'role' => 'Disclose / Certify',
    'role_id' => "00003",
    'data_acronym' => "CED2",
    'status' => fetchRandomStatus(),
    'statuses' => array(fetchRandomStatus()),
  );
  $data[] = array(
    'program_service_name' => 'EEP: General E-Enterprise Use',
    'role' => 'E-Enterprise Portal',
    'role_id' => "00004",
    'data_acronym' => "CED3",
    'status' => fetchRandomStatus(),
    'statuses' => array(fetchRandomStatus()),
  );
  $data[] = array(
    'program_service_name' => 'SSTS: Section Seven Tracking System',
    'role' => 'Primary Authorized Official',
    'role_id' => "00005",
    'data_acronym' => "CED4",
    'status' => fetchRandomStatus(),
    'statuses' => array(fetchRandomStatus()),
  );

  $data[] = array(
    'program_service_name' => 'SSTS: Section Seven Tracking System',
    'role' => 'Primary Authorized Official',
    'role_id' => "00005",
    'data_acronym' => "CED4",
    'status' => "Inactive",
    'statuses' => array("Inactive"),
  );

  module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
  foreach ($data as $key => $value) {
    if (feature_toggle_get_status('mycdx_connections')) {
      unset($data[$key]['status']);
    } else {
      unset($data[$key]['statuses']);
    }
  }





  return $data;
}

/**
 * Fetch My CDX data from SOAP service
 */
function fetch_my_cdx_links() {
  global $user;
  $account = user_load($user->uid);
  $user_id = $account->field_cdx_username[LANGUAGE_NONE][0]['value'];

  // fetch the data from the soap service
  $location = 'my_cdx.module';
  $my_cdx_client_access = return_my_cdx_token();
  if ($token = $my_cdx_client_access['token']) {
    // retrieve object from "RetrieveMyCdxLinks" service
    $params_for_data = array(
      'securityToken' => $token,
      'userId' => $user_id,
    );
    $result = callSOAPWithParams($my_cdx_client_access['client'], "RetrieveMyCdxLinks", $params_for_data, $location);

    // format it to be some sort of array, match the structure of fetch_sample_my_cdx_links()
    $data = array();
    // CDX service sends an object if the return is singular.
    // Convert the object to an array containing the object
    if (!is_array($result->response->links)) {
      $result->response->links = array($result->response->links);
    }


    foreach ($result->response->links as $link) {
      $key = $link->DataflowAcronym . ': ' . $link->DataflowName . '|' . $link->Description;

      // If key has not been stored, initialize
      if (!is_array($data[$key])) {
        $data[$key] = array(
          'statuses' => array(),
          'role_ids' => array() // array(30020, 30010)
        );
        $data[$key]['data'] = array(
          'program_service_name' => $link->DataflowAcronym . ': ' . $link->DataflowName,
          'role' => $link->Description, // TRI-MEWeb
          'data_acronym' => $link->DataflowAcronym,
          'role_description' => $link->Description,
        );
      }
      $status = $link->Status->code;
      if (!in_array($status, $data[$key]['statuses'])) {
        $data[$key]['statuses'][] = $status;
      }
      $data[$key]['role_ids'][] = $link->RoleId;
    }

    return $data;
  }
  else {
    return array();
  }
}

/**
 * Fetch Sample My CDX link details
 */
function fetch_sample_my_cdx_link_details() {
  $data = array(
    'orgCount' => 3,
    'organizations' => array(),
  );

  $data['organizations']['1234'] = array(
    'orgName' => 'org abc',
    'clientCount' => 4,
    'programClients' => array(
      '1234' => array(
        'clientName' => 'client1 abc',
      ),
      '1235' => array(
        'clientName' => 'client2 abc',
      ),
      '1236' => array(
        'clientName' => 'client3 abc',
      ),
      '1237' => array(
        'clientName' => 'client4 abc',
      ),
    ),
  );

  $data['organizations']['1236'] = array(
    'orgName' => 'org 2',
    'clientCount' => 4,
    'programClients' => array(
      '1234' => array(
        'clientName' => 'Aclient abc',
      ),
      '1235' => array(
        'clientName' => 'Bclient abc',
      ),
      '1236' => array(
        'clientName' => 'Cclient abc',
      ),
      '1237' => array(
        'clientName' => 'Dclient abc',
      ),
    ),
  );

  $data['organizations']['Single_Client'] = array(
    'orgName' => 'SINGLE',
    'clientCount' => 1,
    'programClients' => array(
      '1234' => array(
        'clientName' => 'Hans Solo',
      ),
    ),
  );


  return $data;
}

/**
 * Fetch a sample My CDX link handOff
 */
function fetch_sample_my_cdx_link_handoff(){
  $data = array(
    'userroleid' => 102258,
    'handoffurl' => 'https://devngn.epacdxnode.net/naas-webcdx-client-sample/'
  );

  return $data;
}

/**
 * Connects to MY CDX NAAS authentication wsdl and returns token
 * @return array
 */
function return_my_cdx_token() {
  $wsdl = variable_get('cdx_service_endpoint', "https://devngn.epacdxnode.net/cdx-register-II/services/RegisterMyCdxService?wsdl");
  $location = 'my_cdx.module';
  $client = connectToSOAPServerWithWSDL($wsdl, $location);
  if ($client->error) {
    return array("client" => FALSE, "token" => FALSE);
  }
  // Use wsdl to create token to retrieve user info
  $params_for_authenticate = array(
    "userId" => variable_get('eactivity_auth_reg_username'),
    "credential" => variable_get('eactivity_auth_reg_password'),
    "domain" => variable_get('eactivity_auth_reg_domain'),
    "authenticationMethod" => variable_get('eactivity_auth_reg_auth_method'),
  );

  $response = callSOAPWithParams($client->client, "Authenticate", $params_for_authenticate, $location);
  if ($response->error) {
    return array("client" => $client, "token" => FALSE);
  }

  return array(
    "client" => $client->client,
    "token" => $response->response->securityToken
  );
}

/**
 * Fetch My CDX link details from SOAP service
 * @param $role_ids string (pipe-delimited)
 */
function fetch_my_cdx_link_details($role_ids) {
  global $user;
  $account = user_load($user->uid);
  $user_id = $account->field_cdx_username[LANGUAGE_NONE][0]['value'];
  $location = 'my_cdx.module';
  $my_cdx_client_access = return_my_cdx_token();
  if ($token = $my_cdx_client_access['token']) {
    // retrieve objects from "RetrieveMyCdxLinkDetails" service
    $data = array("orgCount" => 0, "organizations" => array());
    $role_ids = explode('|', $role_ids);
    foreach ($role_ids as $role_id) {
      // make the SOAP call
      $params_for_data = array(
        'securityToken' => $token,
        'userId' => $user_id,
        'roleId' => $role_id,
      );
      $result = callSOAPWithParams($my_cdx_client_access['client'], "RetrieveMyCdxLinkDetails", $params_for_data, $location);
      if ($result->error) {
        continue;
      }

      // format it to be some sort of array, match the structure of fetch_sample_my_cdx_links()
      // CDX service sends an object if the return is singular.
      // Convert the object to an array containing the object
      if (!is_array($result->response->linkDetails)) {
        $result->response->linkDetails = array($result->response->linkDetails);
      }


      foreach ($result->response->linkDetails as $linkDetail) {

        // Only accept links that are Active
        if ($linkDetail->RoleStatus->code === "Active") {
          $userOrgId = $linkDetail->UserOrganizationId;
          if (!isset($data['organizations'][$userOrgId])) {
            $data['orgCount']++;
            $data['organizations'][$userOrgId] = array(
              'clientCount' => 0,
              'orgName' => $linkDetail->OrganizationName,
              'programClients' => array(),
            );
          }
          $data['organizations'][$userOrgId]["clientCount"]++;
          $data['organizations'][$userOrgId]["programClients"][] = array(
            'clientName' => $linkDetail->Subject,
            'roleName' => $linkDetail->RoleName,
            'userRoleId' => $linkDetail->UserRoleId,
          );
        }
      }

    }

    // Organizations have a 1 to many relationship with Program Clients. We alphabetize
    // program clients for each organization by clientName,
    // then alphabetize the organizations by orgName
    $organizations = array();
    foreach ($data['organizations'] as $org_obj) {
      $client_ids = array();
      foreach ($org_obj['programClients'] as $program_client) {
        $client_ids[] = $program_client;
      }
      // Sort clients for this organization
      usort($client_ids, function ($a, $b) {
        return strcmp($a["clientName"], $b["clientName"]);
      });
      // Reassign the programClients for this organization to the sorted client_ids
      $org_obj['programClients'] = $client_ids;
      $organizations[] = $org_obj;
    }
    usort($organizations, function ($a, $b) {
      return strcmp($a["orgName"], $b["orgName"]);
    });

    // Reassign the organizations to the sorted version
    $data['organizations'] = $organizations;

    return $data;
  }
  else {
    return array();
  }
}


/**
 * Fetch My CDX link handoff from SOAP service
 */
function fetch_my_cdx_link_handoff($role_id){
  $location = 'my_cdx.module';
  $my_cdx_client_access = return_my_cdx_token();
  if ($token = $my_cdx_client_access['token']) {
    // retrieve object from "RetrieveMyCdxLinkHandOff" service
    $params_for_data = array(
        'securityToken' => $token,
        'userRoleId' => $role_id,
        'clientIp' => $_SERVER['SERVER_ADDR']
    );
    $result = callSOAPWithParams($my_cdx_client_access['client'], "RetrieveMyCdxLinkHandOff", $params_for_data, $location);
    if ($result->error) {
      return array();
    }
    $data = array();
    $data['linkHandOff']['HandOffUrl'] = $result->response->linkHandOff->HandOffUrl;
    foreach ($result->response->linkHandOff->parameters->parameter as $key => $val) {
      $data['parameter'][] = array('Name' => $val->Name, 'Value' => $val->Value);
    }
    return $data;
  }
  else {
    return array();
  }
}
