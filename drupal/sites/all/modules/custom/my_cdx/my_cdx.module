<?php


/**
 * Implements hook_menu().
 **/
function my_cdx_menu(){

  $items = array();
  $items['admin/config/system/my-cdx'] = array(
    'title' => 'My CDX Settings',
    'description' => 'Manage My CDX Webservice Endpoint Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('my_cdx_settings'),
    'access arguments' => array('administer my cdx'),
    'file' => 'my_cdx.admin.inc',
  );
  $items['my-cdx/json'] = array(
    'page callback' => 'my_cdx_json_output',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function my_cdx_block_info() {
  $blocks = array();
  $blocks['my_cdx'] = array(
    'info' => t('My CDX Block'),
  );

  return $blocks;
}

/**
 * Implements hook_theme().
 * @see http://www.devdungeon.com/content/using-tpl-template-files-custom-drupal-7-modules
 */
function my_cdx_theme() {
  return array(
    // Name to be called with theme(). theme('my_cdx')
    'my_cdx' => array(
      // Default variables
      'variables' => array(),
      // Which .tpl.php file to use my-cdx.tpl.php
      'template' => 'my-cdx',
      'path' => drupal_get_path('module', 'my_cdx') . '/templates'
    ),
  );
}
/**
 * Implements hook_block_view().
 */
function my_cdx_block_view($delta = '') {
  drupal_add_css( libraries_get_path('font-awesome-4.5.0') . "/css/font-awesome.min.css", ['preprocess'=>true, 'group'=>CSS_DEFAULT]);
  drupal_add_css(libraries_get_path('jqueryui') . "/themes/base/jquery.ui.tabs.css", "file");
  drupal_add_js(drupal_get_path('module', 'datatables') . '/dataTables/media/js/jquery.dataTables.js', ['scope'=>'footer', 'preprocess'=>true, 'group'=>JS_LIBRARY, 'type'=>'file', 'cache'=>true, 'requires_jquery'=>true]);
  drupal_add_js(drupal_get_path('module', 'my_cdx') . '/my_cdx.js', ['scope'=>'footer', 'preprocess'=>true, 'group'=>JS_LIBRARY, 'type'=>'file', 'cache'=>true, 'requires_jquery'=>true]);
  drupal_add_css(drupal_get_path('module', 'my_cdx') . '/my_cdx.css', ['preprocess'=>true, 'group'=>CSS_DEFAULT]);


  $block = array();

  if ($delta = 'my_cdx') {
    if (user_access('access content')){ //good idea to check user perms here
      $block['subject'] = t('App Connect');
      $block['content'] = theme('my_cdx');
      return $block;
    }
  }

  return $block;
}

/**
 * Callback for 'my-cdx/json' menu item
 * @see https://www.webwash.net/drupal/articles/getting-started-json-drupal-7 (JSON Endpoints)
 */
function my_cdx_json_output() {
  if ($input = load_my_cdx_data()) {
    module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
    // convert the data into a format that DataTables ajax can understand
    $output = array();
    foreach ($input as $value) {
      if (feature_toggle_get_status('mycdx_connections')) {
        $output[] = array(
          $value['program_service_name'],
          '<a href="#' . $value['role_id'] . '">' . $value['role'] . '</a>',
        );
      } else {
        $output[] = array(
          $value['program_service_name'],
          $value['role'],
        );
      }
    }

    drupal_json_output(array('data' => $output));
  } else {
    // TODO: an error occurred, handle it here
    // Send empty json so Datatables does not break
    drupal_json_output(array('data' => array()));
  }
}

/**
 * Load My CDX data from cache, web service, or static source (for testing)
 * Restructure XML return into an array we can JSONify, or return FALSE if we have an error
 * @return mixed
 */
function load_my_cdx_data() {
  global $user;
  $data = &drupal_static(__FUNCTION__);

  if (!isset($data)) {
    module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');
    if (feature_toggle_get_status('sample_mycdx_data')) {
      $data = fetch_sample_my_cdx_links();
    } else {
      // each user gets their own cached data
      $cache_key = 'my_cdx_data|' . $user->uid;

      if ($cache = cache_get($cache_key)) {
        // try cache first
        // @see https://www.lullabot.com/articles/a-beginners-guide-to-caching-data-in-drupal-7
        $data = $cache->data;
      } else {
        $data = fetch_my_cdx_links();

        // expire the cache every ___ minutes
        $expire_ts = time() + (intval(variable_get('my_cdx_cache_reset_time', 5)) * 60);
        cache_set($cache_key, $data, 'cache', $expire_ts);
      }
    }
  }

  return $data;
}

/**
 * Fetch Sample My CDX data
 */
function fetch_sample_my_cdx_links() {
  $data = array();

  $data[] = array(
    'program_service_name' => 'CEDRI: Compliance and Emissions Data Reporting Interface',
    'role' => 'Certifier',
    'role_id' => "00001",
  );
  $data[] = array(
    'program_service_name' => 'CSPP: Submissions for Chemical Safety and Pesticide Program',
    'role' => 'Primary Authorized Official',
    'role_id' => "00002",
  );
  $data[] = array(
    'program_service_name' => 'eDisclosure: Voluntary Disclosure System',
    'role' => 'Disclose / Certify',
    'role_id' => "00003",
  );
  $data[] = array(
    'program_service_name' => 'EEP: General E-Enterprise Use',
    'role' => 'E-Enterprise Portal',
    'role_id' => "00004",
  );
  $data[] = array(
    'program_service_name' => 'SSTS: Section Seven Tracking System',
    'role' => 'Primary Authorized Official',
    'role_id' => "00005",
  );
  $data[] = array(
    'program_service_name' => 'CEDRI: Compliance and Emissions Data Reporting Interface',
    'role' => 'Certifier',
    'role_id' => "00001",
  );
  $data[] = array(
    'program_service_name' => 'CSPP: Submissions for Chemical Safety and Pesticide Program',
    'role' => 'Primary Authorized Official',
    'role_id' => "00002",
  );
  $data[] = array(
    'program_service_name' => 'eDisclosure: Voluntary Disclosure System',
    'role' => 'Disclose / Certify',
    'role_id' => "00003",
  );
  $data[] = array(
    'program_service_name' => 'EEP: General E-Enterprise Use',
    'role' => 'E-Enterprise Portal',
    'role_id' => "00004",
  );
  $data[] = array(
    'program_service_name' => 'SSTS: Section Seven Tracking System',
    'role' => 'Primary Authorized Official',
    'role_id' => "00005",
  );
  $data[] = array(
    'program_service_name' => 'CEDRI: Compliance and Emissions Data Reporting Interface',
    'role' => 'Certifier',
    'role_id' => "00001",
  );
  $data[] = array(
    'program_service_name' => 'CSPP: Submissions for Chemical Safety and Pesticide Program',
    'role' => 'Primary Authorized Official',
    'role_id' => "00002",
  );
  $data[] = array(
    'program_service_name' => 'eDisclosure: Voluntary Disclosure System',
    'role' => 'Disclose / Certify',
    'role_id' => "00003",
  );
  $data[] = array(
    'program_service_name' => 'EEP: General E-Enterprise Use',
    'role' => 'E-Enterprise Portal',
    'role_id' => "00004",
  );
  $data[] = array(
    'program_service_name' => 'SSTS: Section Seven Tracking System',
    'role' => 'Primary Authorized Official',
    'role_id' => "00005",
  );
  $data[] = array(
    'program_service_name' => 'CEDRI: Compliance and Emissions Data Reporting Interface',
    'role' => 'Certifier',
    'role_id' => "00001",
  );
  $data[] = array(
    'program_service_name' => 'CSPP: Submissions for Chemical Safety and Pesticide Program',
    'role' => 'Primary Authorized Official',
    'role_id' => "00002",
  );
  $data[] = array(
    'program_service_name' => 'eDisclosure: Voluntary Disclosure System',
    'role' => 'Disclose / Certify',
    'role_id' => "00003",
  );
  $data[] = array(
    'program_service_name' => 'EEP: General E-Enterprise Use',
    'role' => 'E-Enterprise Portal',
    'role_id' => "00004",
  );
  $data[] = array(
    'program_service_name' => 'SSTS: Section Seven Tracking System',
    'role' => 'Primary Authorized Official',
    'role_id' => "00005",
  );

  return $data;
}

/**
 * Fetch My CDX data from SOAP service
 */
function fetch_my_cdx_links() {
  global $user;

  // Extract out "_Via_CDX" string from username
  $user_id = $user->name;
  $cdx_pos = strrpos($user_id, "_Via_");
  if ($cdx_pos === FALSE) {
    // do not connect to SOAP service if the user is not coming from CDX
    return array();
  }
  $user_id = substr($user_id, 0, $cdx_pos);

  // fetch the data from the soap service
  $location = 'my_cdx.module';
  $wsdl = variable_get('cdx_service_endpoint', "https://devngn.epacdxnode.net/cdx-register-II/services/RegisterMyCdxService?wsdl");
  $client = connectToSOAPServerWithWSDL($wsdl, $location);

  if (!$client->error) {
    // Use wsdl to create token to retrieve user info
    $params_for_authenticate = array(
      "userId" => variable_get('eactivity_auth_reg_username'),
      "credential" => variable_get('eactivity_auth_reg_password'),
      "domain" => variable_get('eactivity_auth_reg_domain'),
      "authenticationMethod" => variable_get('eactivity_auth_reg_auth_method'),
    );
    $response = callSOAPWithParams($client->client, "Authenticate", $params_for_authenticate, $location);

    // retrieve object from "RetrieveMyCdxLinks" service
    $params_for_data = array(
      'securityToken' => $response->response->securityToken,
      'userId' => $user_id,
    );
    $result = callSOAPWithParams($client->client, "RetrieveMyCdxLinks", $params_for_data, $location);

    // format it to be some sort of array, match the structure of fetch_sample_my_cdx_links()
    $data = array();
    foreach($result->response->links as $link) {
      if ($link->Status->code === "Active") {
        $data[] = array(
          'program_service_name' => $link->DataflowAcronym . ': ' . $link->DataflowName,
          'role' => $link->Description,
          'role_id' => $link->RoleId,
        );
      }
    }

    return $data;
  } else {
    return array();
  }
}
