<?php
/**
 * @file
 * cdx_facility_management.features.inc
 */



/**
 * Implements hook_block_info().
 */
function cdx_facility_management_block_info()
{
    $blocks = array();
    $blocks['cdx_facility_widget'] = array(
        'info' => t('Facility Widget'),
    );
    return $blocks;
}


/**
 * Implements hook_theme().
 * @see http://www.devdungeon.com/content/using-tpl-template-files-custom-drupal-7-modules
 */
function cdx_facility_management_theme()
{
    return array(
        // Name to be called with theme(). theme('cdx_facility_management')
        'cdx_facility_management' => array(
            // Default variables
            'variables' => array(),
            // Which .tpl.php file to use cdx-facility-management.tpl.php
            'template' => 'cdx-facility-management',
            'path' => drupal_get_path('module', 'cdx_facility_management') . '/templates'
        ),
    );
}


/**
 * Implements hook_block_view().
 */
function cdx_facility_management_block_view($delta = '')
{
    $block = array();

    if ($delta === 'cdx_facility_widget') {
        // Add Drupal settings for renewed bridge token, and Facility Widget configurations
        if (user_access('access content')) { //good idea to check user perms here
            // Load feature toggling for using toggle: reuse_token_from_bridge
            module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');


            $user_settings = retrieve_cdx_user_data();
            $cdx_facility_management_settings = array();
            $cdx_facility_management_settings['user_data'] = $user_settings;
            $cdx_facility_management_settings['token_data'] = return_cdx_facility_management_token(FALSE);
            $cdx_facility_management_settings['resource_url'] = variable_get('cdx_facility_resource_url');
            $cdx_facility_management_settings['token_from_bridge'] = feature_toggle_get_status('reuse_token_from_bridge');
            drupal_add_js(array('cdx_facility_widget_settings' => $cdx_facility_management_settings), 'setting');
            $block['subject'] = t('My Facility Manager');
            $block['content'] = theme('cdx_facility_management');
            return $block;
        }
    }

    return $block;
}


/**
 * Implements hook_menu().
 **/


function cdx_facility_management_menu()
{
    $items = array();

    $items['return_cdx_facility_management_token'] = array(
        'page callback' => 'return_cdx_facility_management_token',
        'access callback' => TRUE,
    );

    $items['cdx_facility_configurations'] = array(
        'page callback' => 'cdx_facility_configurations',
        'access callback' => TRUE,
    );

    return $items;
}


function userMustLogOut($user_session_logout, $user_login_time)
{
    // user timeout in minutes
    $return = true;
    if (isset($user_login_time)) {
        $current_timestamp = time();
        $diff_hours = abs($current_timestamp - $user_login_time) / (60);
        if ($diff_hours < $user_session_logout) {
            $return = false;
        }
    }
    return $return;
}


function return_cdx_facility_management_token($is_print_json = TRUE)
{
    // Load feature toggling for using toggle: reuse_token_from_bridge
    module_load_include('inc', 'feature_toggle', 'includes/feature_toggle.api');

    global $user;
    $json_return = array();

    // Configurable settings for using Facility Widget locally
    // @see /admin/config/system/cdx-facility-widget
    $local_testing = variable_get('local_testing');
    $local_testing_user_id = variable_get('local_testing_user_id');

    // Configurable amount of minutes before the portal no longer allows Facility Widget access
    $user_session_logout = (int)variable_get('cdx_facility_user_logout_session');

    // Allow user to acces Facility widget locally with hard coded user id
    if ($local_testing || $user->uid === 1) {
        $user_id = $local_testing_user_id;
        $user_login_time = time();
    } else {
        // if user logged in without bridge, session is not set. Default logged in time to current time
        if (isset($_SESSION['login_timestamp'])) {
            $user_login_time = $_SESSION['login_timestamp'];
        } else {
            $user_login_time = time();
            $_SESSION['login_timestamp'] = $user_login_time;
        }
        //Extract out "_Via_CDX" string from user_name to pull roles from the Activity Data flow
        $user_id = $user->name;
        $cdx_pos = strrpos($user_id, "_Via_");
        if ($cdx_pos !== FALSE) {
            $user_id = substr($user_id, 0, $cdx_pos);
        }
    }


    // Check if user session has timed out. If so, do not grant access to Facility Widget
    if (userMustLogOut($user_session_logout, $user_login_time)) {
        $json_return['expired'] = true;
    } else {
        // Configurations from admin menu

        // @see /admin/config/system/cdx-facility-widget
        $frs_password = variable_get('cdx_facility_password');
        $wsdl = variable_get('cdx_facility_naas_wsdl');
        $token_expiration = variable_get('cdx_facility_token_expiration');

        // @see /admin/config/system/eactivity-dataflow
        $email = variable_get('cdx_node_token_email');
        $domain = variable_get('cdx_node_token_domain');
        $auth_method = variable_get('eactivity_auth_reg_auth_method');

        // Dynamic Server IP
        $server_ip = $_SERVER['SERVER_ADDR'];

        // Initialize connection with client
        $client = connectToSOAPServerWithWSDL($wsdl, "CDX Facility Management");

        if (!$client->error) {
            $client = $client->client;
            // Create new token- not using token from bridge
            if (!feature_toggle_get_status('reuse_token_from_bridge')) {
                // Create new token with CDX's user id
                $params_for_creation = array(
                    "userId" => $user_id,
                    "credential" => $frs_password,
                    "domain" => $domain,
                    "authMethod" => $auth_method,
                    "trustee" => $email,
                    "ip" => $server_ip,
                    "subjectData" => 'tbd=tbd',
                    "subject" => $user_id,
                    "issuer" => "EEP",
                    "tokenType" => 'csm',
                    'expiration' => $token_expiration,
                );
                $json_return = createNewToken($client, $params_for_creation);
            } else {
                // Use token from bridge and renew
                $token = $_SESSION['cdx_fmw_security_token'];

                // Immediately renew the NAAS token received from Bridge or newly created
                $token_renewal_data = renewToken($client, $email, $frs_password, $domain, $token);
                $json_return['user_id'] = $user_id;
                if (!$token_renewal_data['error']) {
                    $json_return['token'] = $token_renewal_data['token'];
                    // Reset the session bridge token with the renewed token
                    $_SESSION['cdx_fmw_security_token'] = $token_renewal_data['token'];
                } else {
                    unset($_SESSION['cdx_fmw_security_token']);
                }
            }
            $json_return['user_session_logout'] = $user_session_logout;
            $json_return['user_login_time'] = $user_login_time;
        } else {
            $json_return['error'] = TRUE;
        }
    }
    if ($is_print_json) {
        drupal_json_output($json_return);
    } else {
        return $json_return;
    }
}

function createNewToken($client, $params_for_creation)
{
    $response = callSOAPWithParams($client,
        "CreateSecurityToken",
        $params_for_creation,
        "CDX Facility Management");
    if (!$response->error) {
        $response = $response->response;
        $token = $response->return;
        $server_ip = $_SERVER['SERVER_ADDR'];
        $json_return = array(
            'token' => $token,
            'server_ip' => $server_ip,
            'error' => false,
            'user_id' => $params_for_creation['userId'],
        );
    } else
        $json_return = array('token' => '', 'error' => TRUE);
    return $json_return;
}

function renewToken($client, $email, $frs_password, $domain, $token)
{
    $return = array();

    $params_for_renewal = array(
        "userId" => $email,
        "password" => $frs_password,
        "domain" => $domain,
        "securityToken" => $token,
    );

    $response = callSOAPWithParams($client,
        "RenewSecurityToken",
        $params_for_renewal,
        "CDX Facility Management");

    if (!$response->error) {
        $response = $response->response;
        $new_token = $response->return;
        $return['token'] = $new_token;
    } else {
        $return['error'] = TRUE;
    }
    return $return;
}


function retrieve_cdx_user_data()
{
    global $user;
    $return = array();

    $local_testing = variable_get('local_testing');
    $local_testing_user_id = variable_get('local_testing_user_id');

    if ($local_testing || $user->uid == 1) {
        $user_id = $local_testing_user_id;
    }
    else {
        $user_id = $user->name;
    }

    //Extract out "_Via_CDX" string from user_name to pull roles from the Activity Data flow
    $cdx_pos = strrpos($user_id, "_Via_");
    if ($cdx_pos !== FALSE) {
        $user_id = substr($user_id, 0, $cdx_pos);
    }

    $allowed_program_roles = ['CEDRI', 'CSPP', 'eDisclosure'];

// Generate token as administrator to get user data
    $wsdl = variable_get('eactivity_auth_reg_wsdl');
    $client = connectToSOAPServerWithWSDL($wsdl, "CDX Facility Management");
    if ($client->error) {
        return array('error' => 'true', 'user' => $user_id);
    }
    $client = $client->client;
    $params = array(
        "userId" => variable_get('eactivity_auth_reg_username'),
        "credential" => variable_get('eactivity_auth_reg_password'),
        "domain" => variable_get('eactivity_auth_reg_domain'),
        "authenticationMethod" => variable_get('eactivity_auth_reg_auth_method'),
    );
    $response = callSOAPWithParams($client, "Authenticate", $params, "CDX Facility Management");
    if ($response->error) {
        return array('error' => 'true', 'user' => $user_id);
    }
    $response = $response->response;
    $token = $response->securityToken;
    if (!isset($token)) {
        return array('error' => 'true', 'user' => $user_id);
    }
    $user_params = array(
        "securityToken" => $token,
        "userId" => $user_id);

    $user_obj = callSOAPWithParams($client, "RetrieveUser", $user_params, "CDX Facility Management");
    if ($user_obj->error) {
        return array('error' => 'true', 'user' => $user_id);
    }
    $response = $user_obj->response;
    $user_sec_bundle = array(
        "securityToken" => $token,
        "user" => $response->User,
    );
    $org_val = null;
    $user_orgs = callSOAPWithParams($client, "RetrieveOrganizations", $user_sec_bundle, "CDX Facility Management");
    if ($user_orgs->error) {
        return array('error' => 'true', 'user' => $user_id);
    }
    $response = $user_orgs->response;
    // CDX returns object if single return and array if multiple
    if (is_array($response->Organization)) {
        foreach ($response->Organization as $index => $org_val) {
            $return = addCDXOrganization($return, $org_val, $token, $user_obj->response, $client, $allowed_program_roles);
        }
    } else {
        $org_val = $response->Organization;
        $return = addCDXOrganization($return, $org_val, $token, $user_obj->response, $client, $allowed_program_roles);
    }
    return $return;
}


function addCDXRole($json_return, $role, $org_id)
{
    $disallowed_types = ['State Reviewer', 'Primary Support', 'Secondary Support'];
    $role_obj = array();
    $role_type = $role->type->description;
    $status = $role->status->code;
    if (!in_array($role_type, $disallowed_types) && $status != 'Inactive') {
        $role_obj['type'] = $role_type;
        $role_obj['userRoleId'] = $role->userRoleId;
        if (!isset($json_return['organizations_to_roles'][$org_id]['roles'][$role->dataflow]))
            $json_return['organizations_to_roles'][$org_id]['roles'][$role->dataflow] = array();
        $json_return['organizations_to_roles'][$org_id]['roles'][$role->dataflow][] = $role_obj;
    }
    return $json_return;
}

function addCDXOrganization($json_return, $org_val, $token, $user_obj, $client, $allowed_program_roles)
{
    $org_id = $org_val->userOrganizationId;
    $org_name = $org_val->organizationName;
    $json_return['organizations_to_roles'][$org_id] = array('name' => $org_name);
    $user_sec_org_bundle = array(
        "securityToken" => $token,
        "user" => $user_obj->User,
        "org" => $org_val,
    );
    $user_roles = callSOAPWithParams($client, "RetrieveRoles", $user_sec_org_bundle, "CDX Facility Management");
    if ($user_roles->error)
        return $json_return;

    $user_roles = $user_roles->response;
    // Check if roles are assigned to organizat            ion
    if (!isset($user_roles->Role))
        return $json_return;

    // Check if multiple roles or single role
    if (is_array($user_roles->Role)) {
        foreach ($user_roles->Role as $key => $role) {
            if (in_array($role->dataflow, $allowed_program_roles))
                $json_return = addCDXRole($json_return, $role, $org_id);
        }
    } else {
        $role = $user_roles->Role;
        if (in_array($role->dataflow, $allowed_program_roles))
            $json_return = addCDXRole($json_return, $role, $org_id);
    }


    if (!isset($json_return['organizations_to_roles'][$org_id]['roles']))
        unset($json_return['organizations_to_roles'][$org_id]);

    return $json_return;
}
