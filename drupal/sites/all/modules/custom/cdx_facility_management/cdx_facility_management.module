<?php
/**
 * @file
 * cdx_facility_management.features.inc
 */


/**
 * Implements hook_theme_registry_alter().
 */
function cdx_facility_management_theme_registry_alter(&$theme_registry)
{
    // Defined path to the current module.
    $module_path = drupal_get_path('module', 'cdx_facility_management');
    // Find all .tpl.php files in this module's folder recursively.
    $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
    // Iterate through all found template file objects.
    foreach ($template_file_objects as $key => $template_file_object) {
        // If the template has not already been overridden by a theme.
        if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
            // Alter the theme path and template elements.
            $theme_registry[$key]['theme path'] = $module_path;
            $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
            $theme_registry[$key]['type'] = 'module';
        }
    }
}

/**
 * Implements hook_menu().
 **/


function cdx_facility_management_menu()
{
    $items = array();

    $items['cdx_facility_management_iframe'] = array(
        'page callback' => 'cdx_facility_management_iframe',
        'access callback' => TRUE,
    );
    $items['cdx_soap_test'] = array(
        'page callback' => 'cdx_soap_test',
        'access callback' => TRUE,
    );
    $items['return_cdx_security_token'] = array(
        'page callback' => 'return_cdx_security_token',
        'access callback' => TRUE,
    );
    $items['return_cdx_facility_management_token'] = array(
        'page callback' => 'return_cdx_facility_management_token',
        'access callback' => TRUE,
    );
    $items['retrieve_cdx_user_data'] = array(
        'page callback' => 'retrieve_cdx_user_data',
        'access callback' => TRUE,
    );
    $items['cdx_facility_configurations'] = array(
        'page callback' => 'cdx_facility_configurations',
        'access callback' => TRUE,
    );

    return $items;
}


/*
* Page callback sets up and returns the content for cdx-facility-management-iframe page
*/
function cdx_facility_management_iframe()
{
    try {
        $build = views_embed_view('cdx_facility_management', $display_id = 'default');
    } catch (Exception $e) {
        $build = '';
        echo $e;
    }
    print render($build);
}


function userMustLogOut($user_session_logout, $user_login_time)
{
    // user timeout in minutes
    $return = true;
    if (isset($user_login_time)) {
        $current_timestamp = time();
        $diff_hours = abs($current_timestamp - $user_login_time) / (60);
        if ($diff_hours < $user_session_logout) {
            $return = false;
        }
    }
    return $return;
}


function return_cdx_facility_management_token()
{
    global $user;
    $local_testing = variable_get('local_testing');
    $local_testing_user_id = variable_get('local_testing_user_id');
    if ($local_testing || $user->uid == 1) {
        $user_id = $local_testing_user_id;
        $user_login_time = time();
    } else {
        // if user logged in without bridge (single sign), session is not set.
        if (isset($_SESSION['login_timestamp']))
            $user_login_time = $_SESSION['login_timestamp'];
        else {
            $user_login_time = time();
            $_SESSION['login_timestamp'] = $user_login_time;
        }
        //Extract out "_Via_CDX" string from user_name to pull roles from the Activity Data flow
        $user_id = $user->name;
        $cdx_pos = strrpos($user_id, "_Via_");
        if ($cdx_pos !== FALSE) {
            $user_id = substr($user_id, 0, $cdx_pos);
        }
    }
    $json_return = array();
    $user_session_logout = (int)variable_get('cdx_facility_user_logout_session');

    // Check if user should be logged out to generate token
    if (userMustLogOut($user_session_logout, $user_login_time)) {
        $json_return['expired'] = true;
    } else {
        // Configurations
        $frs_password = variable_get('cdx_facility_password');
        $email = variable_get('cdx_node_token_email');
        $domain = variable_get('cdx_node_token_domain');
        $server_ip = $_SERVER['SERVER_ADDR']; // variable_get('frs_api_lookup_ip');
        $local = variable_get('cdx_facility_local');
        $wsdl = variable_get('cdx_facility_naas_wsdl');
        $token_expiration = variable_get('cdx_facility_token_expiration');
        $auth_method = variable_get('eactivity_auth_reg_auth_method');
        $cdx_resource_url = variable_get('cdx_facility_resource_url');


        //Temp for testing on aws
        $create_new_token_initially = variable_get('temp_create_new_token');

        //Connect to wsdl
        $client_connect_error = TRUE;
        if ($local) {
            $client = connectToSOAPServerWithWSDL(dirname(__FILE__) . '/' . $wsdl, "CDX Facility Management");
        } else {
            $client = connectToSOAPServerWithWSDL($wsdl, "CDX Facility Management");
        }

        if (!$client->error) {
            $client = $client->client;
            // Create new token- not using token from bridge
            if ($create_new_token_initially) {
                // Create new token with CDX's user id
                $params_for_creation = array(
                    "userId" => $user_id,
                    "credential" => $frs_password,
                    "domain" => $domain,
                    "authMethod" => $auth_method,
                    "trustee" => $email,
                    "ip" => $server_ip,
                    "subjectData" => 'tbd=tbd',
                    "subject" => $user_id,
                    "issuer" => "EEP",
                    "tokenType" => 'csm',
                    'expiration' => $token_expiration,
                );
                $json_return = createNewToken($client, $params_for_creation);
            } else {
                // Use token from bridge and renew
                $token = $_SESSION['cdx_fmw_security_token'];
                $params_for_renewal = array(
                    "userId" => $email,
                    "password" => $frs_password,
                    "domain" => $domain,
                    "securityToken" => $token,
                    "expiration" => $token_expiration,
                );
                // Immediately renew the NAAS token received from Bridge or newly created
                $json_return = renewToken($client, $params_for_renewal, $json_return);
            }
            $json_return['url'] = $cdx_resource_url;
            $json_return['user_session_logout'] = $user_session_logout;
            $json_return['user_login_time'] = $user_login_time;

            print json_encode($json_return);
        } else {
            $json_return['error'] = TRUE;
            print json_encode($json_return);
        }
    }
}

function createNewToken($client, $params_for_creation)
{
    $response = callSOAPWithParams($client,
        "CreateSecurityToken",
        $params_for_creation,
        "CDX Facility Management");
    if (!$response->error) {
        $response = $response->response;
        $token = $response->return;
        $server_ip = $_SERVER['SERVER_ADDR'];
        $json_return = array(
            'token' => $token,
            'server_ip' => $server_ip,
            'error' => false,
        );
    } else
        $json_return = array('token' => '', 'error' => TRUE);
    return $json_return;
}

function renewToken($client, $params_for_renewal, $json_return)
{
    $response = callSOAPWithParams($client,
        "RenewSecurityToken",
        $params_for_renewal,
        "CDX Facility Management");
    if (!$response->error) {
        $response = $response->response;
        $new_token = $response->return;
        $json_return['token'] = $new_token;
    } else
        $json_return['error'] = TRUE;
    return $json_return;
}


function retrieve_cdx_user_data()
{
    global $user;
    $json_return = array();

    $local_testing = variable_get('local_testing');
    $local_testing_user_id = variable_get('local_testing_user_id');
    if ($local_testing || $user->uid == 1)
        $user_id = $local_testing_user_id;
    else
        $user_id = $user->name;

    //Extract out "_Via_CDX" string from user_name to pull roles from the Activity Data flow
    $cdx_pos = strrpos($user_id, "_Via_");
    if ($cdx_pos !== FALSE) {
        $user_id = substr($user_id, 0, $cdx_pos);
    }

    $allowed_program_roles = ['CEDRI', 'CSPP', 'eDisclosure'];

// Generate token as administrator to get user data
    $wsdl = variable_get('eactivity_auth_reg_wsdl');
    $client = connectToSOAPServerWithWSDL($wsdl, "CDX Facility Management");
    if ($client->error) {
        print json_encode((array('error' => 'true', 'user' => $user_id)));
        return;
    }
    $client = $client->client;
    $params = array(
        "userId" => variable_get('eactivity_auth_reg_username'),
        "credential" => variable_get('eactivity_auth_reg_password'),
        "domain" => variable_get('eactivity_auth_reg_domain'),
        "authenticationMethod" => variable_get('eactivity_auth_reg_auth_method'),
    );
    $response = callSOAPWithParams($client, "Authenticate", $params, "CDX Facility Management");
    if ($response->error) {
        print json_encode((array('error' => 'true', 'user' => $user_id)));
        return;
    }
    $response = $response->response;
    $token = $response->securityToken;
    if (!isset($token)) {
        print json_encode((array('error' => 'true', 'user' => $user_id)));
        return;
    }
    $user_params = array(
        "securityToken" => $token,
        "userId" => $user_id);

    $user_obj = callSOAPWithParams($client, "RetrieveUser", $user_params, "CDX Facility Management");
    if ($user_obj->error) {
        print json_encode((array('error' => 'true', 'user' => $user_id)));
        return;
    }
    $response = $user_obj->response;
    $user_sec_bundle = array(
        "securityToken" => $token,
        "user" => $response->User,
    );
    $org_val = null;
    $user_orgs = callSOAPWithParams($client, "RetrieveOrganizations", $user_sec_bundle, "CDX Facility Management");
    if ($user_orgs->error) {
        print json_encode((array('error' => 'true', 'user' => $user_id)));
        return;
    }
    $response = $user_orgs->response;
    // CDX returns object if single return and array if multiple
    if (is_array($response->Organization)) {
        foreach ($response->Organization as $index => $org_val) {
            $json_return = addCDXOrganization($json_return, $org_val, $token, $user_obj->response, $client, $allowed_program_roles);
        }
    } else {
        $org_val = $response->Organization;
        $json_return = addCDXOrganization($json_return, $org_val, $token, $user_obj->response, $client, $allowed_program_roles);
    }

    $json_return['error'] = false;
    print json_encode($json_return);
}


function addCDXRole($json_return, $role, $org_id)
{
    $disallowed_types = ['State Reviewer', 'Primary Support', 'Secondary Support'];
    $role_obj = array();
    $role_type = $role->type->description;
    $status = $role->status->code;
    if (!in_array($role_type, $disallowed_types) && $status != 'Inactive') {
        $role_obj['type'] = $role_type;
        $role_obj['userRoleId'] = $role->userRoleId;
        if (!isset($json_return['organizations_to_roles'][$org_id]['roles'][$role->dataflow]))
            $json_return['organizations_to_roles'][$org_id]['roles'][$role->dataflow] = array();
        $json_return['organizations_to_roles'][$org_id]['roles'][$role->dataflow][] = $role_obj;
    }
    return $json_return;
}

function addCDXOrganization($json_return, $org_val, $token, $user_obj, $client, $allowed_program_roles)
{
    $org_id = $org_val->userOrganizationId;
    $org_name = $org_val->organizationName;
    $json_return['organizations_to_roles'][$org_id] = array('name' => $org_name);
    $user_sec_org_bundle = array(
        "securityToken" => $token,
        "user" => $user_obj->User,
        "org" => $org_val,
    );
    $user_roles = callSOAPWithParams($client, "RetrieveRoles", $user_sec_org_bundle, "CDX Facility Management");
    if ($user_roles->error)
        return $json_return;

    $user_roles = $user_roles->response;
    // Check if roles are assigned to organizat            ion
    if (!isset($user_roles->Role))
        return $json_return;

    // Check if multiple roles or single role
    if (is_array($user_roles->Role)) {
        foreach ($user_roles->Role as $key => $role) {
            if (in_array($role->dataflow, $allowed_program_roles))
                $json_return = addCDXRole($json_return, $role, $org_id);
        }
    } else {
        $role = $user_roles->Role;
        if (in_array($role->dataflow, $allowed_program_roles))
            $json_return = addCDXRole($json_return, $role, $org_id);
    }


if (!isset($json_return['organizations_to_roles'][$org_id]['roles']))
    unset($json_return['organizations_to_roles'][$org_id]);

return $json_return;
}


// Returns json for use in jquery of configs for CDX Facility Management             Widget
function cdx_facility_configurations()
{
    $url = variable_get('cdx_facility_resource_url');
    $configs = array();
    $configs['url'] = $url;
    echo json_encode($configs);
    exit();
}