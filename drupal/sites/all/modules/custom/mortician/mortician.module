<?php

/**
 * Implements hook_menu()
 * @return mixed
 */
function mortician_menu() {
  $items['admin/config/development/performance/default'] = array(
    'title' => 'Performance',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/config/development/performance/mortician'] = array(
    'title' => 'Mortician - Clean up dead modules',
    'access arguments' => array('administer mortician'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mortician_callback'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'mortician.admin.inc',
  );

  $items['admin/config/development/performance/mortician/remove'] = array(
    'title' => 'Mortician',
    'access arguments' => array('administer mortician'),
    'page callback' => '_mortician_remove_callback',
    'file' => 'mortician.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission()
 * @return array
 */
function mortician_permission() {
  return array(
    'administer mortician' => array(
      'title' => t('Administer mortician'),
      'description' => t('Perform administration tasks for mortician module.'),
    ),
  );
}

/**
 * Implements hook_help().
 * @param $path
 * @param $arg
 * @return null|string
 */
function mortician_help($path, $arg) {
  switch ($path) {
    case 'admin/help#mortician':

      $filepath = dirname(__FILE__) . '/README.md';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
      else {
        $filepath = dirname(__FILE__) . '/README.txt';
        if (file_exists($filepath)) {
          $readme = file_get_contents($filepath);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;
  }
}

/**
 * Gets a list of dead modules
 * @return array
 */
function get_dead_modules() {
  $modules = [];
  $result = db_select('system')
    ->fields('system')
    ->execute();

  foreach ($result as $node) {
    $path = DRUPAL_ROOT . '/' . $node->filename;
    If (!file_exists($path)) {
      $modules[$node->filename] = $node;
      $modules[$node->filename]->info = unserialize($node->info);
    }
  }

  return $modules;
}

/**
 * Remove dead modules
 * @param $moduleIndex
 * @return DatabaseStatementInterface
 */
function mortician_remove_module($moduleIndex) {
  $num_deleted = 0;
  $modulePath = explode('/', $moduleIndex);
  $moduleName = $modulePath[count($modulePath) - 2];
  if (strlen($moduleName) > 1) {
    $num_deleted = db_delete('system')
      ->condition('filename', $moduleIndex)
      ->condition('name', $moduleName)
      ->execute();
    if ($num_deleted == 1) {
      drupal_set_message("'$moduleName' has been removed");
    } else {
      drupal_set_message("Unable to remove module listed under: " . $moduleIndex);
    }
  }
  else {
    drupal_set_message("Unable to remove module listed under: " . $moduleIndex);
  }
  return $num_deleted;
}